
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Deposit` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model Deposit
 * 
 */
export type DepositModel = runtime.Types.Result.DefaultSelection<Prisma.$DepositPayload>

export type AggregateDeposit = {
  _count: DepositCountAggregateOutputType | null
  _avg: DepositAvgAggregateOutputType | null
  _sum: DepositSumAggregateOutputType | null
  _min: DepositMinAggregateOutputType | null
  _max: DepositMaxAggregateOutputType | null
}

export type DepositAvgAggregateOutputType = {
  amount: number | null
}

export type DepositSumAggregateOutputType = {
  amount: number | null
}

export type DepositMinAggregateOutputType = {
  id: string | null
  userId: string | null
  mt5AccountId: string | null
  amount: number | null
  currency: string | null
  method: string | null
  paymentMethod: string | null
  transactionHash: string | null
  proofFileUrl: string | null
  bankDetails: string | null
  cryptoAddress: string | null
  depositAddress: string | null
  externalTransactionId: string | null
  status: string | null
  rejectionReason: string | null
  approvedBy: string | null
  approvedAt: Date | null
  rejectedAt: Date | null
  processedAt: Date | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type DepositMaxAggregateOutputType = {
  id: string | null
  userId: string | null
  mt5AccountId: string | null
  amount: number | null
  currency: string | null
  method: string | null
  paymentMethod: string | null
  transactionHash: string | null
  proofFileUrl: string | null
  bankDetails: string | null
  cryptoAddress: string | null
  depositAddress: string | null
  externalTransactionId: string | null
  status: string | null
  rejectionReason: string | null
  approvedBy: string | null
  approvedAt: Date | null
  rejectedAt: Date | null
  processedAt: Date | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type DepositCountAggregateOutputType = {
  id: number
  userId: number
  mt5AccountId: number
  amount: number
  currency: number
  method: number
  paymentMethod: number
  transactionHash: number
  proofFileUrl: number
  bankDetails: number
  cryptoAddress: number
  depositAddress: number
  externalTransactionId: number
  status: number
  rejectionReason: number
  approvedBy: number
  approvedAt: number
  rejectedAt: number
  processedAt: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type DepositAvgAggregateInputType = {
  amount?: true
}

export type DepositSumAggregateInputType = {
  amount?: true
}

export type DepositMinAggregateInputType = {
  id?: true
  userId?: true
  mt5AccountId?: true
  amount?: true
  currency?: true
  method?: true
  paymentMethod?: true
  transactionHash?: true
  proofFileUrl?: true
  bankDetails?: true
  cryptoAddress?: true
  depositAddress?: true
  externalTransactionId?: true
  status?: true
  rejectionReason?: true
  approvedBy?: true
  approvedAt?: true
  rejectedAt?: true
  processedAt?: true
  createdAt?: true
  updatedAt?: true
}

export type DepositMaxAggregateInputType = {
  id?: true
  userId?: true
  mt5AccountId?: true
  amount?: true
  currency?: true
  method?: true
  paymentMethod?: true
  transactionHash?: true
  proofFileUrl?: true
  bankDetails?: true
  cryptoAddress?: true
  depositAddress?: true
  externalTransactionId?: true
  status?: true
  rejectionReason?: true
  approvedBy?: true
  approvedAt?: true
  rejectedAt?: true
  processedAt?: true
  createdAt?: true
  updatedAt?: true
}

export type DepositCountAggregateInputType = {
  id?: true
  userId?: true
  mt5AccountId?: true
  amount?: true
  currency?: true
  method?: true
  paymentMethod?: true
  transactionHash?: true
  proofFileUrl?: true
  bankDetails?: true
  cryptoAddress?: true
  depositAddress?: true
  externalTransactionId?: true
  status?: true
  rejectionReason?: true
  approvedBy?: true
  approvedAt?: true
  rejectedAt?: true
  processedAt?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type DepositAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Deposit to aggregate.
   */
  where?: Prisma.DepositWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Deposits to fetch.
   */
  orderBy?: Prisma.DepositOrderByWithRelationInput | Prisma.DepositOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.DepositWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Deposits from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Deposits.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Deposits
  **/
  _count?: true | DepositCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: DepositAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: DepositSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: DepositMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: DepositMaxAggregateInputType
}

export type GetDepositAggregateType<T extends DepositAggregateArgs> = {
      [P in keyof T & keyof AggregateDeposit]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateDeposit[P]>
    : Prisma.GetScalarType<T[P], AggregateDeposit[P]>
}




export type DepositGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.DepositWhereInput
  orderBy?: Prisma.DepositOrderByWithAggregationInput | Prisma.DepositOrderByWithAggregationInput[]
  by: Prisma.DepositScalarFieldEnum[] | Prisma.DepositScalarFieldEnum
  having?: Prisma.DepositScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: DepositCountAggregateInputType | true
  _avg?: DepositAvgAggregateInputType
  _sum?: DepositSumAggregateInputType
  _min?: DepositMinAggregateInputType
  _max?: DepositMaxAggregateInputType
}

export type DepositGroupByOutputType = {
  id: string
  userId: string
  mt5AccountId: string
  amount: number
  currency: string
  method: string
  paymentMethod: string | null
  transactionHash: string | null
  proofFileUrl: string | null
  bankDetails: string | null
  cryptoAddress: string | null
  depositAddress: string | null
  externalTransactionId: string | null
  status: string
  rejectionReason: string | null
  approvedBy: string | null
  approvedAt: Date | null
  rejectedAt: Date | null
  processedAt: Date | null
  createdAt: Date
  updatedAt: Date
  _count: DepositCountAggregateOutputType | null
  _avg: DepositAvgAggregateOutputType | null
  _sum: DepositSumAggregateOutputType | null
  _min: DepositMinAggregateOutputType | null
  _max: DepositMaxAggregateOutputType | null
}

type GetDepositGroupByPayload<T extends DepositGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<DepositGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof DepositGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], DepositGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], DepositGroupByOutputType[P]>
      }
    >
  >



export type DepositWhereInput = {
  AND?: Prisma.DepositWhereInput | Prisma.DepositWhereInput[]
  OR?: Prisma.DepositWhereInput[]
  NOT?: Prisma.DepositWhereInput | Prisma.DepositWhereInput[]
  id?: Prisma.StringFilter<"Deposit"> | string
  userId?: Prisma.StringFilter<"Deposit"> | string
  mt5AccountId?: Prisma.StringFilter<"Deposit"> | string
  amount?: Prisma.FloatFilter<"Deposit"> | number
  currency?: Prisma.StringFilter<"Deposit"> | string
  method?: Prisma.StringFilter<"Deposit"> | string
  paymentMethod?: Prisma.StringNullableFilter<"Deposit"> | string | null
  transactionHash?: Prisma.StringNullableFilter<"Deposit"> | string | null
  proofFileUrl?: Prisma.StringNullableFilter<"Deposit"> | string | null
  bankDetails?: Prisma.StringNullableFilter<"Deposit"> | string | null
  cryptoAddress?: Prisma.StringNullableFilter<"Deposit"> | string | null
  depositAddress?: Prisma.StringNullableFilter<"Deposit"> | string | null
  externalTransactionId?: Prisma.StringNullableFilter<"Deposit"> | string | null
  status?: Prisma.StringFilter<"Deposit"> | string
  rejectionReason?: Prisma.StringNullableFilter<"Deposit"> | string | null
  approvedBy?: Prisma.StringNullableFilter<"Deposit"> | string | null
  approvedAt?: Prisma.DateTimeNullableFilter<"Deposit"> | Date | string | null
  rejectedAt?: Prisma.DateTimeNullableFilter<"Deposit"> | Date | string | null
  processedAt?: Prisma.DateTimeNullableFilter<"Deposit"> | Date | string | null
  createdAt?: Prisma.DateTimeFilter<"Deposit"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Deposit"> | Date | string
  User?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  Transaction?: Prisma.TransactionListRelationFilter
}

export type DepositOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  mt5AccountId?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  currency?: Prisma.SortOrder
  method?: Prisma.SortOrder
  paymentMethod?: Prisma.SortOrderInput | Prisma.SortOrder
  transactionHash?: Prisma.SortOrderInput | Prisma.SortOrder
  proofFileUrl?: Prisma.SortOrderInput | Prisma.SortOrder
  bankDetails?: Prisma.SortOrderInput | Prisma.SortOrder
  cryptoAddress?: Prisma.SortOrderInput | Prisma.SortOrder
  depositAddress?: Prisma.SortOrderInput | Prisma.SortOrder
  externalTransactionId?: Prisma.SortOrderInput | Prisma.SortOrder
  status?: Prisma.SortOrder
  rejectionReason?: Prisma.SortOrderInput | Prisma.SortOrder
  approvedBy?: Prisma.SortOrderInput | Prisma.SortOrder
  approvedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  rejectedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  processedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  User?: Prisma.UserOrderByWithRelationInput
  Transaction?: Prisma.TransactionOrderByRelationAggregateInput
}

export type DepositWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.DepositWhereInput | Prisma.DepositWhereInput[]
  OR?: Prisma.DepositWhereInput[]
  NOT?: Prisma.DepositWhereInput | Prisma.DepositWhereInput[]
  userId?: Prisma.StringFilter<"Deposit"> | string
  mt5AccountId?: Prisma.StringFilter<"Deposit"> | string
  amount?: Prisma.FloatFilter<"Deposit"> | number
  currency?: Prisma.StringFilter<"Deposit"> | string
  method?: Prisma.StringFilter<"Deposit"> | string
  paymentMethod?: Prisma.StringNullableFilter<"Deposit"> | string | null
  transactionHash?: Prisma.StringNullableFilter<"Deposit"> | string | null
  proofFileUrl?: Prisma.StringNullableFilter<"Deposit"> | string | null
  bankDetails?: Prisma.StringNullableFilter<"Deposit"> | string | null
  cryptoAddress?: Prisma.StringNullableFilter<"Deposit"> | string | null
  depositAddress?: Prisma.StringNullableFilter<"Deposit"> | string | null
  externalTransactionId?: Prisma.StringNullableFilter<"Deposit"> | string | null
  status?: Prisma.StringFilter<"Deposit"> | string
  rejectionReason?: Prisma.StringNullableFilter<"Deposit"> | string | null
  approvedBy?: Prisma.StringNullableFilter<"Deposit"> | string | null
  approvedAt?: Prisma.DateTimeNullableFilter<"Deposit"> | Date | string | null
  rejectedAt?: Prisma.DateTimeNullableFilter<"Deposit"> | Date | string | null
  processedAt?: Prisma.DateTimeNullableFilter<"Deposit"> | Date | string | null
  createdAt?: Prisma.DateTimeFilter<"Deposit"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Deposit"> | Date | string
  User?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  Transaction?: Prisma.TransactionListRelationFilter
}, "id">

export type DepositOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  mt5AccountId?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  currency?: Prisma.SortOrder
  method?: Prisma.SortOrder
  paymentMethod?: Prisma.SortOrderInput | Prisma.SortOrder
  transactionHash?: Prisma.SortOrderInput | Prisma.SortOrder
  proofFileUrl?: Prisma.SortOrderInput | Prisma.SortOrder
  bankDetails?: Prisma.SortOrderInput | Prisma.SortOrder
  cryptoAddress?: Prisma.SortOrderInput | Prisma.SortOrder
  depositAddress?: Prisma.SortOrderInput | Prisma.SortOrder
  externalTransactionId?: Prisma.SortOrderInput | Prisma.SortOrder
  status?: Prisma.SortOrder
  rejectionReason?: Prisma.SortOrderInput | Prisma.SortOrder
  approvedBy?: Prisma.SortOrderInput | Prisma.SortOrder
  approvedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  rejectedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  processedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.DepositCountOrderByAggregateInput
  _avg?: Prisma.DepositAvgOrderByAggregateInput
  _max?: Prisma.DepositMaxOrderByAggregateInput
  _min?: Prisma.DepositMinOrderByAggregateInput
  _sum?: Prisma.DepositSumOrderByAggregateInput
}

export type DepositScalarWhereWithAggregatesInput = {
  AND?: Prisma.DepositScalarWhereWithAggregatesInput | Prisma.DepositScalarWhereWithAggregatesInput[]
  OR?: Prisma.DepositScalarWhereWithAggregatesInput[]
  NOT?: Prisma.DepositScalarWhereWithAggregatesInput | Prisma.DepositScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Deposit"> | string
  userId?: Prisma.StringWithAggregatesFilter<"Deposit"> | string
  mt5AccountId?: Prisma.StringWithAggregatesFilter<"Deposit"> | string
  amount?: Prisma.FloatWithAggregatesFilter<"Deposit"> | number
  currency?: Prisma.StringWithAggregatesFilter<"Deposit"> | string
  method?: Prisma.StringWithAggregatesFilter<"Deposit"> | string
  paymentMethod?: Prisma.StringNullableWithAggregatesFilter<"Deposit"> | string | null
  transactionHash?: Prisma.StringNullableWithAggregatesFilter<"Deposit"> | string | null
  proofFileUrl?: Prisma.StringNullableWithAggregatesFilter<"Deposit"> | string | null
  bankDetails?: Prisma.StringNullableWithAggregatesFilter<"Deposit"> | string | null
  cryptoAddress?: Prisma.StringNullableWithAggregatesFilter<"Deposit"> | string | null
  depositAddress?: Prisma.StringNullableWithAggregatesFilter<"Deposit"> | string | null
  externalTransactionId?: Prisma.StringNullableWithAggregatesFilter<"Deposit"> | string | null
  status?: Prisma.StringWithAggregatesFilter<"Deposit"> | string
  rejectionReason?: Prisma.StringNullableWithAggregatesFilter<"Deposit"> | string | null
  approvedBy?: Prisma.StringNullableWithAggregatesFilter<"Deposit"> | string | null
  approvedAt?: Prisma.DateTimeNullableWithAggregatesFilter<"Deposit"> | Date | string | null
  rejectedAt?: Prisma.DateTimeNullableWithAggregatesFilter<"Deposit"> | Date | string | null
  processedAt?: Prisma.DateTimeNullableWithAggregatesFilter<"Deposit"> | Date | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Deposit"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Deposit"> | Date | string
}

export type DepositCreateInput = {
  id: string
  mt5AccountId: string
  amount: number
  currency?: string
  method: string
  paymentMethod?: string | null
  transactionHash?: string | null
  proofFileUrl?: string | null
  bankDetails?: string | null
  cryptoAddress?: string | null
  depositAddress?: string | null
  externalTransactionId?: string | null
  status?: string
  rejectionReason?: string | null
  approvedBy?: string | null
  approvedAt?: Date | string | null
  rejectedAt?: Date | string | null
  processedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt: Date | string
  User: Prisma.UserCreateNestedOneWithoutDepositInput
  Transaction?: Prisma.TransactionCreateNestedManyWithoutDepositInput
}

export type DepositUncheckedCreateInput = {
  id: string
  userId: string
  mt5AccountId: string
  amount: number
  currency?: string
  method: string
  paymentMethod?: string | null
  transactionHash?: string | null
  proofFileUrl?: string | null
  bankDetails?: string | null
  cryptoAddress?: string | null
  depositAddress?: string | null
  externalTransactionId?: string | null
  status?: string
  rejectionReason?: string | null
  approvedBy?: string | null
  approvedAt?: Date | string | null
  rejectedAt?: Date | string | null
  processedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt: Date | string
  Transaction?: Prisma.TransactionUncheckedCreateNestedManyWithoutDepositInput
}

export type DepositUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  mt5AccountId?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  method?: Prisma.StringFieldUpdateOperationsInput | string
  paymentMethod?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  transactionHash?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  proofFileUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bankDetails?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  cryptoAddress?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  depositAddress?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  externalTransactionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  rejectionReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  approvedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  approvedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  rejectedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  processedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  User?: Prisma.UserUpdateOneRequiredWithoutDepositNestedInput
  Transaction?: Prisma.TransactionUpdateManyWithoutDepositNestedInput
}

export type DepositUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  mt5AccountId?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  method?: Prisma.StringFieldUpdateOperationsInput | string
  paymentMethod?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  transactionHash?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  proofFileUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bankDetails?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  cryptoAddress?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  depositAddress?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  externalTransactionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  rejectionReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  approvedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  approvedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  rejectedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  processedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  Transaction?: Prisma.TransactionUncheckedUpdateManyWithoutDepositNestedInput
}

export type DepositCreateManyInput = {
  id: string
  userId: string
  mt5AccountId: string
  amount: number
  currency?: string
  method: string
  paymentMethod?: string | null
  transactionHash?: string | null
  proofFileUrl?: string | null
  bankDetails?: string | null
  cryptoAddress?: string | null
  depositAddress?: string | null
  externalTransactionId?: string | null
  status?: string
  rejectionReason?: string | null
  approvedBy?: string | null
  approvedAt?: Date | string | null
  rejectedAt?: Date | string | null
  processedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt: Date | string
}

export type DepositUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  mt5AccountId?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  method?: Prisma.StringFieldUpdateOperationsInput | string
  paymentMethod?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  transactionHash?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  proofFileUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bankDetails?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  cryptoAddress?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  depositAddress?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  externalTransactionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  rejectionReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  approvedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  approvedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  rejectedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  processedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DepositUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  mt5AccountId?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  method?: Prisma.StringFieldUpdateOperationsInput | string
  paymentMethod?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  transactionHash?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  proofFileUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bankDetails?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  cryptoAddress?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  depositAddress?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  externalTransactionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  rejectionReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  approvedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  approvedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  rejectedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  processedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DepositCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  mt5AccountId?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  currency?: Prisma.SortOrder
  method?: Prisma.SortOrder
  paymentMethod?: Prisma.SortOrder
  transactionHash?: Prisma.SortOrder
  proofFileUrl?: Prisma.SortOrder
  bankDetails?: Prisma.SortOrder
  cryptoAddress?: Prisma.SortOrder
  depositAddress?: Prisma.SortOrder
  externalTransactionId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  rejectionReason?: Prisma.SortOrder
  approvedBy?: Prisma.SortOrder
  approvedAt?: Prisma.SortOrder
  rejectedAt?: Prisma.SortOrder
  processedAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type DepositAvgOrderByAggregateInput = {
  amount?: Prisma.SortOrder
}

export type DepositMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  mt5AccountId?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  currency?: Prisma.SortOrder
  method?: Prisma.SortOrder
  paymentMethod?: Prisma.SortOrder
  transactionHash?: Prisma.SortOrder
  proofFileUrl?: Prisma.SortOrder
  bankDetails?: Prisma.SortOrder
  cryptoAddress?: Prisma.SortOrder
  depositAddress?: Prisma.SortOrder
  externalTransactionId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  rejectionReason?: Prisma.SortOrder
  approvedBy?: Prisma.SortOrder
  approvedAt?: Prisma.SortOrder
  rejectedAt?: Prisma.SortOrder
  processedAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type DepositMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  mt5AccountId?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  currency?: Prisma.SortOrder
  method?: Prisma.SortOrder
  paymentMethod?: Prisma.SortOrder
  transactionHash?: Prisma.SortOrder
  proofFileUrl?: Prisma.SortOrder
  bankDetails?: Prisma.SortOrder
  cryptoAddress?: Prisma.SortOrder
  depositAddress?: Prisma.SortOrder
  externalTransactionId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  rejectionReason?: Prisma.SortOrder
  approvedBy?: Prisma.SortOrder
  approvedAt?: Prisma.SortOrder
  rejectedAt?: Prisma.SortOrder
  processedAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type DepositSumOrderByAggregateInput = {
  amount?: Prisma.SortOrder
}

export type DepositNullableScalarRelationFilter = {
  is?: Prisma.DepositWhereInput | null
  isNot?: Prisma.DepositWhereInput | null
}

export type DepositListRelationFilter = {
  every?: Prisma.DepositWhereInput
  some?: Prisma.DepositWhereInput
  none?: Prisma.DepositWhereInput
}

export type DepositOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type NullableDateTimeFieldUpdateOperationsInput = {
  set?: Date | string | null
}

export type DepositCreateNestedOneWithoutTransactionInput = {
  create?: Prisma.XOR<Prisma.DepositCreateWithoutTransactionInput, Prisma.DepositUncheckedCreateWithoutTransactionInput>
  connectOrCreate?: Prisma.DepositCreateOrConnectWithoutTransactionInput
  connect?: Prisma.DepositWhereUniqueInput
}

export type DepositUpdateOneWithoutTransactionNestedInput = {
  create?: Prisma.XOR<Prisma.DepositCreateWithoutTransactionInput, Prisma.DepositUncheckedCreateWithoutTransactionInput>
  connectOrCreate?: Prisma.DepositCreateOrConnectWithoutTransactionInput
  upsert?: Prisma.DepositUpsertWithoutTransactionInput
  disconnect?: Prisma.DepositWhereInput | boolean
  delete?: Prisma.DepositWhereInput | boolean
  connect?: Prisma.DepositWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.DepositUpdateToOneWithWhereWithoutTransactionInput, Prisma.DepositUpdateWithoutTransactionInput>, Prisma.DepositUncheckedUpdateWithoutTransactionInput>
}

export type DepositCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.DepositCreateWithoutUserInput, Prisma.DepositUncheckedCreateWithoutUserInput> | Prisma.DepositCreateWithoutUserInput[] | Prisma.DepositUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.DepositCreateOrConnectWithoutUserInput | Prisma.DepositCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.DepositCreateManyUserInputEnvelope
  connect?: Prisma.DepositWhereUniqueInput | Prisma.DepositWhereUniqueInput[]
}

export type DepositUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.DepositCreateWithoutUserInput, Prisma.DepositUncheckedCreateWithoutUserInput> | Prisma.DepositCreateWithoutUserInput[] | Prisma.DepositUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.DepositCreateOrConnectWithoutUserInput | Prisma.DepositCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.DepositCreateManyUserInputEnvelope
  connect?: Prisma.DepositWhereUniqueInput | Prisma.DepositWhereUniqueInput[]
}

export type DepositUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.DepositCreateWithoutUserInput, Prisma.DepositUncheckedCreateWithoutUserInput> | Prisma.DepositCreateWithoutUserInput[] | Prisma.DepositUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.DepositCreateOrConnectWithoutUserInput | Prisma.DepositCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.DepositUpsertWithWhereUniqueWithoutUserInput | Prisma.DepositUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.DepositCreateManyUserInputEnvelope
  set?: Prisma.DepositWhereUniqueInput | Prisma.DepositWhereUniqueInput[]
  disconnect?: Prisma.DepositWhereUniqueInput | Prisma.DepositWhereUniqueInput[]
  delete?: Prisma.DepositWhereUniqueInput | Prisma.DepositWhereUniqueInput[]
  connect?: Prisma.DepositWhereUniqueInput | Prisma.DepositWhereUniqueInput[]
  update?: Prisma.DepositUpdateWithWhereUniqueWithoutUserInput | Prisma.DepositUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.DepositUpdateManyWithWhereWithoutUserInput | Prisma.DepositUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.DepositScalarWhereInput | Prisma.DepositScalarWhereInput[]
}

export type DepositUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.DepositCreateWithoutUserInput, Prisma.DepositUncheckedCreateWithoutUserInput> | Prisma.DepositCreateWithoutUserInput[] | Prisma.DepositUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.DepositCreateOrConnectWithoutUserInput | Prisma.DepositCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.DepositUpsertWithWhereUniqueWithoutUserInput | Prisma.DepositUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.DepositCreateManyUserInputEnvelope
  set?: Prisma.DepositWhereUniqueInput | Prisma.DepositWhereUniqueInput[]
  disconnect?: Prisma.DepositWhereUniqueInput | Prisma.DepositWhereUniqueInput[]
  delete?: Prisma.DepositWhereUniqueInput | Prisma.DepositWhereUniqueInput[]
  connect?: Prisma.DepositWhereUniqueInput | Prisma.DepositWhereUniqueInput[]
  update?: Prisma.DepositUpdateWithWhereUniqueWithoutUserInput | Prisma.DepositUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.DepositUpdateManyWithWhereWithoutUserInput | Prisma.DepositUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.DepositScalarWhereInput | Prisma.DepositScalarWhereInput[]
}

export type DepositCreateWithoutTransactionInput = {
  id: string
  mt5AccountId: string
  amount: number
  currency?: string
  method: string
  paymentMethod?: string | null
  transactionHash?: string | null
  proofFileUrl?: string | null
  bankDetails?: string | null
  cryptoAddress?: string | null
  depositAddress?: string | null
  externalTransactionId?: string | null
  status?: string
  rejectionReason?: string | null
  approvedBy?: string | null
  approvedAt?: Date | string | null
  rejectedAt?: Date | string | null
  processedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt: Date | string
  User: Prisma.UserCreateNestedOneWithoutDepositInput
}

export type DepositUncheckedCreateWithoutTransactionInput = {
  id: string
  userId: string
  mt5AccountId: string
  amount: number
  currency?: string
  method: string
  paymentMethod?: string | null
  transactionHash?: string | null
  proofFileUrl?: string | null
  bankDetails?: string | null
  cryptoAddress?: string | null
  depositAddress?: string | null
  externalTransactionId?: string | null
  status?: string
  rejectionReason?: string | null
  approvedBy?: string | null
  approvedAt?: Date | string | null
  rejectedAt?: Date | string | null
  processedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt: Date | string
}

export type DepositCreateOrConnectWithoutTransactionInput = {
  where: Prisma.DepositWhereUniqueInput
  create: Prisma.XOR<Prisma.DepositCreateWithoutTransactionInput, Prisma.DepositUncheckedCreateWithoutTransactionInput>
}

export type DepositUpsertWithoutTransactionInput = {
  update: Prisma.XOR<Prisma.DepositUpdateWithoutTransactionInput, Prisma.DepositUncheckedUpdateWithoutTransactionInput>
  create: Prisma.XOR<Prisma.DepositCreateWithoutTransactionInput, Prisma.DepositUncheckedCreateWithoutTransactionInput>
  where?: Prisma.DepositWhereInput
}

export type DepositUpdateToOneWithWhereWithoutTransactionInput = {
  where?: Prisma.DepositWhereInput
  data: Prisma.XOR<Prisma.DepositUpdateWithoutTransactionInput, Prisma.DepositUncheckedUpdateWithoutTransactionInput>
}

export type DepositUpdateWithoutTransactionInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  mt5AccountId?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  method?: Prisma.StringFieldUpdateOperationsInput | string
  paymentMethod?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  transactionHash?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  proofFileUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bankDetails?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  cryptoAddress?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  depositAddress?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  externalTransactionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  rejectionReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  approvedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  approvedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  rejectedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  processedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  User?: Prisma.UserUpdateOneRequiredWithoutDepositNestedInput
}

export type DepositUncheckedUpdateWithoutTransactionInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  mt5AccountId?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  method?: Prisma.StringFieldUpdateOperationsInput | string
  paymentMethod?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  transactionHash?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  proofFileUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bankDetails?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  cryptoAddress?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  depositAddress?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  externalTransactionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  rejectionReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  approvedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  approvedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  rejectedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  processedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DepositCreateWithoutUserInput = {
  id: string
  mt5AccountId: string
  amount: number
  currency?: string
  method: string
  paymentMethod?: string | null
  transactionHash?: string | null
  proofFileUrl?: string | null
  bankDetails?: string | null
  cryptoAddress?: string | null
  depositAddress?: string | null
  externalTransactionId?: string | null
  status?: string
  rejectionReason?: string | null
  approvedBy?: string | null
  approvedAt?: Date | string | null
  rejectedAt?: Date | string | null
  processedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt: Date | string
  Transaction?: Prisma.TransactionCreateNestedManyWithoutDepositInput
}

export type DepositUncheckedCreateWithoutUserInput = {
  id: string
  mt5AccountId: string
  amount: number
  currency?: string
  method: string
  paymentMethod?: string | null
  transactionHash?: string | null
  proofFileUrl?: string | null
  bankDetails?: string | null
  cryptoAddress?: string | null
  depositAddress?: string | null
  externalTransactionId?: string | null
  status?: string
  rejectionReason?: string | null
  approvedBy?: string | null
  approvedAt?: Date | string | null
  rejectedAt?: Date | string | null
  processedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt: Date | string
  Transaction?: Prisma.TransactionUncheckedCreateNestedManyWithoutDepositInput
}

export type DepositCreateOrConnectWithoutUserInput = {
  where: Prisma.DepositWhereUniqueInput
  create: Prisma.XOR<Prisma.DepositCreateWithoutUserInput, Prisma.DepositUncheckedCreateWithoutUserInput>
}

export type DepositCreateManyUserInputEnvelope = {
  data: Prisma.DepositCreateManyUserInput | Prisma.DepositCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type DepositUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.DepositWhereUniqueInput
  update: Prisma.XOR<Prisma.DepositUpdateWithoutUserInput, Prisma.DepositUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.DepositCreateWithoutUserInput, Prisma.DepositUncheckedCreateWithoutUserInput>
}

export type DepositUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.DepositWhereUniqueInput
  data: Prisma.XOR<Prisma.DepositUpdateWithoutUserInput, Prisma.DepositUncheckedUpdateWithoutUserInput>
}

export type DepositUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.DepositScalarWhereInput
  data: Prisma.XOR<Prisma.DepositUpdateManyMutationInput, Prisma.DepositUncheckedUpdateManyWithoutUserInput>
}

export type DepositScalarWhereInput = {
  AND?: Prisma.DepositScalarWhereInput | Prisma.DepositScalarWhereInput[]
  OR?: Prisma.DepositScalarWhereInput[]
  NOT?: Prisma.DepositScalarWhereInput | Prisma.DepositScalarWhereInput[]
  id?: Prisma.StringFilter<"Deposit"> | string
  userId?: Prisma.StringFilter<"Deposit"> | string
  mt5AccountId?: Prisma.StringFilter<"Deposit"> | string
  amount?: Prisma.FloatFilter<"Deposit"> | number
  currency?: Prisma.StringFilter<"Deposit"> | string
  method?: Prisma.StringFilter<"Deposit"> | string
  paymentMethod?: Prisma.StringNullableFilter<"Deposit"> | string | null
  transactionHash?: Prisma.StringNullableFilter<"Deposit"> | string | null
  proofFileUrl?: Prisma.StringNullableFilter<"Deposit"> | string | null
  bankDetails?: Prisma.StringNullableFilter<"Deposit"> | string | null
  cryptoAddress?: Prisma.StringNullableFilter<"Deposit"> | string | null
  depositAddress?: Prisma.StringNullableFilter<"Deposit"> | string | null
  externalTransactionId?: Prisma.StringNullableFilter<"Deposit"> | string | null
  status?: Prisma.StringFilter<"Deposit"> | string
  rejectionReason?: Prisma.StringNullableFilter<"Deposit"> | string | null
  approvedBy?: Prisma.StringNullableFilter<"Deposit"> | string | null
  approvedAt?: Prisma.DateTimeNullableFilter<"Deposit"> | Date | string | null
  rejectedAt?: Prisma.DateTimeNullableFilter<"Deposit"> | Date | string | null
  processedAt?: Prisma.DateTimeNullableFilter<"Deposit"> | Date | string | null
  createdAt?: Prisma.DateTimeFilter<"Deposit"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Deposit"> | Date | string
}

export type DepositCreateManyUserInput = {
  id: string
  mt5AccountId: string
  amount: number
  currency?: string
  method: string
  paymentMethod?: string | null
  transactionHash?: string | null
  proofFileUrl?: string | null
  bankDetails?: string | null
  cryptoAddress?: string | null
  depositAddress?: string | null
  externalTransactionId?: string | null
  status?: string
  rejectionReason?: string | null
  approvedBy?: string | null
  approvedAt?: Date | string | null
  rejectedAt?: Date | string | null
  processedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt: Date | string
}

export type DepositUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  mt5AccountId?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  method?: Prisma.StringFieldUpdateOperationsInput | string
  paymentMethod?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  transactionHash?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  proofFileUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bankDetails?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  cryptoAddress?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  depositAddress?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  externalTransactionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  rejectionReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  approvedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  approvedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  rejectedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  processedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  Transaction?: Prisma.TransactionUpdateManyWithoutDepositNestedInput
}

export type DepositUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  mt5AccountId?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  method?: Prisma.StringFieldUpdateOperationsInput | string
  paymentMethod?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  transactionHash?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  proofFileUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bankDetails?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  cryptoAddress?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  depositAddress?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  externalTransactionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  rejectionReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  approvedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  approvedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  rejectedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  processedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  Transaction?: Prisma.TransactionUncheckedUpdateManyWithoutDepositNestedInput
}

export type DepositUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  mt5AccountId?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  method?: Prisma.StringFieldUpdateOperationsInput | string
  paymentMethod?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  transactionHash?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  proofFileUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bankDetails?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  cryptoAddress?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  depositAddress?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  externalTransactionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  rejectionReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  approvedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  approvedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  rejectedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  processedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type DepositCountOutputType
 */

export type DepositCountOutputType = {
  Transaction: number
}

export type DepositCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Transaction?: boolean | DepositCountOutputTypeCountTransactionArgs
}

/**
 * DepositCountOutputType without action
 */
export type DepositCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DepositCountOutputType
   */
  select?: Prisma.DepositCountOutputTypeSelect<ExtArgs> | null
}

/**
 * DepositCountOutputType without action
 */
export type DepositCountOutputTypeCountTransactionArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TransactionWhereInput
}


export type DepositSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  mt5AccountId?: boolean
  amount?: boolean
  currency?: boolean
  method?: boolean
  paymentMethod?: boolean
  transactionHash?: boolean
  proofFileUrl?: boolean
  bankDetails?: boolean
  cryptoAddress?: boolean
  depositAddress?: boolean
  externalTransactionId?: boolean
  status?: boolean
  rejectionReason?: boolean
  approvedBy?: boolean
  approvedAt?: boolean
  rejectedAt?: boolean
  processedAt?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  User?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  Transaction?: boolean | Prisma.Deposit$TransactionArgs<ExtArgs>
  _count?: boolean | Prisma.DepositCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["deposit"]>

export type DepositSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  mt5AccountId?: boolean
  amount?: boolean
  currency?: boolean
  method?: boolean
  paymentMethod?: boolean
  transactionHash?: boolean
  proofFileUrl?: boolean
  bankDetails?: boolean
  cryptoAddress?: boolean
  depositAddress?: boolean
  externalTransactionId?: boolean
  status?: boolean
  rejectionReason?: boolean
  approvedBy?: boolean
  approvedAt?: boolean
  rejectedAt?: boolean
  processedAt?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  User?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["deposit"]>

export type DepositSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  mt5AccountId?: boolean
  amount?: boolean
  currency?: boolean
  method?: boolean
  paymentMethod?: boolean
  transactionHash?: boolean
  proofFileUrl?: boolean
  bankDetails?: boolean
  cryptoAddress?: boolean
  depositAddress?: boolean
  externalTransactionId?: boolean
  status?: boolean
  rejectionReason?: boolean
  approvedBy?: boolean
  approvedAt?: boolean
  rejectedAt?: boolean
  processedAt?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  User?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["deposit"]>

export type DepositSelectScalar = {
  id?: boolean
  userId?: boolean
  mt5AccountId?: boolean
  amount?: boolean
  currency?: boolean
  method?: boolean
  paymentMethod?: boolean
  transactionHash?: boolean
  proofFileUrl?: boolean
  bankDetails?: boolean
  cryptoAddress?: boolean
  depositAddress?: boolean
  externalTransactionId?: boolean
  status?: boolean
  rejectionReason?: boolean
  approvedBy?: boolean
  approvedAt?: boolean
  rejectedAt?: boolean
  processedAt?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type DepositOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "userId" | "mt5AccountId" | "amount" | "currency" | "method" | "paymentMethod" | "transactionHash" | "proofFileUrl" | "bankDetails" | "cryptoAddress" | "depositAddress" | "externalTransactionId" | "status" | "rejectionReason" | "approvedBy" | "approvedAt" | "rejectedAt" | "processedAt" | "createdAt" | "updatedAt", ExtArgs["result"]["deposit"]>
export type DepositInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  User?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  Transaction?: boolean | Prisma.Deposit$TransactionArgs<ExtArgs>
  _count?: boolean | Prisma.DepositCountOutputTypeDefaultArgs<ExtArgs>
}
export type DepositIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  User?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type DepositIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  User?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $DepositPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Deposit"
  objects: {
    User: Prisma.$UserPayload<ExtArgs>
    Transaction: Prisma.$TransactionPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    userId: string
    mt5AccountId: string
    amount: number
    currency: string
    method: string
    paymentMethod: string | null
    transactionHash: string | null
    proofFileUrl: string | null
    bankDetails: string | null
    cryptoAddress: string | null
    depositAddress: string | null
    externalTransactionId: string | null
    status: string
    rejectionReason: string | null
    approvedBy: string | null
    approvedAt: Date | null
    rejectedAt: Date | null
    processedAt: Date | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["deposit"]>
  composites: {}
}

export type DepositGetPayload<S extends boolean | null | undefined | DepositDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$DepositPayload, S>

export type DepositCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<DepositFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: DepositCountAggregateInputType | true
  }

export interface DepositDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Deposit'], meta: { name: 'Deposit' } }
  /**
   * Find zero or one Deposit that matches the filter.
   * @param {DepositFindUniqueArgs} args - Arguments to find a Deposit
   * @example
   * // Get one Deposit
   * const deposit = await prisma.deposit.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends DepositFindUniqueArgs>(args: Prisma.SelectSubset<T, DepositFindUniqueArgs<ExtArgs>>): Prisma.Prisma__DepositClient<runtime.Types.Result.GetResult<Prisma.$DepositPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Deposit that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {DepositFindUniqueOrThrowArgs} args - Arguments to find a Deposit
   * @example
   * // Get one Deposit
   * const deposit = await prisma.deposit.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends DepositFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, DepositFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__DepositClient<runtime.Types.Result.GetResult<Prisma.$DepositPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Deposit that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DepositFindFirstArgs} args - Arguments to find a Deposit
   * @example
   * // Get one Deposit
   * const deposit = await prisma.deposit.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends DepositFindFirstArgs>(args?: Prisma.SelectSubset<T, DepositFindFirstArgs<ExtArgs>>): Prisma.Prisma__DepositClient<runtime.Types.Result.GetResult<Prisma.$DepositPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Deposit that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DepositFindFirstOrThrowArgs} args - Arguments to find a Deposit
   * @example
   * // Get one Deposit
   * const deposit = await prisma.deposit.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends DepositFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, DepositFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__DepositClient<runtime.Types.Result.GetResult<Prisma.$DepositPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Deposits that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DepositFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Deposits
   * const deposits = await prisma.deposit.findMany()
   * 
   * // Get first 10 Deposits
   * const deposits = await prisma.deposit.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const depositWithIdOnly = await prisma.deposit.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends DepositFindManyArgs>(args?: Prisma.SelectSubset<T, DepositFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DepositPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Deposit.
   * @param {DepositCreateArgs} args - Arguments to create a Deposit.
   * @example
   * // Create one Deposit
   * const Deposit = await prisma.deposit.create({
   *   data: {
   *     // ... data to create a Deposit
   *   }
   * })
   * 
   */
  create<T extends DepositCreateArgs>(args: Prisma.SelectSubset<T, DepositCreateArgs<ExtArgs>>): Prisma.Prisma__DepositClient<runtime.Types.Result.GetResult<Prisma.$DepositPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Deposits.
   * @param {DepositCreateManyArgs} args - Arguments to create many Deposits.
   * @example
   * // Create many Deposits
   * const deposit = await prisma.deposit.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends DepositCreateManyArgs>(args?: Prisma.SelectSubset<T, DepositCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Deposits and returns the data saved in the database.
   * @param {DepositCreateManyAndReturnArgs} args - Arguments to create many Deposits.
   * @example
   * // Create many Deposits
   * const deposit = await prisma.deposit.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Deposits and only return the `id`
   * const depositWithIdOnly = await prisma.deposit.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends DepositCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, DepositCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DepositPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Deposit.
   * @param {DepositDeleteArgs} args - Arguments to delete one Deposit.
   * @example
   * // Delete one Deposit
   * const Deposit = await prisma.deposit.delete({
   *   where: {
   *     // ... filter to delete one Deposit
   *   }
   * })
   * 
   */
  delete<T extends DepositDeleteArgs>(args: Prisma.SelectSubset<T, DepositDeleteArgs<ExtArgs>>): Prisma.Prisma__DepositClient<runtime.Types.Result.GetResult<Prisma.$DepositPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Deposit.
   * @param {DepositUpdateArgs} args - Arguments to update one Deposit.
   * @example
   * // Update one Deposit
   * const deposit = await prisma.deposit.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends DepositUpdateArgs>(args: Prisma.SelectSubset<T, DepositUpdateArgs<ExtArgs>>): Prisma.Prisma__DepositClient<runtime.Types.Result.GetResult<Prisma.$DepositPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Deposits.
   * @param {DepositDeleteManyArgs} args - Arguments to filter Deposits to delete.
   * @example
   * // Delete a few Deposits
   * const { count } = await prisma.deposit.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends DepositDeleteManyArgs>(args?: Prisma.SelectSubset<T, DepositDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Deposits.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DepositUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Deposits
   * const deposit = await prisma.deposit.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends DepositUpdateManyArgs>(args: Prisma.SelectSubset<T, DepositUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Deposits and returns the data updated in the database.
   * @param {DepositUpdateManyAndReturnArgs} args - Arguments to update many Deposits.
   * @example
   * // Update many Deposits
   * const deposit = await prisma.deposit.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Deposits and only return the `id`
   * const depositWithIdOnly = await prisma.deposit.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends DepositUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, DepositUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DepositPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Deposit.
   * @param {DepositUpsertArgs} args - Arguments to update or create a Deposit.
   * @example
   * // Update or create a Deposit
   * const deposit = await prisma.deposit.upsert({
   *   create: {
   *     // ... data to create a Deposit
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Deposit we want to update
   *   }
   * })
   */
  upsert<T extends DepositUpsertArgs>(args: Prisma.SelectSubset<T, DepositUpsertArgs<ExtArgs>>): Prisma.Prisma__DepositClient<runtime.Types.Result.GetResult<Prisma.$DepositPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Deposits.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DepositCountArgs} args - Arguments to filter Deposits to count.
   * @example
   * // Count the number of Deposits
   * const count = await prisma.deposit.count({
   *   where: {
   *     // ... the filter for the Deposits we want to count
   *   }
   * })
  **/
  count<T extends DepositCountArgs>(
    args?: Prisma.Subset<T, DepositCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], DepositCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Deposit.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DepositAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends DepositAggregateArgs>(args: Prisma.Subset<T, DepositAggregateArgs>): Prisma.PrismaPromise<GetDepositAggregateType<T>>

  /**
   * Group by Deposit.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DepositGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends DepositGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: DepositGroupByArgs['orderBy'] }
      : { orderBy?: DepositGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, DepositGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDepositGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Deposit model
 */
readonly fields: DepositFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Deposit.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__DepositClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  User<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  Transaction<T extends Prisma.Deposit$TransactionArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Deposit$TransactionArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Deposit model
 */
export interface DepositFieldRefs {
  readonly id: Prisma.FieldRef<"Deposit", 'String'>
  readonly userId: Prisma.FieldRef<"Deposit", 'String'>
  readonly mt5AccountId: Prisma.FieldRef<"Deposit", 'String'>
  readonly amount: Prisma.FieldRef<"Deposit", 'Float'>
  readonly currency: Prisma.FieldRef<"Deposit", 'String'>
  readonly method: Prisma.FieldRef<"Deposit", 'String'>
  readonly paymentMethod: Prisma.FieldRef<"Deposit", 'String'>
  readonly transactionHash: Prisma.FieldRef<"Deposit", 'String'>
  readonly proofFileUrl: Prisma.FieldRef<"Deposit", 'String'>
  readonly bankDetails: Prisma.FieldRef<"Deposit", 'String'>
  readonly cryptoAddress: Prisma.FieldRef<"Deposit", 'String'>
  readonly depositAddress: Prisma.FieldRef<"Deposit", 'String'>
  readonly externalTransactionId: Prisma.FieldRef<"Deposit", 'String'>
  readonly status: Prisma.FieldRef<"Deposit", 'String'>
  readonly rejectionReason: Prisma.FieldRef<"Deposit", 'String'>
  readonly approvedBy: Prisma.FieldRef<"Deposit", 'String'>
  readonly approvedAt: Prisma.FieldRef<"Deposit", 'DateTime'>
  readonly rejectedAt: Prisma.FieldRef<"Deposit", 'DateTime'>
  readonly processedAt: Prisma.FieldRef<"Deposit", 'DateTime'>
  readonly createdAt: Prisma.FieldRef<"Deposit", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Deposit", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Deposit findUnique
 */
export type DepositFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Deposit
   */
  select?: Prisma.DepositSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Deposit
   */
  omit?: Prisma.DepositOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DepositInclude<ExtArgs> | null
  /**
   * Filter, which Deposit to fetch.
   */
  where: Prisma.DepositWhereUniqueInput
}

/**
 * Deposit findUniqueOrThrow
 */
export type DepositFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Deposit
   */
  select?: Prisma.DepositSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Deposit
   */
  omit?: Prisma.DepositOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DepositInclude<ExtArgs> | null
  /**
   * Filter, which Deposit to fetch.
   */
  where: Prisma.DepositWhereUniqueInput
}

/**
 * Deposit findFirst
 */
export type DepositFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Deposit
   */
  select?: Prisma.DepositSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Deposit
   */
  omit?: Prisma.DepositOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DepositInclude<ExtArgs> | null
  /**
   * Filter, which Deposit to fetch.
   */
  where?: Prisma.DepositWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Deposits to fetch.
   */
  orderBy?: Prisma.DepositOrderByWithRelationInput | Prisma.DepositOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Deposits.
   */
  cursor?: Prisma.DepositWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Deposits from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Deposits.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Deposits.
   */
  distinct?: Prisma.DepositScalarFieldEnum | Prisma.DepositScalarFieldEnum[]
}

/**
 * Deposit findFirstOrThrow
 */
export type DepositFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Deposit
   */
  select?: Prisma.DepositSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Deposit
   */
  omit?: Prisma.DepositOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DepositInclude<ExtArgs> | null
  /**
   * Filter, which Deposit to fetch.
   */
  where?: Prisma.DepositWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Deposits to fetch.
   */
  orderBy?: Prisma.DepositOrderByWithRelationInput | Prisma.DepositOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Deposits.
   */
  cursor?: Prisma.DepositWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Deposits from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Deposits.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Deposits.
   */
  distinct?: Prisma.DepositScalarFieldEnum | Prisma.DepositScalarFieldEnum[]
}

/**
 * Deposit findMany
 */
export type DepositFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Deposit
   */
  select?: Prisma.DepositSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Deposit
   */
  omit?: Prisma.DepositOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DepositInclude<ExtArgs> | null
  /**
   * Filter, which Deposits to fetch.
   */
  where?: Prisma.DepositWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Deposits to fetch.
   */
  orderBy?: Prisma.DepositOrderByWithRelationInput | Prisma.DepositOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Deposits.
   */
  cursor?: Prisma.DepositWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Deposits from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Deposits.
   */
  skip?: number
  distinct?: Prisma.DepositScalarFieldEnum | Prisma.DepositScalarFieldEnum[]
}

/**
 * Deposit create
 */
export type DepositCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Deposit
   */
  select?: Prisma.DepositSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Deposit
   */
  omit?: Prisma.DepositOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DepositInclude<ExtArgs> | null
  /**
   * The data needed to create a Deposit.
   */
  data: Prisma.XOR<Prisma.DepositCreateInput, Prisma.DepositUncheckedCreateInput>
}

/**
 * Deposit createMany
 */
export type DepositCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Deposits.
   */
  data: Prisma.DepositCreateManyInput | Prisma.DepositCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Deposit createManyAndReturn
 */
export type DepositCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Deposit
   */
  select?: Prisma.DepositSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Deposit
   */
  omit?: Prisma.DepositOmit<ExtArgs> | null
  /**
   * The data used to create many Deposits.
   */
  data: Prisma.DepositCreateManyInput | Prisma.DepositCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DepositIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Deposit update
 */
export type DepositUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Deposit
   */
  select?: Prisma.DepositSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Deposit
   */
  omit?: Prisma.DepositOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DepositInclude<ExtArgs> | null
  /**
   * The data needed to update a Deposit.
   */
  data: Prisma.XOR<Prisma.DepositUpdateInput, Prisma.DepositUncheckedUpdateInput>
  /**
   * Choose, which Deposit to update.
   */
  where: Prisma.DepositWhereUniqueInput
}

/**
 * Deposit updateMany
 */
export type DepositUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Deposits.
   */
  data: Prisma.XOR<Prisma.DepositUpdateManyMutationInput, Prisma.DepositUncheckedUpdateManyInput>
  /**
   * Filter which Deposits to update
   */
  where?: Prisma.DepositWhereInput
  /**
   * Limit how many Deposits to update.
   */
  limit?: number
}

/**
 * Deposit updateManyAndReturn
 */
export type DepositUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Deposit
   */
  select?: Prisma.DepositSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Deposit
   */
  omit?: Prisma.DepositOmit<ExtArgs> | null
  /**
   * The data used to update Deposits.
   */
  data: Prisma.XOR<Prisma.DepositUpdateManyMutationInput, Prisma.DepositUncheckedUpdateManyInput>
  /**
   * Filter which Deposits to update
   */
  where?: Prisma.DepositWhereInput
  /**
   * Limit how many Deposits to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DepositIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Deposit upsert
 */
export type DepositUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Deposit
   */
  select?: Prisma.DepositSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Deposit
   */
  omit?: Prisma.DepositOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DepositInclude<ExtArgs> | null
  /**
   * The filter to search for the Deposit to update in case it exists.
   */
  where: Prisma.DepositWhereUniqueInput
  /**
   * In case the Deposit found by the `where` argument doesn't exist, create a new Deposit with this data.
   */
  create: Prisma.XOR<Prisma.DepositCreateInput, Prisma.DepositUncheckedCreateInput>
  /**
   * In case the Deposit was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.DepositUpdateInput, Prisma.DepositUncheckedUpdateInput>
}

/**
 * Deposit delete
 */
export type DepositDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Deposit
   */
  select?: Prisma.DepositSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Deposit
   */
  omit?: Prisma.DepositOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DepositInclude<ExtArgs> | null
  /**
   * Filter which Deposit to delete.
   */
  where: Prisma.DepositWhereUniqueInput
}

/**
 * Deposit deleteMany
 */
export type DepositDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Deposits to delete
   */
  where?: Prisma.DepositWhereInput
  /**
   * Limit how many Deposits to delete.
   */
  limit?: number
}

/**
 * Deposit.Transaction
 */
export type Deposit$TransactionArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Transaction
   */
  select?: Prisma.TransactionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Transaction
   */
  omit?: Prisma.TransactionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransactionInclude<ExtArgs> | null
  where?: Prisma.TransactionWhereInput
  orderBy?: Prisma.TransactionOrderByWithRelationInput | Prisma.TransactionOrderByWithRelationInput[]
  cursor?: Prisma.TransactionWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.TransactionScalarFieldEnum | Prisma.TransactionScalarFieldEnum[]
}

/**
 * Deposit without action
 */
export type DepositDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Deposit
   */
  select?: Prisma.DepositSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Deposit
   */
  omit?: Prisma.DepositOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DepositInclude<ExtArgs> | null
}
