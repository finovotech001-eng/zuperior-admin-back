
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `symbols` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model symbols
 * 
 */
export type symbolsModel = runtime.Types.Result.DefaultSelection<Prisma.$symbolsPayload>

export type AggregateSymbols = {
  _count: SymbolsCountAggregateOutputType | null
  _avg: SymbolsAvgAggregateOutputType | null
  _sum: SymbolsSumAggregateOutputType | null
  _min: SymbolsMinAggregateOutputType | null
  _max: SymbolsMaxAggregateOutputType | null
}

export type SymbolsAvgAggregateOutputType = {
  id: number | null
  digits: number | null
  spread: number | null
  contract_size: number | null
  swap_long: number | null
  swap_short: number | null
}

export type SymbolsSumAggregateOutputType = {
  id: number | null
  digits: number | null
  spread: number | null
  contract_size: number | null
  swap_long: number | null
  swap_short: number | null
}

export type SymbolsMinAggregateOutputType = {
  id: number | null
  symbol_name: string | null
  description: string | null
  symbol_type: string | null
  group_name: string | null
  digits: number | null
  spread: number | null
  contract_size: number | null
  profit_mode: string | null
  enable: boolean | null
  swap_mode: string | null
  swap_long: number | null
  swap_short: number | null
  swap3_day: string | null
  created_at: Date | null
  updated_at: Date | null
}

export type SymbolsMaxAggregateOutputType = {
  id: number | null
  symbol_name: string | null
  description: string | null
  symbol_type: string | null
  group_name: string | null
  digits: number | null
  spread: number | null
  contract_size: number | null
  profit_mode: string | null
  enable: boolean | null
  swap_mode: string | null
  swap_long: number | null
  swap_short: number | null
  swap3_day: string | null
  created_at: Date | null
  updated_at: Date | null
}

export type SymbolsCountAggregateOutputType = {
  id: number
  symbol_name: number
  description: number
  symbol_type: number
  group_name: number
  digits: number
  spread: number
  contract_size: number
  profit_mode: number
  enable: number
  swap_mode: number
  swap_long: number
  swap_short: number
  swap3_day: number
  created_at: number
  updated_at: number
  _all: number
}


export type SymbolsAvgAggregateInputType = {
  id?: true
  digits?: true
  spread?: true
  contract_size?: true
  swap_long?: true
  swap_short?: true
}

export type SymbolsSumAggregateInputType = {
  id?: true
  digits?: true
  spread?: true
  contract_size?: true
  swap_long?: true
  swap_short?: true
}

export type SymbolsMinAggregateInputType = {
  id?: true
  symbol_name?: true
  description?: true
  symbol_type?: true
  group_name?: true
  digits?: true
  spread?: true
  contract_size?: true
  profit_mode?: true
  enable?: true
  swap_mode?: true
  swap_long?: true
  swap_short?: true
  swap3_day?: true
  created_at?: true
  updated_at?: true
}

export type SymbolsMaxAggregateInputType = {
  id?: true
  symbol_name?: true
  description?: true
  symbol_type?: true
  group_name?: true
  digits?: true
  spread?: true
  contract_size?: true
  profit_mode?: true
  enable?: true
  swap_mode?: true
  swap_long?: true
  swap_short?: true
  swap3_day?: true
  created_at?: true
  updated_at?: true
}

export type SymbolsCountAggregateInputType = {
  id?: true
  symbol_name?: true
  description?: true
  symbol_type?: true
  group_name?: true
  digits?: true
  spread?: true
  contract_size?: true
  profit_mode?: true
  enable?: true
  swap_mode?: true
  swap_long?: true
  swap_short?: true
  swap3_day?: true
  created_at?: true
  updated_at?: true
  _all?: true
}

export type SymbolsAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which symbols to aggregate.
   */
  where?: Prisma.symbolsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of symbols to fetch.
   */
  orderBy?: Prisma.symbolsOrderByWithRelationInput | Prisma.symbolsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.symbolsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` symbols from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` symbols.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned symbols
  **/
  _count?: true | SymbolsCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: SymbolsAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: SymbolsSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: SymbolsMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: SymbolsMaxAggregateInputType
}

export type GetSymbolsAggregateType<T extends SymbolsAggregateArgs> = {
      [P in keyof T & keyof AggregateSymbols]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateSymbols[P]>
    : Prisma.GetScalarType<T[P], AggregateSymbols[P]>
}




export type symbolsGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.symbolsWhereInput
  orderBy?: Prisma.symbolsOrderByWithAggregationInput | Prisma.symbolsOrderByWithAggregationInput[]
  by: Prisma.SymbolsScalarFieldEnum[] | Prisma.SymbolsScalarFieldEnum
  having?: Prisma.symbolsScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: SymbolsCountAggregateInputType | true
  _avg?: SymbolsAvgAggregateInputType
  _sum?: SymbolsSumAggregateInputType
  _min?: SymbolsMinAggregateInputType
  _max?: SymbolsMaxAggregateInputType
}

export type SymbolsGroupByOutputType = {
  id: number
  symbol_name: string
  description: string | null
  symbol_type: string | null
  group_name: string | null
  digits: number | null
  spread: number | null
  contract_size: number | null
  profit_mode: string | null
  enable: boolean | null
  swap_mode: string | null
  swap_long: number | null
  swap_short: number | null
  swap3_day: string | null
  created_at: Date | null
  updated_at: Date | null
  _count: SymbolsCountAggregateOutputType | null
  _avg: SymbolsAvgAggregateOutputType | null
  _sum: SymbolsSumAggregateOutputType | null
  _min: SymbolsMinAggregateOutputType | null
  _max: SymbolsMaxAggregateOutputType | null
}

type GetSymbolsGroupByPayload<T extends symbolsGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<SymbolsGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof SymbolsGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], SymbolsGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], SymbolsGroupByOutputType[P]>
      }
    >
  >



export type symbolsWhereInput = {
  AND?: Prisma.symbolsWhereInput | Prisma.symbolsWhereInput[]
  OR?: Prisma.symbolsWhereInput[]
  NOT?: Prisma.symbolsWhereInput | Prisma.symbolsWhereInput[]
  id?: Prisma.IntFilter<"symbols"> | number
  symbol_name?: Prisma.StringFilter<"symbols"> | string
  description?: Prisma.StringNullableFilter<"symbols"> | string | null
  symbol_type?: Prisma.StringNullableFilter<"symbols"> | string | null
  group_name?: Prisma.StringNullableFilter<"symbols"> | string | null
  digits?: Prisma.IntNullableFilter<"symbols"> | number | null
  spread?: Prisma.FloatNullableFilter<"symbols"> | number | null
  contract_size?: Prisma.IntNullableFilter<"symbols"> | number | null
  profit_mode?: Prisma.StringNullableFilter<"symbols"> | string | null
  enable?: Prisma.BoolNullableFilter<"symbols"> | boolean | null
  swap_mode?: Prisma.StringNullableFilter<"symbols"> | string | null
  swap_long?: Prisma.FloatNullableFilter<"symbols"> | number | null
  swap_short?: Prisma.FloatNullableFilter<"symbols"> | number | null
  swap3_day?: Prisma.StringNullableFilter<"symbols"> | string | null
  created_at?: Prisma.DateTimeNullableFilter<"symbols"> | Date | string | null
  updated_at?: Prisma.DateTimeNullableFilter<"symbols"> | Date | string | null
}

export type symbolsOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  symbol_name?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  symbol_type?: Prisma.SortOrderInput | Prisma.SortOrder
  group_name?: Prisma.SortOrderInput | Prisma.SortOrder
  digits?: Prisma.SortOrderInput | Prisma.SortOrder
  spread?: Prisma.SortOrderInput | Prisma.SortOrder
  contract_size?: Prisma.SortOrderInput | Prisma.SortOrder
  profit_mode?: Prisma.SortOrderInput | Prisma.SortOrder
  enable?: Prisma.SortOrderInput | Prisma.SortOrder
  swap_mode?: Prisma.SortOrderInput | Prisma.SortOrder
  swap_long?: Prisma.SortOrderInput | Prisma.SortOrder
  swap_short?: Prisma.SortOrderInput | Prisma.SortOrder
  swap3_day?: Prisma.SortOrderInput | Prisma.SortOrder
  created_at?: Prisma.SortOrderInput | Prisma.SortOrder
  updated_at?: Prisma.SortOrderInput | Prisma.SortOrder
}

export type symbolsWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  symbol_name?: string
  AND?: Prisma.symbolsWhereInput | Prisma.symbolsWhereInput[]
  OR?: Prisma.symbolsWhereInput[]
  NOT?: Prisma.symbolsWhereInput | Prisma.symbolsWhereInput[]
  description?: Prisma.StringNullableFilter<"symbols"> | string | null
  symbol_type?: Prisma.StringNullableFilter<"symbols"> | string | null
  group_name?: Prisma.StringNullableFilter<"symbols"> | string | null
  digits?: Prisma.IntNullableFilter<"symbols"> | number | null
  spread?: Prisma.FloatNullableFilter<"symbols"> | number | null
  contract_size?: Prisma.IntNullableFilter<"symbols"> | number | null
  profit_mode?: Prisma.StringNullableFilter<"symbols"> | string | null
  enable?: Prisma.BoolNullableFilter<"symbols"> | boolean | null
  swap_mode?: Prisma.StringNullableFilter<"symbols"> | string | null
  swap_long?: Prisma.FloatNullableFilter<"symbols"> | number | null
  swap_short?: Prisma.FloatNullableFilter<"symbols"> | number | null
  swap3_day?: Prisma.StringNullableFilter<"symbols"> | string | null
  created_at?: Prisma.DateTimeNullableFilter<"symbols"> | Date | string | null
  updated_at?: Prisma.DateTimeNullableFilter<"symbols"> | Date | string | null
}, "id" | "symbol_name">

export type symbolsOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  symbol_name?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  symbol_type?: Prisma.SortOrderInput | Prisma.SortOrder
  group_name?: Prisma.SortOrderInput | Prisma.SortOrder
  digits?: Prisma.SortOrderInput | Prisma.SortOrder
  spread?: Prisma.SortOrderInput | Prisma.SortOrder
  contract_size?: Prisma.SortOrderInput | Prisma.SortOrder
  profit_mode?: Prisma.SortOrderInput | Prisma.SortOrder
  enable?: Prisma.SortOrderInput | Prisma.SortOrder
  swap_mode?: Prisma.SortOrderInput | Prisma.SortOrder
  swap_long?: Prisma.SortOrderInput | Prisma.SortOrder
  swap_short?: Prisma.SortOrderInput | Prisma.SortOrder
  swap3_day?: Prisma.SortOrderInput | Prisma.SortOrder
  created_at?: Prisma.SortOrderInput | Prisma.SortOrder
  updated_at?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.symbolsCountOrderByAggregateInput
  _avg?: Prisma.symbolsAvgOrderByAggregateInput
  _max?: Prisma.symbolsMaxOrderByAggregateInput
  _min?: Prisma.symbolsMinOrderByAggregateInput
  _sum?: Prisma.symbolsSumOrderByAggregateInput
}

export type symbolsScalarWhereWithAggregatesInput = {
  AND?: Prisma.symbolsScalarWhereWithAggregatesInput | Prisma.symbolsScalarWhereWithAggregatesInput[]
  OR?: Prisma.symbolsScalarWhereWithAggregatesInput[]
  NOT?: Prisma.symbolsScalarWhereWithAggregatesInput | Prisma.symbolsScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"symbols"> | number
  symbol_name?: Prisma.StringWithAggregatesFilter<"symbols"> | string
  description?: Prisma.StringNullableWithAggregatesFilter<"symbols"> | string | null
  symbol_type?: Prisma.StringNullableWithAggregatesFilter<"symbols"> | string | null
  group_name?: Prisma.StringNullableWithAggregatesFilter<"symbols"> | string | null
  digits?: Prisma.IntNullableWithAggregatesFilter<"symbols"> | number | null
  spread?: Prisma.FloatNullableWithAggregatesFilter<"symbols"> | number | null
  contract_size?: Prisma.IntNullableWithAggregatesFilter<"symbols"> | number | null
  profit_mode?: Prisma.StringNullableWithAggregatesFilter<"symbols"> | string | null
  enable?: Prisma.BoolNullableWithAggregatesFilter<"symbols"> | boolean | null
  swap_mode?: Prisma.StringNullableWithAggregatesFilter<"symbols"> | string | null
  swap_long?: Prisma.FloatNullableWithAggregatesFilter<"symbols"> | number | null
  swap_short?: Prisma.FloatNullableWithAggregatesFilter<"symbols"> | number | null
  swap3_day?: Prisma.StringNullableWithAggregatesFilter<"symbols"> | string | null
  created_at?: Prisma.DateTimeNullableWithAggregatesFilter<"symbols"> | Date | string | null
  updated_at?: Prisma.DateTimeNullableWithAggregatesFilter<"symbols"> | Date | string | null
}

export type symbolsCreateInput = {
  symbol_name: string
  description?: string | null
  symbol_type?: string | null
  group_name?: string | null
  digits?: number | null
  spread?: number | null
  contract_size?: number | null
  profit_mode?: string | null
  enable?: boolean | null
  swap_mode?: string | null
  swap_long?: number | null
  swap_short?: number | null
  swap3_day?: string | null
  created_at?: Date | string | null
  updated_at?: Date | string | null
}

export type symbolsUncheckedCreateInput = {
  id?: number
  symbol_name: string
  description?: string | null
  symbol_type?: string | null
  group_name?: string | null
  digits?: number | null
  spread?: number | null
  contract_size?: number | null
  profit_mode?: string | null
  enable?: boolean | null
  swap_mode?: string | null
  swap_long?: number | null
  swap_short?: number | null
  swap3_day?: string | null
  created_at?: Date | string | null
  updated_at?: Date | string | null
}

export type symbolsUpdateInput = {
  symbol_name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  symbol_type?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  group_name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  digits?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  spread?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  contract_size?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  profit_mode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  enable?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  swap_mode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  swap_long?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  swap_short?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  swap3_day?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type symbolsUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  symbol_name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  symbol_type?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  group_name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  digits?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  spread?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  contract_size?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  profit_mode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  enable?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  swap_mode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  swap_long?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  swap_short?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  swap3_day?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type symbolsCreateManyInput = {
  id?: number
  symbol_name: string
  description?: string | null
  symbol_type?: string | null
  group_name?: string | null
  digits?: number | null
  spread?: number | null
  contract_size?: number | null
  profit_mode?: string | null
  enable?: boolean | null
  swap_mode?: string | null
  swap_long?: number | null
  swap_short?: number | null
  swap3_day?: string | null
  created_at?: Date | string | null
  updated_at?: Date | string | null
}

export type symbolsUpdateManyMutationInput = {
  symbol_name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  symbol_type?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  group_name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  digits?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  spread?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  contract_size?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  profit_mode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  enable?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  swap_mode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  swap_long?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  swap_short?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  swap3_day?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type symbolsUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  symbol_name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  symbol_type?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  group_name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  digits?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  spread?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  contract_size?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  profit_mode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  enable?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  swap_mode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  swap_long?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  swap_short?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  swap3_day?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type symbolsCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  symbol_name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  symbol_type?: Prisma.SortOrder
  group_name?: Prisma.SortOrder
  digits?: Prisma.SortOrder
  spread?: Prisma.SortOrder
  contract_size?: Prisma.SortOrder
  profit_mode?: Prisma.SortOrder
  enable?: Prisma.SortOrder
  swap_mode?: Prisma.SortOrder
  swap_long?: Prisma.SortOrder
  swap_short?: Prisma.SortOrder
  swap3_day?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
}

export type symbolsAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  digits?: Prisma.SortOrder
  spread?: Prisma.SortOrder
  contract_size?: Prisma.SortOrder
  swap_long?: Prisma.SortOrder
  swap_short?: Prisma.SortOrder
}

export type symbolsMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  symbol_name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  symbol_type?: Prisma.SortOrder
  group_name?: Prisma.SortOrder
  digits?: Prisma.SortOrder
  spread?: Prisma.SortOrder
  contract_size?: Prisma.SortOrder
  profit_mode?: Prisma.SortOrder
  enable?: Prisma.SortOrder
  swap_mode?: Prisma.SortOrder
  swap_long?: Prisma.SortOrder
  swap_short?: Prisma.SortOrder
  swap3_day?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
}

export type symbolsMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  symbol_name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  symbol_type?: Prisma.SortOrder
  group_name?: Prisma.SortOrder
  digits?: Prisma.SortOrder
  spread?: Prisma.SortOrder
  contract_size?: Prisma.SortOrder
  profit_mode?: Prisma.SortOrder
  enable?: Prisma.SortOrder
  swap_mode?: Prisma.SortOrder
  swap_long?: Prisma.SortOrder
  swap_short?: Prisma.SortOrder
  swap3_day?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
}

export type symbolsSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  digits?: Prisma.SortOrder
  spread?: Prisma.SortOrder
  contract_size?: Prisma.SortOrder
  swap_long?: Prisma.SortOrder
  swap_short?: Prisma.SortOrder
}

export type NullableFloatFieldUpdateOperationsInput = {
  set?: number | null
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}



export type symbolsSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  symbol_name?: boolean
  description?: boolean
  symbol_type?: boolean
  group_name?: boolean
  digits?: boolean
  spread?: boolean
  contract_size?: boolean
  profit_mode?: boolean
  enable?: boolean
  swap_mode?: boolean
  swap_long?: boolean
  swap_short?: boolean
  swap3_day?: boolean
  created_at?: boolean
  updated_at?: boolean
}, ExtArgs["result"]["symbols"]>

export type symbolsSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  symbol_name?: boolean
  description?: boolean
  symbol_type?: boolean
  group_name?: boolean
  digits?: boolean
  spread?: boolean
  contract_size?: boolean
  profit_mode?: boolean
  enable?: boolean
  swap_mode?: boolean
  swap_long?: boolean
  swap_short?: boolean
  swap3_day?: boolean
  created_at?: boolean
  updated_at?: boolean
}, ExtArgs["result"]["symbols"]>

export type symbolsSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  symbol_name?: boolean
  description?: boolean
  symbol_type?: boolean
  group_name?: boolean
  digits?: boolean
  spread?: boolean
  contract_size?: boolean
  profit_mode?: boolean
  enable?: boolean
  swap_mode?: boolean
  swap_long?: boolean
  swap_short?: boolean
  swap3_day?: boolean
  created_at?: boolean
  updated_at?: boolean
}, ExtArgs["result"]["symbols"]>

export type symbolsSelectScalar = {
  id?: boolean
  symbol_name?: boolean
  description?: boolean
  symbol_type?: boolean
  group_name?: boolean
  digits?: boolean
  spread?: boolean
  contract_size?: boolean
  profit_mode?: boolean
  enable?: boolean
  swap_mode?: boolean
  swap_long?: boolean
  swap_short?: boolean
  swap3_day?: boolean
  created_at?: boolean
  updated_at?: boolean
}

export type symbolsOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "symbol_name" | "description" | "symbol_type" | "group_name" | "digits" | "spread" | "contract_size" | "profit_mode" | "enable" | "swap_mode" | "swap_long" | "swap_short" | "swap3_day" | "created_at" | "updated_at", ExtArgs["result"]["symbols"]>

export type $symbolsPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "symbols"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    symbol_name: string
    description: string | null
    symbol_type: string | null
    group_name: string | null
    digits: number | null
    spread: number | null
    contract_size: number | null
    profit_mode: string | null
    enable: boolean | null
    swap_mode: string | null
    swap_long: number | null
    swap_short: number | null
    swap3_day: string | null
    created_at: Date | null
    updated_at: Date | null
  }, ExtArgs["result"]["symbols"]>
  composites: {}
}

export type symbolsGetPayload<S extends boolean | null | undefined | symbolsDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$symbolsPayload, S>

export type symbolsCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<symbolsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: SymbolsCountAggregateInputType | true
  }

export interface symbolsDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['symbols'], meta: { name: 'symbols' } }
  /**
   * Find zero or one Symbols that matches the filter.
   * @param {symbolsFindUniqueArgs} args - Arguments to find a Symbols
   * @example
   * // Get one Symbols
   * const symbols = await prisma.symbols.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends symbolsFindUniqueArgs>(args: Prisma.SelectSubset<T, symbolsFindUniqueArgs<ExtArgs>>): Prisma.Prisma__symbolsClient<runtime.Types.Result.GetResult<Prisma.$symbolsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Symbols that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {symbolsFindUniqueOrThrowArgs} args - Arguments to find a Symbols
   * @example
   * // Get one Symbols
   * const symbols = await prisma.symbols.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends symbolsFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, symbolsFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__symbolsClient<runtime.Types.Result.GetResult<Prisma.$symbolsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Symbols that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {symbolsFindFirstArgs} args - Arguments to find a Symbols
   * @example
   * // Get one Symbols
   * const symbols = await prisma.symbols.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends symbolsFindFirstArgs>(args?: Prisma.SelectSubset<T, symbolsFindFirstArgs<ExtArgs>>): Prisma.Prisma__symbolsClient<runtime.Types.Result.GetResult<Prisma.$symbolsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Symbols that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {symbolsFindFirstOrThrowArgs} args - Arguments to find a Symbols
   * @example
   * // Get one Symbols
   * const symbols = await prisma.symbols.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends symbolsFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, symbolsFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__symbolsClient<runtime.Types.Result.GetResult<Prisma.$symbolsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Symbols that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {symbolsFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Symbols
   * const symbols = await prisma.symbols.findMany()
   * 
   * // Get first 10 Symbols
   * const symbols = await prisma.symbols.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const symbolsWithIdOnly = await prisma.symbols.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends symbolsFindManyArgs>(args?: Prisma.SelectSubset<T, symbolsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$symbolsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Symbols.
   * @param {symbolsCreateArgs} args - Arguments to create a Symbols.
   * @example
   * // Create one Symbols
   * const Symbols = await prisma.symbols.create({
   *   data: {
   *     // ... data to create a Symbols
   *   }
   * })
   * 
   */
  create<T extends symbolsCreateArgs>(args: Prisma.SelectSubset<T, symbolsCreateArgs<ExtArgs>>): Prisma.Prisma__symbolsClient<runtime.Types.Result.GetResult<Prisma.$symbolsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Symbols.
   * @param {symbolsCreateManyArgs} args - Arguments to create many Symbols.
   * @example
   * // Create many Symbols
   * const symbols = await prisma.symbols.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends symbolsCreateManyArgs>(args?: Prisma.SelectSubset<T, symbolsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Symbols and returns the data saved in the database.
   * @param {symbolsCreateManyAndReturnArgs} args - Arguments to create many Symbols.
   * @example
   * // Create many Symbols
   * const symbols = await prisma.symbols.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Symbols and only return the `id`
   * const symbolsWithIdOnly = await prisma.symbols.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends symbolsCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, symbolsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$symbolsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Symbols.
   * @param {symbolsDeleteArgs} args - Arguments to delete one Symbols.
   * @example
   * // Delete one Symbols
   * const Symbols = await prisma.symbols.delete({
   *   where: {
   *     // ... filter to delete one Symbols
   *   }
   * })
   * 
   */
  delete<T extends symbolsDeleteArgs>(args: Prisma.SelectSubset<T, symbolsDeleteArgs<ExtArgs>>): Prisma.Prisma__symbolsClient<runtime.Types.Result.GetResult<Prisma.$symbolsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Symbols.
   * @param {symbolsUpdateArgs} args - Arguments to update one Symbols.
   * @example
   * // Update one Symbols
   * const symbols = await prisma.symbols.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends symbolsUpdateArgs>(args: Prisma.SelectSubset<T, symbolsUpdateArgs<ExtArgs>>): Prisma.Prisma__symbolsClient<runtime.Types.Result.GetResult<Prisma.$symbolsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Symbols.
   * @param {symbolsDeleteManyArgs} args - Arguments to filter Symbols to delete.
   * @example
   * // Delete a few Symbols
   * const { count } = await prisma.symbols.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends symbolsDeleteManyArgs>(args?: Prisma.SelectSubset<T, symbolsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Symbols.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {symbolsUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Symbols
   * const symbols = await prisma.symbols.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends symbolsUpdateManyArgs>(args: Prisma.SelectSubset<T, symbolsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Symbols and returns the data updated in the database.
   * @param {symbolsUpdateManyAndReturnArgs} args - Arguments to update many Symbols.
   * @example
   * // Update many Symbols
   * const symbols = await prisma.symbols.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Symbols and only return the `id`
   * const symbolsWithIdOnly = await prisma.symbols.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends symbolsUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, symbolsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$symbolsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Symbols.
   * @param {symbolsUpsertArgs} args - Arguments to update or create a Symbols.
   * @example
   * // Update or create a Symbols
   * const symbols = await prisma.symbols.upsert({
   *   create: {
   *     // ... data to create a Symbols
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Symbols we want to update
   *   }
   * })
   */
  upsert<T extends symbolsUpsertArgs>(args: Prisma.SelectSubset<T, symbolsUpsertArgs<ExtArgs>>): Prisma.Prisma__symbolsClient<runtime.Types.Result.GetResult<Prisma.$symbolsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Symbols.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {symbolsCountArgs} args - Arguments to filter Symbols to count.
   * @example
   * // Count the number of Symbols
   * const count = await prisma.symbols.count({
   *   where: {
   *     // ... the filter for the Symbols we want to count
   *   }
   * })
  **/
  count<T extends symbolsCountArgs>(
    args?: Prisma.Subset<T, symbolsCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], SymbolsCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Symbols.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SymbolsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends SymbolsAggregateArgs>(args: Prisma.Subset<T, SymbolsAggregateArgs>): Prisma.PrismaPromise<GetSymbolsAggregateType<T>>

  /**
   * Group by Symbols.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {symbolsGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends symbolsGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: symbolsGroupByArgs['orderBy'] }
      : { orderBy?: symbolsGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, symbolsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSymbolsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the symbols model
 */
readonly fields: symbolsFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for symbols.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__symbolsClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the symbols model
 */
export interface symbolsFieldRefs {
  readonly id: Prisma.FieldRef<"symbols", 'Int'>
  readonly symbol_name: Prisma.FieldRef<"symbols", 'String'>
  readonly description: Prisma.FieldRef<"symbols", 'String'>
  readonly symbol_type: Prisma.FieldRef<"symbols", 'String'>
  readonly group_name: Prisma.FieldRef<"symbols", 'String'>
  readonly digits: Prisma.FieldRef<"symbols", 'Int'>
  readonly spread: Prisma.FieldRef<"symbols", 'Float'>
  readonly contract_size: Prisma.FieldRef<"symbols", 'Int'>
  readonly profit_mode: Prisma.FieldRef<"symbols", 'String'>
  readonly enable: Prisma.FieldRef<"symbols", 'Boolean'>
  readonly swap_mode: Prisma.FieldRef<"symbols", 'String'>
  readonly swap_long: Prisma.FieldRef<"symbols", 'Float'>
  readonly swap_short: Prisma.FieldRef<"symbols", 'Float'>
  readonly swap3_day: Prisma.FieldRef<"symbols", 'String'>
  readonly created_at: Prisma.FieldRef<"symbols", 'DateTime'>
  readonly updated_at: Prisma.FieldRef<"symbols", 'DateTime'>
}
    

// Custom InputTypes
/**
 * symbols findUnique
 */
export type symbolsFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the symbols
   */
  select?: Prisma.symbolsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the symbols
   */
  omit?: Prisma.symbolsOmit<ExtArgs> | null
  /**
   * Filter, which symbols to fetch.
   */
  where: Prisma.symbolsWhereUniqueInput
}

/**
 * symbols findUniqueOrThrow
 */
export type symbolsFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the symbols
   */
  select?: Prisma.symbolsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the symbols
   */
  omit?: Prisma.symbolsOmit<ExtArgs> | null
  /**
   * Filter, which symbols to fetch.
   */
  where: Prisma.symbolsWhereUniqueInput
}

/**
 * symbols findFirst
 */
export type symbolsFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the symbols
   */
  select?: Prisma.symbolsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the symbols
   */
  omit?: Prisma.symbolsOmit<ExtArgs> | null
  /**
   * Filter, which symbols to fetch.
   */
  where?: Prisma.symbolsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of symbols to fetch.
   */
  orderBy?: Prisma.symbolsOrderByWithRelationInput | Prisma.symbolsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for symbols.
   */
  cursor?: Prisma.symbolsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` symbols from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` symbols.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of symbols.
   */
  distinct?: Prisma.SymbolsScalarFieldEnum | Prisma.SymbolsScalarFieldEnum[]
}

/**
 * symbols findFirstOrThrow
 */
export type symbolsFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the symbols
   */
  select?: Prisma.symbolsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the symbols
   */
  omit?: Prisma.symbolsOmit<ExtArgs> | null
  /**
   * Filter, which symbols to fetch.
   */
  where?: Prisma.symbolsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of symbols to fetch.
   */
  orderBy?: Prisma.symbolsOrderByWithRelationInput | Prisma.symbolsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for symbols.
   */
  cursor?: Prisma.symbolsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` symbols from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` symbols.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of symbols.
   */
  distinct?: Prisma.SymbolsScalarFieldEnum | Prisma.SymbolsScalarFieldEnum[]
}

/**
 * symbols findMany
 */
export type symbolsFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the symbols
   */
  select?: Prisma.symbolsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the symbols
   */
  omit?: Prisma.symbolsOmit<ExtArgs> | null
  /**
   * Filter, which symbols to fetch.
   */
  where?: Prisma.symbolsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of symbols to fetch.
   */
  orderBy?: Prisma.symbolsOrderByWithRelationInput | Prisma.symbolsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing symbols.
   */
  cursor?: Prisma.symbolsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` symbols from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` symbols.
   */
  skip?: number
  distinct?: Prisma.SymbolsScalarFieldEnum | Prisma.SymbolsScalarFieldEnum[]
}

/**
 * symbols create
 */
export type symbolsCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the symbols
   */
  select?: Prisma.symbolsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the symbols
   */
  omit?: Prisma.symbolsOmit<ExtArgs> | null
  /**
   * The data needed to create a symbols.
   */
  data: Prisma.XOR<Prisma.symbolsCreateInput, Prisma.symbolsUncheckedCreateInput>
}

/**
 * symbols createMany
 */
export type symbolsCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many symbols.
   */
  data: Prisma.symbolsCreateManyInput | Prisma.symbolsCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * symbols createManyAndReturn
 */
export type symbolsCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the symbols
   */
  select?: Prisma.symbolsSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the symbols
   */
  omit?: Prisma.symbolsOmit<ExtArgs> | null
  /**
   * The data used to create many symbols.
   */
  data: Prisma.symbolsCreateManyInput | Prisma.symbolsCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * symbols update
 */
export type symbolsUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the symbols
   */
  select?: Prisma.symbolsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the symbols
   */
  omit?: Prisma.symbolsOmit<ExtArgs> | null
  /**
   * The data needed to update a symbols.
   */
  data: Prisma.XOR<Prisma.symbolsUpdateInput, Prisma.symbolsUncheckedUpdateInput>
  /**
   * Choose, which symbols to update.
   */
  where: Prisma.symbolsWhereUniqueInput
}

/**
 * symbols updateMany
 */
export type symbolsUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update symbols.
   */
  data: Prisma.XOR<Prisma.symbolsUpdateManyMutationInput, Prisma.symbolsUncheckedUpdateManyInput>
  /**
   * Filter which symbols to update
   */
  where?: Prisma.symbolsWhereInput
  /**
   * Limit how many symbols to update.
   */
  limit?: number
}

/**
 * symbols updateManyAndReturn
 */
export type symbolsUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the symbols
   */
  select?: Prisma.symbolsSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the symbols
   */
  omit?: Prisma.symbolsOmit<ExtArgs> | null
  /**
   * The data used to update symbols.
   */
  data: Prisma.XOR<Prisma.symbolsUpdateManyMutationInput, Prisma.symbolsUncheckedUpdateManyInput>
  /**
   * Filter which symbols to update
   */
  where?: Prisma.symbolsWhereInput
  /**
   * Limit how many symbols to update.
   */
  limit?: number
}

/**
 * symbols upsert
 */
export type symbolsUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the symbols
   */
  select?: Prisma.symbolsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the symbols
   */
  omit?: Prisma.symbolsOmit<ExtArgs> | null
  /**
   * The filter to search for the symbols to update in case it exists.
   */
  where: Prisma.symbolsWhereUniqueInput
  /**
   * In case the symbols found by the `where` argument doesn't exist, create a new symbols with this data.
   */
  create: Prisma.XOR<Prisma.symbolsCreateInput, Prisma.symbolsUncheckedCreateInput>
  /**
   * In case the symbols was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.symbolsUpdateInput, Prisma.symbolsUncheckedUpdateInput>
}

/**
 * symbols delete
 */
export type symbolsDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the symbols
   */
  select?: Prisma.symbolsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the symbols
   */
  omit?: Prisma.symbolsOmit<ExtArgs> | null
  /**
   * Filter which symbols to delete.
   */
  where: Prisma.symbolsWhereUniqueInput
}

/**
 * symbols deleteMany
 */
export type symbolsDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which symbols to delete
   */
  where?: Prisma.symbolsWhereInput
  /**
   * Limit how many symbols to delete.
   */
  limit?: number
}

/**
 * symbols without action
 */
export type symbolsDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the symbols
   */
  select?: Prisma.symbolsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the symbols
   */
  omit?: Prisma.symbolsOmit<ExtArgs> | null
}
