
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `chat_messages` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model chat_messages
 * 
 */
export type chat_messagesModel = runtime.Types.Result.DefaultSelection<Prisma.$chat_messagesPayload>

export type AggregateChat_messages = {
  _count: Chat_messagesCountAggregateOutputType | null
  _avg: Chat_messagesAvgAggregateOutputType | null
  _sum: Chat_messagesSumAggregateOutputType | null
  _min: Chat_messagesMinAggregateOutputType | null
  _max: Chat_messagesMaxAggregateOutputType | null
}

export type Chat_messagesAvgAggregateOutputType = {
  id: number | null
  conversation_id: number | null
}

export type Chat_messagesSumAggregateOutputType = {
  id: number | null
  conversation_id: number | null
}

export type Chat_messagesMinAggregateOutputType = {
  id: number | null
  conversation_id: number | null
  sender_id: string | null
  sender_name: string | null
  sender_type: string | null
  message_type: string | null
  content: string | null
  is_read: boolean | null
  read_at: Date | null
  created_at: Date | null
  updated_at: Date | null
}

export type Chat_messagesMaxAggregateOutputType = {
  id: number | null
  conversation_id: number | null
  sender_id: string | null
  sender_name: string | null
  sender_type: string | null
  message_type: string | null
  content: string | null
  is_read: boolean | null
  read_at: Date | null
  created_at: Date | null
  updated_at: Date | null
}

export type Chat_messagesCountAggregateOutputType = {
  id: number
  conversation_id: number
  sender_id: number
  sender_name: number
  sender_type: number
  message_type: number
  content: number
  metadata: number
  is_read: number
  read_at: number
  created_at: number
  updated_at: number
  _all: number
}


export type Chat_messagesAvgAggregateInputType = {
  id?: true
  conversation_id?: true
}

export type Chat_messagesSumAggregateInputType = {
  id?: true
  conversation_id?: true
}

export type Chat_messagesMinAggregateInputType = {
  id?: true
  conversation_id?: true
  sender_id?: true
  sender_name?: true
  sender_type?: true
  message_type?: true
  content?: true
  is_read?: true
  read_at?: true
  created_at?: true
  updated_at?: true
}

export type Chat_messagesMaxAggregateInputType = {
  id?: true
  conversation_id?: true
  sender_id?: true
  sender_name?: true
  sender_type?: true
  message_type?: true
  content?: true
  is_read?: true
  read_at?: true
  created_at?: true
  updated_at?: true
}

export type Chat_messagesCountAggregateInputType = {
  id?: true
  conversation_id?: true
  sender_id?: true
  sender_name?: true
  sender_type?: true
  message_type?: true
  content?: true
  metadata?: true
  is_read?: true
  read_at?: true
  created_at?: true
  updated_at?: true
  _all?: true
}

export type Chat_messagesAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which chat_messages to aggregate.
   */
  where?: Prisma.chat_messagesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of chat_messages to fetch.
   */
  orderBy?: Prisma.chat_messagesOrderByWithRelationInput | Prisma.chat_messagesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.chat_messagesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` chat_messages from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` chat_messages.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned chat_messages
  **/
  _count?: true | Chat_messagesCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: Chat_messagesAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: Chat_messagesSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: Chat_messagesMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: Chat_messagesMaxAggregateInputType
}

export type GetChat_messagesAggregateType<T extends Chat_messagesAggregateArgs> = {
      [P in keyof T & keyof AggregateChat_messages]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateChat_messages[P]>
    : Prisma.GetScalarType<T[P], AggregateChat_messages[P]>
}




export type chat_messagesGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.chat_messagesWhereInput
  orderBy?: Prisma.chat_messagesOrderByWithAggregationInput | Prisma.chat_messagesOrderByWithAggregationInput[]
  by: Prisma.Chat_messagesScalarFieldEnum[] | Prisma.Chat_messagesScalarFieldEnum
  having?: Prisma.chat_messagesScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: Chat_messagesCountAggregateInputType | true
  _avg?: Chat_messagesAvgAggregateInputType
  _sum?: Chat_messagesSumAggregateInputType
  _min?: Chat_messagesMinAggregateInputType
  _max?: Chat_messagesMaxAggregateInputType
}

export type Chat_messagesGroupByOutputType = {
  id: number
  conversation_id: number | null
  sender_id: string
  sender_name: string
  sender_type: string
  message_type: string | null
  content: string
  metadata: runtime.JsonValue | null
  is_read: boolean | null
  read_at: Date | null
  created_at: Date | null
  updated_at: Date | null
  _count: Chat_messagesCountAggregateOutputType | null
  _avg: Chat_messagesAvgAggregateOutputType | null
  _sum: Chat_messagesSumAggregateOutputType | null
  _min: Chat_messagesMinAggregateOutputType | null
  _max: Chat_messagesMaxAggregateOutputType | null
}

type GetChat_messagesGroupByPayload<T extends chat_messagesGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<Chat_messagesGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof Chat_messagesGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], Chat_messagesGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], Chat_messagesGroupByOutputType[P]>
      }
    >
  >



export type chat_messagesWhereInput = {
  AND?: Prisma.chat_messagesWhereInput | Prisma.chat_messagesWhereInput[]
  OR?: Prisma.chat_messagesWhereInput[]
  NOT?: Prisma.chat_messagesWhereInput | Prisma.chat_messagesWhereInput[]
  id?: Prisma.IntFilter<"chat_messages"> | number
  conversation_id?: Prisma.IntNullableFilter<"chat_messages"> | number | null
  sender_id?: Prisma.StringFilter<"chat_messages"> | string
  sender_name?: Prisma.StringFilter<"chat_messages"> | string
  sender_type?: Prisma.StringFilter<"chat_messages"> | string
  message_type?: Prisma.StringNullableFilter<"chat_messages"> | string | null
  content?: Prisma.StringFilter<"chat_messages"> | string
  metadata?: Prisma.JsonNullableFilter<"chat_messages">
  is_read?: Prisma.BoolNullableFilter<"chat_messages"> | boolean | null
  read_at?: Prisma.DateTimeNullableFilter<"chat_messages"> | Date | string | null
  created_at?: Prisma.DateTimeNullableFilter<"chat_messages"> | Date | string | null
  updated_at?: Prisma.DateTimeNullableFilter<"chat_messages"> | Date | string | null
  chat_conversations?: Prisma.XOR<Prisma.Chat_conversationsNullableScalarRelationFilter, Prisma.chat_conversationsWhereInput> | null
}

export type chat_messagesOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  conversation_id?: Prisma.SortOrderInput | Prisma.SortOrder
  sender_id?: Prisma.SortOrder
  sender_name?: Prisma.SortOrder
  sender_type?: Prisma.SortOrder
  message_type?: Prisma.SortOrderInput | Prisma.SortOrder
  content?: Prisma.SortOrder
  metadata?: Prisma.SortOrderInput | Prisma.SortOrder
  is_read?: Prisma.SortOrderInput | Prisma.SortOrder
  read_at?: Prisma.SortOrderInput | Prisma.SortOrder
  created_at?: Prisma.SortOrderInput | Prisma.SortOrder
  updated_at?: Prisma.SortOrderInput | Prisma.SortOrder
  chat_conversations?: Prisma.chat_conversationsOrderByWithRelationInput
}

export type chat_messagesWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.chat_messagesWhereInput | Prisma.chat_messagesWhereInput[]
  OR?: Prisma.chat_messagesWhereInput[]
  NOT?: Prisma.chat_messagesWhereInput | Prisma.chat_messagesWhereInput[]
  conversation_id?: Prisma.IntNullableFilter<"chat_messages"> | number | null
  sender_id?: Prisma.StringFilter<"chat_messages"> | string
  sender_name?: Prisma.StringFilter<"chat_messages"> | string
  sender_type?: Prisma.StringFilter<"chat_messages"> | string
  message_type?: Prisma.StringNullableFilter<"chat_messages"> | string | null
  content?: Prisma.StringFilter<"chat_messages"> | string
  metadata?: Prisma.JsonNullableFilter<"chat_messages">
  is_read?: Prisma.BoolNullableFilter<"chat_messages"> | boolean | null
  read_at?: Prisma.DateTimeNullableFilter<"chat_messages"> | Date | string | null
  created_at?: Prisma.DateTimeNullableFilter<"chat_messages"> | Date | string | null
  updated_at?: Prisma.DateTimeNullableFilter<"chat_messages"> | Date | string | null
  chat_conversations?: Prisma.XOR<Prisma.Chat_conversationsNullableScalarRelationFilter, Prisma.chat_conversationsWhereInput> | null
}, "id">

export type chat_messagesOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  conversation_id?: Prisma.SortOrderInput | Prisma.SortOrder
  sender_id?: Prisma.SortOrder
  sender_name?: Prisma.SortOrder
  sender_type?: Prisma.SortOrder
  message_type?: Prisma.SortOrderInput | Prisma.SortOrder
  content?: Prisma.SortOrder
  metadata?: Prisma.SortOrderInput | Prisma.SortOrder
  is_read?: Prisma.SortOrderInput | Prisma.SortOrder
  read_at?: Prisma.SortOrderInput | Prisma.SortOrder
  created_at?: Prisma.SortOrderInput | Prisma.SortOrder
  updated_at?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.chat_messagesCountOrderByAggregateInput
  _avg?: Prisma.chat_messagesAvgOrderByAggregateInput
  _max?: Prisma.chat_messagesMaxOrderByAggregateInput
  _min?: Prisma.chat_messagesMinOrderByAggregateInput
  _sum?: Prisma.chat_messagesSumOrderByAggregateInput
}

export type chat_messagesScalarWhereWithAggregatesInput = {
  AND?: Prisma.chat_messagesScalarWhereWithAggregatesInput | Prisma.chat_messagesScalarWhereWithAggregatesInput[]
  OR?: Prisma.chat_messagesScalarWhereWithAggregatesInput[]
  NOT?: Prisma.chat_messagesScalarWhereWithAggregatesInput | Prisma.chat_messagesScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"chat_messages"> | number
  conversation_id?: Prisma.IntNullableWithAggregatesFilter<"chat_messages"> | number | null
  sender_id?: Prisma.StringWithAggregatesFilter<"chat_messages"> | string
  sender_name?: Prisma.StringWithAggregatesFilter<"chat_messages"> | string
  sender_type?: Prisma.StringWithAggregatesFilter<"chat_messages"> | string
  message_type?: Prisma.StringNullableWithAggregatesFilter<"chat_messages"> | string | null
  content?: Prisma.StringWithAggregatesFilter<"chat_messages"> | string
  metadata?: Prisma.JsonNullableWithAggregatesFilter<"chat_messages">
  is_read?: Prisma.BoolNullableWithAggregatesFilter<"chat_messages"> | boolean | null
  read_at?: Prisma.DateTimeNullableWithAggregatesFilter<"chat_messages"> | Date | string | null
  created_at?: Prisma.DateTimeNullableWithAggregatesFilter<"chat_messages"> | Date | string | null
  updated_at?: Prisma.DateTimeNullableWithAggregatesFilter<"chat_messages"> | Date | string | null
}

export type chat_messagesCreateInput = {
  sender_id: string
  sender_name: string
  sender_type: string
  message_type?: string | null
  content: string
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  is_read?: boolean | null
  read_at?: Date | string | null
  created_at?: Date | string | null
  updated_at?: Date | string | null
  chat_conversations?: Prisma.chat_conversationsCreateNestedOneWithoutChat_messagesInput
}

export type chat_messagesUncheckedCreateInput = {
  id?: number
  conversation_id?: number | null
  sender_id: string
  sender_name: string
  sender_type: string
  message_type?: string | null
  content: string
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  is_read?: boolean | null
  read_at?: Date | string | null
  created_at?: Date | string | null
  updated_at?: Date | string | null
}

export type chat_messagesUpdateInput = {
  sender_id?: Prisma.StringFieldUpdateOperationsInput | string
  sender_name?: Prisma.StringFieldUpdateOperationsInput | string
  sender_type?: Prisma.StringFieldUpdateOperationsInput | string
  message_type?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  content?: Prisma.StringFieldUpdateOperationsInput | string
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  is_read?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  read_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  chat_conversations?: Prisma.chat_conversationsUpdateOneWithoutChat_messagesNestedInput
}

export type chat_messagesUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  conversation_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  sender_id?: Prisma.StringFieldUpdateOperationsInput | string
  sender_name?: Prisma.StringFieldUpdateOperationsInput | string
  sender_type?: Prisma.StringFieldUpdateOperationsInput | string
  message_type?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  content?: Prisma.StringFieldUpdateOperationsInput | string
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  is_read?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  read_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type chat_messagesCreateManyInput = {
  id?: number
  conversation_id?: number | null
  sender_id: string
  sender_name: string
  sender_type: string
  message_type?: string | null
  content: string
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  is_read?: boolean | null
  read_at?: Date | string | null
  created_at?: Date | string | null
  updated_at?: Date | string | null
}

export type chat_messagesUpdateManyMutationInput = {
  sender_id?: Prisma.StringFieldUpdateOperationsInput | string
  sender_name?: Prisma.StringFieldUpdateOperationsInput | string
  sender_type?: Prisma.StringFieldUpdateOperationsInput | string
  message_type?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  content?: Prisma.StringFieldUpdateOperationsInput | string
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  is_read?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  read_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type chat_messagesUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  conversation_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  sender_id?: Prisma.StringFieldUpdateOperationsInput | string
  sender_name?: Prisma.StringFieldUpdateOperationsInput | string
  sender_type?: Prisma.StringFieldUpdateOperationsInput | string
  message_type?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  content?: Prisma.StringFieldUpdateOperationsInput | string
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  is_read?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  read_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type Chat_messagesListRelationFilter = {
  every?: Prisma.chat_messagesWhereInput
  some?: Prisma.chat_messagesWhereInput
  none?: Prisma.chat_messagesWhereInput
}

export type chat_messagesOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type chat_messagesCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  conversation_id?: Prisma.SortOrder
  sender_id?: Prisma.SortOrder
  sender_name?: Prisma.SortOrder
  sender_type?: Prisma.SortOrder
  message_type?: Prisma.SortOrder
  content?: Prisma.SortOrder
  metadata?: Prisma.SortOrder
  is_read?: Prisma.SortOrder
  read_at?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
}

export type chat_messagesAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  conversation_id?: Prisma.SortOrder
}

export type chat_messagesMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  conversation_id?: Prisma.SortOrder
  sender_id?: Prisma.SortOrder
  sender_name?: Prisma.SortOrder
  sender_type?: Prisma.SortOrder
  message_type?: Prisma.SortOrder
  content?: Prisma.SortOrder
  is_read?: Prisma.SortOrder
  read_at?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
}

export type chat_messagesMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  conversation_id?: Prisma.SortOrder
  sender_id?: Prisma.SortOrder
  sender_name?: Prisma.SortOrder
  sender_type?: Prisma.SortOrder
  message_type?: Prisma.SortOrder
  content?: Prisma.SortOrder
  is_read?: Prisma.SortOrder
  read_at?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
}

export type chat_messagesSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  conversation_id?: Prisma.SortOrder
}

export type chat_messagesCreateNestedManyWithoutChat_conversationsInput = {
  create?: Prisma.XOR<Prisma.chat_messagesCreateWithoutChat_conversationsInput, Prisma.chat_messagesUncheckedCreateWithoutChat_conversationsInput> | Prisma.chat_messagesCreateWithoutChat_conversationsInput[] | Prisma.chat_messagesUncheckedCreateWithoutChat_conversationsInput[]
  connectOrCreate?: Prisma.chat_messagesCreateOrConnectWithoutChat_conversationsInput | Prisma.chat_messagesCreateOrConnectWithoutChat_conversationsInput[]
  createMany?: Prisma.chat_messagesCreateManyChat_conversationsInputEnvelope
  connect?: Prisma.chat_messagesWhereUniqueInput | Prisma.chat_messagesWhereUniqueInput[]
}

export type chat_messagesUncheckedCreateNestedManyWithoutChat_conversationsInput = {
  create?: Prisma.XOR<Prisma.chat_messagesCreateWithoutChat_conversationsInput, Prisma.chat_messagesUncheckedCreateWithoutChat_conversationsInput> | Prisma.chat_messagesCreateWithoutChat_conversationsInput[] | Prisma.chat_messagesUncheckedCreateWithoutChat_conversationsInput[]
  connectOrCreate?: Prisma.chat_messagesCreateOrConnectWithoutChat_conversationsInput | Prisma.chat_messagesCreateOrConnectWithoutChat_conversationsInput[]
  createMany?: Prisma.chat_messagesCreateManyChat_conversationsInputEnvelope
  connect?: Prisma.chat_messagesWhereUniqueInput | Prisma.chat_messagesWhereUniqueInput[]
}

export type chat_messagesUpdateManyWithoutChat_conversationsNestedInput = {
  create?: Prisma.XOR<Prisma.chat_messagesCreateWithoutChat_conversationsInput, Prisma.chat_messagesUncheckedCreateWithoutChat_conversationsInput> | Prisma.chat_messagesCreateWithoutChat_conversationsInput[] | Prisma.chat_messagesUncheckedCreateWithoutChat_conversationsInput[]
  connectOrCreate?: Prisma.chat_messagesCreateOrConnectWithoutChat_conversationsInput | Prisma.chat_messagesCreateOrConnectWithoutChat_conversationsInput[]
  upsert?: Prisma.chat_messagesUpsertWithWhereUniqueWithoutChat_conversationsInput | Prisma.chat_messagesUpsertWithWhereUniqueWithoutChat_conversationsInput[]
  createMany?: Prisma.chat_messagesCreateManyChat_conversationsInputEnvelope
  set?: Prisma.chat_messagesWhereUniqueInput | Prisma.chat_messagesWhereUniqueInput[]
  disconnect?: Prisma.chat_messagesWhereUniqueInput | Prisma.chat_messagesWhereUniqueInput[]
  delete?: Prisma.chat_messagesWhereUniqueInput | Prisma.chat_messagesWhereUniqueInput[]
  connect?: Prisma.chat_messagesWhereUniqueInput | Prisma.chat_messagesWhereUniqueInput[]
  update?: Prisma.chat_messagesUpdateWithWhereUniqueWithoutChat_conversationsInput | Prisma.chat_messagesUpdateWithWhereUniqueWithoutChat_conversationsInput[]
  updateMany?: Prisma.chat_messagesUpdateManyWithWhereWithoutChat_conversationsInput | Prisma.chat_messagesUpdateManyWithWhereWithoutChat_conversationsInput[]
  deleteMany?: Prisma.chat_messagesScalarWhereInput | Prisma.chat_messagesScalarWhereInput[]
}

export type chat_messagesUncheckedUpdateManyWithoutChat_conversationsNestedInput = {
  create?: Prisma.XOR<Prisma.chat_messagesCreateWithoutChat_conversationsInput, Prisma.chat_messagesUncheckedCreateWithoutChat_conversationsInput> | Prisma.chat_messagesCreateWithoutChat_conversationsInput[] | Prisma.chat_messagesUncheckedCreateWithoutChat_conversationsInput[]
  connectOrCreate?: Prisma.chat_messagesCreateOrConnectWithoutChat_conversationsInput | Prisma.chat_messagesCreateOrConnectWithoutChat_conversationsInput[]
  upsert?: Prisma.chat_messagesUpsertWithWhereUniqueWithoutChat_conversationsInput | Prisma.chat_messagesUpsertWithWhereUniqueWithoutChat_conversationsInput[]
  createMany?: Prisma.chat_messagesCreateManyChat_conversationsInputEnvelope
  set?: Prisma.chat_messagesWhereUniqueInput | Prisma.chat_messagesWhereUniqueInput[]
  disconnect?: Prisma.chat_messagesWhereUniqueInput | Prisma.chat_messagesWhereUniqueInput[]
  delete?: Prisma.chat_messagesWhereUniqueInput | Prisma.chat_messagesWhereUniqueInput[]
  connect?: Prisma.chat_messagesWhereUniqueInput | Prisma.chat_messagesWhereUniqueInput[]
  update?: Prisma.chat_messagesUpdateWithWhereUniqueWithoutChat_conversationsInput | Prisma.chat_messagesUpdateWithWhereUniqueWithoutChat_conversationsInput[]
  updateMany?: Prisma.chat_messagesUpdateManyWithWhereWithoutChat_conversationsInput | Prisma.chat_messagesUpdateManyWithWhereWithoutChat_conversationsInput[]
  deleteMany?: Prisma.chat_messagesScalarWhereInput | Prisma.chat_messagesScalarWhereInput[]
}

export type NullableBoolFieldUpdateOperationsInput = {
  set?: boolean | null
}

export type chat_messagesCreateWithoutChat_conversationsInput = {
  sender_id: string
  sender_name: string
  sender_type: string
  message_type?: string | null
  content: string
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  is_read?: boolean | null
  read_at?: Date | string | null
  created_at?: Date | string | null
  updated_at?: Date | string | null
}

export type chat_messagesUncheckedCreateWithoutChat_conversationsInput = {
  id?: number
  sender_id: string
  sender_name: string
  sender_type: string
  message_type?: string | null
  content: string
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  is_read?: boolean | null
  read_at?: Date | string | null
  created_at?: Date | string | null
  updated_at?: Date | string | null
}

export type chat_messagesCreateOrConnectWithoutChat_conversationsInput = {
  where: Prisma.chat_messagesWhereUniqueInput
  create: Prisma.XOR<Prisma.chat_messagesCreateWithoutChat_conversationsInput, Prisma.chat_messagesUncheckedCreateWithoutChat_conversationsInput>
}

export type chat_messagesCreateManyChat_conversationsInputEnvelope = {
  data: Prisma.chat_messagesCreateManyChat_conversationsInput | Prisma.chat_messagesCreateManyChat_conversationsInput[]
  skipDuplicates?: boolean
}

export type chat_messagesUpsertWithWhereUniqueWithoutChat_conversationsInput = {
  where: Prisma.chat_messagesWhereUniqueInput
  update: Prisma.XOR<Prisma.chat_messagesUpdateWithoutChat_conversationsInput, Prisma.chat_messagesUncheckedUpdateWithoutChat_conversationsInput>
  create: Prisma.XOR<Prisma.chat_messagesCreateWithoutChat_conversationsInput, Prisma.chat_messagesUncheckedCreateWithoutChat_conversationsInput>
}

export type chat_messagesUpdateWithWhereUniqueWithoutChat_conversationsInput = {
  where: Prisma.chat_messagesWhereUniqueInput
  data: Prisma.XOR<Prisma.chat_messagesUpdateWithoutChat_conversationsInput, Prisma.chat_messagesUncheckedUpdateWithoutChat_conversationsInput>
}

export type chat_messagesUpdateManyWithWhereWithoutChat_conversationsInput = {
  where: Prisma.chat_messagesScalarWhereInput
  data: Prisma.XOR<Prisma.chat_messagesUpdateManyMutationInput, Prisma.chat_messagesUncheckedUpdateManyWithoutChat_conversationsInput>
}

export type chat_messagesScalarWhereInput = {
  AND?: Prisma.chat_messagesScalarWhereInput | Prisma.chat_messagesScalarWhereInput[]
  OR?: Prisma.chat_messagesScalarWhereInput[]
  NOT?: Prisma.chat_messagesScalarWhereInput | Prisma.chat_messagesScalarWhereInput[]
  id?: Prisma.IntFilter<"chat_messages"> | number
  conversation_id?: Prisma.IntNullableFilter<"chat_messages"> | number | null
  sender_id?: Prisma.StringFilter<"chat_messages"> | string
  sender_name?: Prisma.StringFilter<"chat_messages"> | string
  sender_type?: Prisma.StringFilter<"chat_messages"> | string
  message_type?: Prisma.StringNullableFilter<"chat_messages"> | string | null
  content?: Prisma.StringFilter<"chat_messages"> | string
  metadata?: Prisma.JsonNullableFilter<"chat_messages">
  is_read?: Prisma.BoolNullableFilter<"chat_messages"> | boolean | null
  read_at?: Prisma.DateTimeNullableFilter<"chat_messages"> | Date | string | null
  created_at?: Prisma.DateTimeNullableFilter<"chat_messages"> | Date | string | null
  updated_at?: Prisma.DateTimeNullableFilter<"chat_messages"> | Date | string | null
}

export type chat_messagesCreateManyChat_conversationsInput = {
  id?: number
  sender_id: string
  sender_name: string
  sender_type: string
  message_type?: string | null
  content: string
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  is_read?: boolean | null
  read_at?: Date | string | null
  created_at?: Date | string | null
  updated_at?: Date | string | null
}

export type chat_messagesUpdateWithoutChat_conversationsInput = {
  sender_id?: Prisma.StringFieldUpdateOperationsInput | string
  sender_name?: Prisma.StringFieldUpdateOperationsInput | string
  sender_type?: Prisma.StringFieldUpdateOperationsInput | string
  message_type?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  content?: Prisma.StringFieldUpdateOperationsInput | string
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  is_read?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  read_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type chat_messagesUncheckedUpdateWithoutChat_conversationsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  sender_id?: Prisma.StringFieldUpdateOperationsInput | string
  sender_name?: Prisma.StringFieldUpdateOperationsInput | string
  sender_type?: Prisma.StringFieldUpdateOperationsInput | string
  message_type?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  content?: Prisma.StringFieldUpdateOperationsInput | string
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  is_read?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  read_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type chat_messagesUncheckedUpdateManyWithoutChat_conversationsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  sender_id?: Prisma.StringFieldUpdateOperationsInput | string
  sender_name?: Prisma.StringFieldUpdateOperationsInput | string
  sender_type?: Prisma.StringFieldUpdateOperationsInput | string
  message_type?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  content?: Prisma.StringFieldUpdateOperationsInput | string
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  is_read?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  read_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}



export type chat_messagesSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  conversation_id?: boolean
  sender_id?: boolean
  sender_name?: boolean
  sender_type?: boolean
  message_type?: boolean
  content?: boolean
  metadata?: boolean
  is_read?: boolean
  read_at?: boolean
  created_at?: boolean
  updated_at?: boolean
  chat_conversations?: boolean | Prisma.chat_messages$chat_conversationsArgs<ExtArgs>
}, ExtArgs["result"]["chat_messages"]>

export type chat_messagesSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  conversation_id?: boolean
  sender_id?: boolean
  sender_name?: boolean
  sender_type?: boolean
  message_type?: boolean
  content?: boolean
  metadata?: boolean
  is_read?: boolean
  read_at?: boolean
  created_at?: boolean
  updated_at?: boolean
  chat_conversations?: boolean | Prisma.chat_messages$chat_conversationsArgs<ExtArgs>
}, ExtArgs["result"]["chat_messages"]>

export type chat_messagesSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  conversation_id?: boolean
  sender_id?: boolean
  sender_name?: boolean
  sender_type?: boolean
  message_type?: boolean
  content?: boolean
  metadata?: boolean
  is_read?: boolean
  read_at?: boolean
  created_at?: boolean
  updated_at?: boolean
  chat_conversations?: boolean | Prisma.chat_messages$chat_conversationsArgs<ExtArgs>
}, ExtArgs["result"]["chat_messages"]>

export type chat_messagesSelectScalar = {
  id?: boolean
  conversation_id?: boolean
  sender_id?: boolean
  sender_name?: boolean
  sender_type?: boolean
  message_type?: boolean
  content?: boolean
  metadata?: boolean
  is_read?: boolean
  read_at?: boolean
  created_at?: boolean
  updated_at?: boolean
}

export type chat_messagesOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "conversation_id" | "sender_id" | "sender_name" | "sender_type" | "message_type" | "content" | "metadata" | "is_read" | "read_at" | "created_at" | "updated_at", ExtArgs["result"]["chat_messages"]>
export type chat_messagesInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  chat_conversations?: boolean | Prisma.chat_messages$chat_conversationsArgs<ExtArgs>
}
export type chat_messagesIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  chat_conversations?: boolean | Prisma.chat_messages$chat_conversationsArgs<ExtArgs>
}
export type chat_messagesIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  chat_conversations?: boolean | Prisma.chat_messages$chat_conversationsArgs<ExtArgs>
}

export type $chat_messagesPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "chat_messages"
  objects: {
    chat_conversations: Prisma.$chat_conversationsPayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    conversation_id: number | null
    sender_id: string
    sender_name: string
    sender_type: string
    message_type: string | null
    content: string
    metadata: runtime.JsonValue | null
    is_read: boolean | null
    read_at: Date | null
    created_at: Date | null
    updated_at: Date | null
  }, ExtArgs["result"]["chat_messages"]>
  composites: {}
}

export type chat_messagesGetPayload<S extends boolean | null | undefined | chat_messagesDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$chat_messagesPayload, S>

export type chat_messagesCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<chat_messagesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: Chat_messagesCountAggregateInputType | true
  }

export interface chat_messagesDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['chat_messages'], meta: { name: 'chat_messages' } }
  /**
   * Find zero or one Chat_messages that matches the filter.
   * @param {chat_messagesFindUniqueArgs} args - Arguments to find a Chat_messages
   * @example
   * // Get one Chat_messages
   * const chat_messages = await prisma.chat_messages.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends chat_messagesFindUniqueArgs>(args: Prisma.SelectSubset<T, chat_messagesFindUniqueArgs<ExtArgs>>): Prisma.Prisma__chat_messagesClient<runtime.Types.Result.GetResult<Prisma.$chat_messagesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Chat_messages that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {chat_messagesFindUniqueOrThrowArgs} args - Arguments to find a Chat_messages
   * @example
   * // Get one Chat_messages
   * const chat_messages = await prisma.chat_messages.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends chat_messagesFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, chat_messagesFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__chat_messagesClient<runtime.Types.Result.GetResult<Prisma.$chat_messagesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Chat_messages that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {chat_messagesFindFirstArgs} args - Arguments to find a Chat_messages
   * @example
   * // Get one Chat_messages
   * const chat_messages = await prisma.chat_messages.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends chat_messagesFindFirstArgs>(args?: Prisma.SelectSubset<T, chat_messagesFindFirstArgs<ExtArgs>>): Prisma.Prisma__chat_messagesClient<runtime.Types.Result.GetResult<Prisma.$chat_messagesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Chat_messages that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {chat_messagesFindFirstOrThrowArgs} args - Arguments to find a Chat_messages
   * @example
   * // Get one Chat_messages
   * const chat_messages = await prisma.chat_messages.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends chat_messagesFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, chat_messagesFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__chat_messagesClient<runtime.Types.Result.GetResult<Prisma.$chat_messagesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Chat_messages that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {chat_messagesFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Chat_messages
   * const chat_messages = await prisma.chat_messages.findMany()
   * 
   * // Get first 10 Chat_messages
   * const chat_messages = await prisma.chat_messages.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const chat_messagesWithIdOnly = await prisma.chat_messages.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends chat_messagesFindManyArgs>(args?: Prisma.SelectSubset<T, chat_messagesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$chat_messagesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Chat_messages.
   * @param {chat_messagesCreateArgs} args - Arguments to create a Chat_messages.
   * @example
   * // Create one Chat_messages
   * const Chat_messages = await prisma.chat_messages.create({
   *   data: {
   *     // ... data to create a Chat_messages
   *   }
   * })
   * 
   */
  create<T extends chat_messagesCreateArgs>(args: Prisma.SelectSubset<T, chat_messagesCreateArgs<ExtArgs>>): Prisma.Prisma__chat_messagesClient<runtime.Types.Result.GetResult<Prisma.$chat_messagesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Chat_messages.
   * @param {chat_messagesCreateManyArgs} args - Arguments to create many Chat_messages.
   * @example
   * // Create many Chat_messages
   * const chat_messages = await prisma.chat_messages.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends chat_messagesCreateManyArgs>(args?: Prisma.SelectSubset<T, chat_messagesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Chat_messages and returns the data saved in the database.
   * @param {chat_messagesCreateManyAndReturnArgs} args - Arguments to create many Chat_messages.
   * @example
   * // Create many Chat_messages
   * const chat_messages = await prisma.chat_messages.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Chat_messages and only return the `id`
   * const chat_messagesWithIdOnly = await prisma.chat_messages.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends chat_messagesCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, chat_messagesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$chat_messagesPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Chat_messages.
   * @param {chat_messagesDeleteArgs} args - Arguments to delete one Chat_messages.
   * @example
   * // Delete one Chat_messages
   * const Chat_messages = await prisma.chat_messages.delete({
   *   where: {
   *     // ... filter to delete one Chat_messages
   *   }
   * })
   * 
   */
  delete<T extends chat_messagesDeleteArgs>(args: Prisma.SelectSubset<T, chat_messagesDeleteArgs<ExtArgs>>): Prisma.Prisma__chat_messagesClient<runtime.Types.Result.GetResult<Prisma.$chat_messagesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Chat_messages.
   * @param {chat_messagesUpdateArgs} args - Arguments to update one Chat_messages.
   * @example
   * // Update one Chat_messages
   * const chat_messages = await prisma.chat_messages.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends chat_messagesUpdateArgs>(args: Prisma.SelectSubset<T, chat_messagesUpdateArgs<ExtArgs>>): Prisma.Prisma__chat_messagesClient<runtime.Types.Result.GetResult<Prisma.$chat_messagesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Chat_messages.
   * @param {chat_messagesDeleteManyArgs} args - Arguments to filter Chat_messages to delete.
   * @example
   * // Delete a few Chat_messages
   * const { count } = await prisma.chat_messages.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends chat_messagesDeleteManyArgs>(args?: Prisma.SelectSubset<T, chat_messagesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Chat_messages.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {chat_messagesUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Chat_messages
   * const chat_messages = await prisma.chat_messages.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends chat_messagesUpdateManyArgs>(args: Prisma.SelectSubset<T, chat_messagesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Chat_messages and returns the data updated in the database.
   * @param {chat_messagesUpdateManyAndReturnArgs} args - Arguments to update many Chat_messages.
   * @example
   * // Update many Chat_messages
   * const chat_messages = await prisma.chat_messages.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Chat_messages and only return the `id`
   * const chat_messagesWithIdOnly = await prisma.chat_messages.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends chat_messagesUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, chat_messagesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$chat_messagesPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Chat_messages.
   * @param {chat_messagesUpsertArgs} args - Arguments to update or create a Chat_messages.
   * @example
   * // Update or create a Chat_messages
   * const chat_messages = await prisma.chat_messages.upsert({
   *   create: {
   *     // ... data to create a Chat_messages
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Chat_messages we want to update
   *   }
   * })
   */
  upsert<T extends chat_messagesUpsertArgs>(args: Prisma.SelectSubset<T, chat_messagesUpsertArgs<ExtArgs>>): Prisma.Prisma__chat_messagesClient<runtime.Types.Result.GetResult<Prisma.$chat_messagesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Chat_messages.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {chat_messagesCountArgs} args - Arguments to filter Chat_messages to count.
   * @example
   * // Count the number of Chat_messages
   * const count = await prisma.chat_messages.count({
   *   where: {
   *     // ... the filter for the Chat_messages we want to count
   *   }
   * })
  **/
  count<T extends chat_messagesCountArgs>(
    args?: Prisma.Subset<T, chat_messagesCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], Chat_messagesCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Chat_messages.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {Chat_messagesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends Chat_messagesAggregateArgs>(args: Prisma.Subset<T, Chat_messagesAggregateArgs>): Prisma.PrismaPromise<GetChat_messagesAggregateType<T>>

  /**
   * Group by Chat_messages.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {chat_messagesGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends chat_messagesGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: chat_messagesGroupByArgs['orderBy'] }
      : { orderBy?: chat_messagesGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, chat_messagesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChat_messagesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the chat_messages model
 */
readonly fields: chat_messagesFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for chat_messages.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__chat_messagesClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  chat_conversations<T extends Prisma.chat_messages$chat_conversationsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.chat_messages$chat_conversationsArgs<ExtArgs>>): Prisma.Prisma__chat_conversationsClient<runtime.Types.Result.GetResult<Prisma.$chat_conversationsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the chat_messages model
 */
export interface chat_messagesFieldRefs {
  readonly id: Prisma.FieldRef<"chat_messages", 'Int'>
  readonly conversation_id: Prisma.FieldRef<"chat_messages", 'Int'>
  readonly sender_id: Prisma.FieldRef<"chat_messages", 'String'>
  readonly sender_name: Prisma.FieldRef<"chat_messages", 'String'>
  readonly sender_type: Prisma.FieldRef<"chat_messages", 'String'>
  readonly message_type: Prisma.FieldRef<"chat_messages", 'String'>
  readonly content: Prisma.FieldRef<"chat_messages", 'String'>
  readonly metadata: Prisma.FieldRef<"chat_messages", 'Json'>
  readonly is_read: Prisma.FieldRef<"chat_messages", 'Boolean'>
  readonly read_at: Prisma.FieldRef<"chat_messages", 'DateTime'>
  readonly created_at: Prisma.FieldRef<"chat_messages", 'DateTime'>
  readonly updated_at: Prisma.FieldRef<"chat_messages", 'DateTime'>
}
    

// Custom InputTypes
/**
 * chat_messages findUnique
 */
export type chat_messagesFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the chat_messages
   */
  select?: Prisma.chat_messagesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the chat_messages
   */
  omit?: Prisma.chat_messagesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.chat_messagesInclude<ExtArgs> | null
  /**
   * Filter, which chat_messages to fetch.
   */
  where: Prisma.chat_messagesWhereUniqueInput
}

/**
 * chat_messages findUniqueOrThrow
 */
export type chat_messagesFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the chat_messages
   */
  select?: Prisma.chat_messagesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the chat_messages
   */
  omit?: Prisma.chat_messagesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.chat_messagesInclude<ExtArgs> | null
  /**
   * Filter, which chat_messages to fetch.
   */
  where: Prisma.chat_messagesWhereUniqueInput
}

/**
 * chat_messages findFirst
 */
export type chat_messagesFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the chat_messages
   */
  select?: Prisma.chat_messagesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the chat_messages
   */
  omit?: Prisma.chat_messagesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.chat_messagesInclude<ExtArgs> | null
  /**
   * Filter, which chat_messages to fetch.
   */
  where?: Prisma.chat_messagesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of chat_messages to fetch.
   */
  orderBy?: Prisma.chat_messagesOrderByWithRelationInput | Prisma.chat_messagesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for chat_messages.
   */
  cursor?: Prisma.chat_messagesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` chat_messages from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` chat_messages.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of chat_messages.
   */
  distinct?: Prisma.Chat_messagesScalarFieldEnum | Prisma.Chat_messagesScalarFieldEnum[]
}

/**
 * chat_messages findFirstOrThrow
 */
export type chat_messagesFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the chat_messages
   */
  select?: Prisma.chat_messagesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the chat_messages
   */
  omit?: Prisma.chat_messagesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.chat_messagesInclude<ExtArgs> | null
  /**
   * Filter, which chat_messages to fetch.
   */
  where?: Prisma.chat_messagesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of chat_messages to fetch.
   */
  orderBy?: Prisma.chat_messagesOrderByWithRelationInput | Prisma.chat_messagesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for chat_messages.
   */
  cursor?: Prisma.chat_messagesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` chat_messages from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` chat_messages.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of chat_messages.
   */
  distinct?: Prisma.Chat_messagesScalarFieldEnum | Prisma.Chat_messagesScalarFieldEnum[]
}

/**
 * chat_messages findMany
 */
export type chat_messagesFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the chat_messages
   */
  select?: Prisma.chat_messagesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the chat_messages
   */
  omit?: Prisma.chat_messagesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.chat_messagesInclude<ExtArgs> | null
  /**
   * Filter, which chat_messages to fetch.
   */
  where?: Prisma.chat_messagesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of chat_messages to fetch.
   */
  orderBy?: Prisma.chat_messagesOrderByWithRelationInput | Prisma.chat_messagesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing chat_messages.
   */
  cursor?: Prisma.chat_messagesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` chat_messages from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` chat_messages.
   */
  skip?: number
  distinct?: Prisma.Chat_messagesScalarFieldEnum | Prisma.Chat_messagesScalarFieldEnum[]
}

/**
 * chat_messages create
 */
export type chat_messagesCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the chat_messages
   */
  select?: Prisma.chat_messagesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the chat_messages
   */
  omit?: Prisma.chat_messagesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.chat_messagesInclude<ExtArgs> | null
  /**
   * The data needed to create a chat_messages.
   */
  data: Prisma.XOR<Prisma.chat_messagesCreateInput, Prisma.chat_messagesUncheckedCreateInput>
}

/**
 * chat_messages createMany
 */
export type chat_messagesCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many chat_messages.
   */
  data: Prisma.chat_messagesCreateManyInput | Prisma.chat_messagesCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * chat_messages createManyAndReturn
 */
export type chat_messagesCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the chat_messages
   */
  select?: Prisma.chat_messagesSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the chat_messages
   */
  omit?: Prisma.chat_messagesOmit<ExtArgs> | null
  /**
   * The data used to create many chat_messages.
   */
  data: Prisma.chat_messagesCreateManyInput | Prisma.chat_messagesCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.chat_messagesIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * chat_messages update
 */
export type chat_messagesUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the chat_messages
   */
  select?: Prisma.chat_messagesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the chat_messages
   */
  omit?: Prisma.chat_messagesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.chat_messagesInclude<ExtArgs> | null
  /**
   * The data needed to update a chat_messages.
   */
  data: Prisma.XOR<Prisma.chat_messagesUpdateInput, Prisma.chat_messagesUncheckedUpdateInput>
  /**
   * Choose, which chat_messages to update.
   */
  where: Prisma.chat_messagesWhereUniqueInput
}

/**
 * chat_messages updateMany
 */
export type chat_messagesUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update chat_messages.
   */
  data: Prisma.XOR<Prisma.chat_messagesUpdateManyMutationInput, Prisma.chat_messagesUncheckedUpdateManyInput>
  /**
   * Filter which chat_messages to update
   */
  where?: Prisma.chat_messagesWhereInput
  /**
   * Limit how many chat_messages to update.
   */
  limit?: number
}

/**
 * chat_messages updateManyAndReturn
 */
export type chat_messagesUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the chat_messages
   */
  select?: Prisma.chat_messagesSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the chat_messages
   */
  omit?: Prisma.chat_messagesOmit<ExtArgs> | null
  /**
   * The data used to update chat_messages.
   */
  data: Prisma.XOR<Prisma.chat_messagesUpdateManyMutationInput, Prisma.chat_messagesUncheckedUpdateManyInput>
  /**
   * Filter which chat_messages to update
   */
  where?: Prisma.chat_messagesWhereInput
  /**
   * Limit how many chat_messages to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.chat_messagesIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * chat_messages upsert
 */
export type chat_messagesUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the chat_messages
   */
  select?: Prisma.chat_messagesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the chat_messages
   */
  omit?: Prisma.chat_messagesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.chat_messagesInclude<ExtArgs> | null
  /**
   * The filter to search for the chat_messages to update in case it exists.
   */
  where: Prisma.chat_messagesWhereUniqueInput
  /**
   * In case the chat_messages found by the `where` argument doesn't exist, create a new chat_messages with this data.
   */
  create: Prisma.XOR<Prisma.chat_messagesCreateInput, Prisma.chat_messagesUncheckedCreateInput>
  /**
   * In case the chat_messages was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.chat_messagesUpdateInput, Prisma.chat_messagesUncheckedUpdateInput>
}

/**
 * chat_messages delete
 */
export type chat_messagesDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the chat_messages
   */
  select?: Prisma.chat_messagesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the chat_messages
   */
  omit?: Prisma.chat_messagesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.chat_messagesInclude<ExtArgs> | null
  /**
   * Filter which chat_messages to delete.
   */
  where: Prisma.chat_messagesWhereUniqueInput
}

/**
 * chat_messages deleteMany
 */
export type chat_messagesDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which chat_messages to delete
   */
  where?: Prisma.chat_messagesWhereInput
  /**
   * Limit how many chat_messages to delete.
   */
  limit?: number
}

/**
 * chat_messages.chat_conversations
 */
export type chat_messages$chat_conversationsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the chat_conversations
   */
  select?: Prisma.chat_conversationsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the chat_conversations
   */
  omit?: Prisma.chat_conversationsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.chat_conversationsInclude<ExtArgs> | null
  where?: Prisma.chat_conversationsWhereInput
}

/**
 * chat_messages without action
 */
export type chat_messagesDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the chat_messages
   */
  select?: Prisma.chat_messagesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the chat_messages
   */
  omit?: Prisma.chat_messagesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.chat_messagesInclude<ExtArgs> | null
}
