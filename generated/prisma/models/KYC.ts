
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `KYC` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model KYC
 * 
 */
export type KYCModel = runtime.Types.Result.DefaultSelection<Prisma.$KYCPayload>

export type AggregateKYC = {
  _count: KYCCountAggregateOutputType | null
  _min: KYCMinAggregateOutputType | null
  _max: KYCMaxAggregateOutputType | null
}

export type KYCMinAggregateOutputType = {
  id: string | null
  isDocumentVerified: boolean | null
  isAddressVerified: boolean | null
  verificationStatus: string | null
  documentReference: string | null
  addressReference: string | null
  amlReference: string | null
  documentSubmittedAt: Date | null
  addressSubmittedAt: Date | null
  rejectionReason: string | null
  createdAt: Date | null
  updatedAt: Date | null
  userId: string | null
}

export type KYCMaxAggregateOutputType = {
  id: string | null
  isDocumentVerified: boolean | null
  isAddressVerified: boolean | null
  verificationStatus: string | null
  documentReference: string | null
  addressReference: string | null
  amlReference: string | null
  documentSubmittedAt: Date | null
  addressSubmittedAt: Date | null
  rejectionReason: string | null
  createdAt: Date | null
  updatedAt: Date | null
  userId: string | null
}

export type KYCCountAggregateOutputType = {
  id: number
  isDocumentVerified: number
  isAddressVerified: number
  verificationStatus: number
  documentReference: number
  addressReference: number
  amlReference: number
  documentSubmittedAt: number
  addressSubmittedAt: number
  rejectionReason: number
  createdAt: number
  updatedAt: number
  userId: number
  _all: number
}


export type KYCMinAggregateInputType = {
  id?: true
  isDocumentVerified?: true
  isAddressVerified?: true
  verificationStatus?: true
  documentReference?: true
  addressReference?: true
  amlReference?: true
  documentSubmittedAt?: true
  addressSubmittedAt?: true
  rejectionReason?: true
  createdAt?: true
  updatedAt?: true
  userId?: true
}

export type KYCMaxAggregateInputType = {
  id?: true
  isDocumentVerified?: true
  isAddressVerified?: true
  verificationStatus?: true
  documentReference?: true
  addressReference?: true
  amlReference?: true
  documentSubmittedAt?: true
  addressSubmittedAt?: true
  rejectionReason?: true
  createdAt?: true
  updatedAt?: true
  userId?: true
}

export type KYCCountAggregateInputType = {
  id?: true
  isDocumentVerified?: true
  isAddressVerified?: true
  verificationStatus?: true
  documentReference?: true
  addressReference?: true
  amlReference?: true
  documentSubmittedAt?: true
  addressSubmittedAt?: true
  rejectionReason?: true
  createdAt?: true
  updatedAt?: true
  userId?: true
  _all?: true
}

export type KYCAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which KYC to aggregate.
   */
  where?: Prisma.KYCWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of KYCS to fetch.
   */
  orderBy?: Prisma.KYCOrderByWithRelationInput | Prisma.KYCOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.KYCWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` KYCS from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` KYCS.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned KYCS
  **/
  _count?: true | KYCCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: KYCMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: KYCMaxAggregateInputType
}

export type GetKYCAggregateType<T extends KYCAggregateArgs> = {
      [P in keyof T & keyof AggregateKYC]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateKYC[P]>
    : Prisma.GetScalarType<T[P], AggregateKYC[P]>
}




export type KYCGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.KYCWhereInput
  orderBy?: Prisma.KYCOrderByWithAggregationInput | Prisma.KYCOrderByWithAggregationInput[]
  by: Prisma.KYCScalarFieldEnum[] | Prisma.KYCScalarFieldEnum
  having?: Prisma.KYCScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: KYCCountAggregateInputType | true
  _min?: KYCMinAggregateInputType
  _max?: KYCMaxAggregateInputType
}

export type KYCGroupByOutputType = {
  id: string
  isDocumentVerified: boolean
  isAddressVerified: boolean
  verificationStatus: string
  documentReference: string | null
  addressReference: string | null
  amlReference: string | null
  documentSubmittedAt: Date | null
  addressSubmittedAt: Date | null
  rejectionReason: string | null
  createdAt: Date
  updatedAt: Date
  userId: string
  _count: KYCCountAggregateOutputType | null
  _min: KYCMinAggregateOutputType | null
  _max: KYCMaxAggregateOutputType | null
}

type GetKYCGroupByPayload<T extends KYCGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<KYCGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof KYCGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], KYCGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], KYCGroupByOutputType[P]>
      }
    >
  >



export type KYCWhereInput = {
  AND?: Prisma.KYCWhereInput | Prisma.KYCWhereInput[]
  OR?: Prisma.KYCWhereInput[]
  NOT?: Prisma.KYCWhereInput | Prisma.KYCWhereInput[]
  id?: Prisma.StringFilter<"KYC"> | string
  isDocumentVerified?: Prisma.BoolFilter<"KYC"> | boolean
  isAddressVerified?: Prisma.BoolFilter<"KYC"> | boolean
  verificationStatus?: Prisma.StringFilter<"KYC"> | string
  documentReference?: Prisma.StringNullableFilter<"KYC"> | string | null
  addressReference?: Prisma.StringNullableFilter<"KYC"> | string | null
  amlReference?: Prisma.StringNullableFilter<"KYC"> | string | null
  documentSubmittedAt?: Prisma.DateTimeNullableFilter<"KYC"> | Date | string | null
  addressSubmittedAt?: Prisma.DateTimeNullableFilter<"KYC"> | Date | string | null
  rejectionReason?: Prisma.StringNullableFilter<"KYC"> | string | null
  createdAt?: Prisma.DateTimeFilter<"KYC"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"KYC"> | Date | string
  userId?: Prisma.StringFilter<"KYC"> | string
  User?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type KYCOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  isDocumentVerified?: Prisma.SortOrder
  isAddressVerified?: Prisma.SortOrder
  verificationStatus?: Prisma.SortOrder
  documentReference?: Prisma.SortOrderInput | Prisma.SortOrder
  addressReference?: Prisma.SortOrderInput | Prisma.SortOrder
  amlReference?: Prisma.SortOrderInput | Prisma.SortOrder
  documentSubmittedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  addressSubmittedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  rejectionReason?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  User?: Prisma.UserOrderByWithRelationInput
}

export type KYCWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  userId?: string
  AND?: Prisma.KYCWhereInput | Prisma.KYCWhereInput[]
  OR?: Prisma.KYCWhereInput[]
  NOT?: Prisma.KYCWhereInput | Prisma.KYCWhereInput[]
  isDocumentVerified?: Prisma.BoolFilter<"KYC"> | boolean
  isAddressVerified?: Prisma.BoolFilter<"KYC"> | boolean
  verificationStatus?: Prisma.StringFilter<"KYC"> | string
  documentReference?: Prisma.StringNullableFilter<"KYC"> | string | null
  addressReference?: Prisma.StringNullableFilter<"KYC"> | string | null
  amlReference?: Prisma.StringNullableFilter<"KYC"> | string | null
  documentSubmittedAt?: Prisma.DateTimeNullableFilter<"KYC"> | Date | string | null
  addressSubmittedAt?: Prisma.DateTimeNullableFilter<"KYC"> | Date | string | null
  rejectionReason?: Prisma.StringNullableFilter<"KYC"> | string | null
  createdAt?: Prisma.DateTimeFilter<"KYC"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"KYC"> | Date | string
  User?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "id" | "userId">

export type KYCOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  isDocumentVerified?: Prisma.SortOrder
  isAddressVerified?: Prisma.SortOrder
  verificationStatus?: Prisma.SortOrder
  documentReference?: Prisma.SortOrderInput | Prisma.SortOrder
  addressReference?: Prisma.SortOrderInput | Prisma.SortOrder
  amlReference?: Prisma.SortOrderInput | Prisma.SortOrder
  documentSubmittedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  addressSubmittedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  rejectionReason?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  _count?: Prisma.KYCCountOrderByAggregateInput
  _max?: Prisma.KYCMaxOrderByAggregateInput
  _min?: Prisma.KYCMinOrderByAggregateInput
}

export type KYCScalarWhereWithAggregatesInput = {
  AND?: Prisma.KYCScalarWhereWithAggregatesInput | Prisma.KYCScalarWhereWithAggregatesInput[]
  OR?: Prisma.KYCScalarWhereWithAggregatesInput[]
  NOT?: Prisma.KYCScalarWhereWithAggregatesInput | Prisma.KYCScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"KYC"> | string
  isDocumentVerified?: Prisma.BoolWithAggregatesFilter<"KYC"> | boolean
  isAddressVerified?: Prisma.BoolWithAggregatesFilter<"KYC"> | boolean
  verificationStatus?: Prisma.StringWithAggregatesFilter<"KYC"> | string
  documentReference?: Prisma.StringNullableWithAggregatesFilter<"KYC"> | string | null
  addressReference?: Prisma.StringNullableWithAggregatesFilter<"KYC"> | string | null
  amlReference?: Prisma.StringNullableWithAggregatesFilter<"KYC"> | string | null
  documentSubmittedAt?: Prisma.DateTimeNullableWithAggregatesFilter<"KYC"> | Date | string | null
  addressSubmittedAt?: Prisma.DateTimeNullableWithAggregatesFilter<"KYC"> | Date | string | null
  rejectionReason?: Prisma.StringNullableWithAggregatesFilter<"KYC"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"KYC"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"KYC"> | Date | string
  userId?: Prisma.StringWithAggregatesFilter<"KYC"> | string
}

export type KYCCreateInput = {
  id: string
  isDocumentVerified?: boolean
  isAddressVerified?: boolean
  verificationStatus?: string
  documentReference?: string | null
  addressReference?: string | null
  amlReference?: string | null
  documentSubmittedAt?: Date | string | null
  addressSubmittedAt?: Date | string | null
  rejectionReason?: string | null
  createdAt?: Date | string
  updatedAt: Date | string
  User: Prisma.UserCreateNestedOneWithoutKYCInput
}

export type KYCUncheckedCreateInput = {
  id: string
  isDocumentVerified?: boolean
  isAddressVerified?: boolean
  verificationStatus?: string
  documentReference?: string | null
  addressReference?: string | null
  amlReference?: string | null
  documentSubmittedAt?: Date | string | null
  addressSubmittedAt?: Date | string | null
  rejectionReason?: string | null
  createdAt?: Date | string
  updatedAt: Date | string
  userId: string
}

export type KYCUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  isDocumentVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isAddressVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean
  verificationStatus?: Prisma.StringFieldUpdateOperationsInput | string
  documentReference?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  addressReference?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  amlReference?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  documentSubmittedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  addressSubmittedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  rejectionReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  User?: Prisma.UserUpdateOneRequiredWithoutKYCNestedInput
}

export type KYCUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  isDocumentVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isAddressVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean
  verificationStatus?: Prisma.StringFieldUpdateOperationsInput | string
  documentReference?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  addressReference?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  amlReference?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  documentSubmittedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  addressSubmittedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  rejectionReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type KYCCreateManyInput = {
  id: string
  isDocumentVerified?: boolean
  isAddressVerified?: boolean
  verificationStatus?: string
  documentReference?: string | null
  addressReference?: string | null
  amlReference?: string | null
  documentSubmittedAt?: Date | string | null
  addressSubmittedAt?: Date | string | null
  rejectionReason?: string | null
  createdAt?: Date | string
  updatedAt: Date | string
  userId: string
}

export type KYCUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  isDocumentVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isAddressVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean
  verificationStatus?: Prisma.StringFieldUpdateOperationsInput | string
  documentReference?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  addressReference?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  amlReference?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  documentSubmittedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  addressSubmittedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  rejectionReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type KYCUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  isDocumentVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isAddressVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean
  verificationStatus?: Prisma.StringFieldUpdateOperationsInput | string
  documentReference?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  addressReference?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  amlReference?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  documentSubmittedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  addressSubmittedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  rejectionReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type KYCCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  isDocumentVerified?: Prisma.SortOrder
  isAddressVerified?: Prisma.SortOrder
  verificationStatus?: Prisma.SortOrder
  documentReference?: Prisma.SortOrder
  addressReference?: Prisma.SortOrder
  amlReference?: Prisma.SortOrder
  documentSubmittedAt?: Prisma.SortOrder
  addressSubmittedAt?: Prisma.SortOrder
  rejectionReason?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  userId?: Prisma.SortOrder
}

export type KYCMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  isDocumentVerified?: Prisma.SortOrder
  isAddressVerified?: Prisma.SortOrder
  verificationStatus?: Prisma.SortOrder
  documentReference?: Prisma.SortOrder
  addressReference?: Prisma.SortOrder
  amlReference?: Prisma.SortOrder
  documentSubmittedAt?: Prisma.SortOrder
  addressSubmittedAt?: Prisma.SortOrder
  rejectionReason?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  userId?: Prisma.SortOrder
}

export type KYCMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  isDocumentVerified?: Prisma.SortOrder
  isAddressVerified?: Prisma.SortOrder
  verificationStatus?: Prisma.SortOrder
  documentReference?: Prisma.SortOrder
  addressReference?: Prisma.SortOrder
  amlReference?: Prisma.SortOrder
  documentSubmittedAt?: Prisma.SortOrder
  addressSubmittedAt?: Prisma.SortOrder
  rejectionReason?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  userId?: Prisma.SortOrder
}

export type KYCNullableScalarRelationFilter = {
  is?: Prisma.KYCWhereInput | null
  isNot?: Prisma.KYCWhereInput | null
}

export type BoolFieldUpdateOperationsInput = {
  set?: boolean
}

export type KYCCreateNestedOneWithoutUserInput = {
  create?: Prisma.XOR<Prisma.KYCCreateWithoutUserInput, Prisma.KYCUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.KYCCreateOrConnectWithoutUserInput
  connect?: Prisma.KYCWhereUniqueInput
}

export type KYCUncheckedCreateNestedOneWithoutUserInput = {
  create?: Prisma.XOR<Prisma.KYCCreateWithoutUserInput, Prisma.KYCUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.KYCCreateOrConnectWithoutUserInput
  connect?: Prisma.KYCWhereUniqueInput
}

export type KYCUpdateOneWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.KYCCreateWithoutUserInput, Prisma.KYCUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.KYCCreateOrConnectWithoutUserInput
  upsert?: Prisma.KYCUpsertWithoutUserInput
  disconnect?: Prisma.KYCWhereInput | boolean
  delete?: Prisma.KYCWhereInput | boolean
  connect?: Prisma.KYCWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.KYCUpdateToOneWithWhereWithoutUserInput, Prisma.KYCUpdateWithoutUserInput>, Prisma.KYCUncheckedUpdateWithoutUserInput>
}

export type KYCUncheckedUpdateOneWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.KYCCreateWithoutUserInput, Prisma.KYCUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.KYCCreateOrConnectWithoutUserInput
  upsert?: Prisma.KYCUpsertWithoutUserInput
  disconnect?: Prisma.KYCWhereInput | boolean
  delete?: Prisma.KYCWhereInput | boolean
  connect?: Prisma.KYCWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.KYCUpdateToOneWithWhereWithoutUserInput, Prisma.KYCUpdateWithoutUserInput>, Prisma.KYCUncheckedUpdateWithoutUserInput>
}

export type KYCCreateWithoutUserInput = {
  id: string
  isDocumentVerified?: boolean
  isAddressVerified?: boolean
  verificationStatus?: string
  documentReference?: string | null
  addressReference?: string | null
  amlReference?: string | null
  documentSubmittedAt?: Date | string | null
  addressSubmittedAt?: Date | string | null
  rejectionReason?: string | null
  createdAt?: Date | string
  updatedAt: Date | string
}

export type KYCUncheckedCreateWithoutUserInput = {
  id: string
  isDocumentVerified?: boolean
  isAddressVerified?: boolean
  verificationStatus?: string
  documentReference?: string | null
  addressReference?: string | null
  amlReference?: string | null
  documentSubmittedAt?: Date | string | null
  addressSubmittedAt?: Date | string | null
  rejectionReason?: string | null
  createdAt?: Date | string
  updatedAt: Date | string
}

export type KYCCreateOrConnectWithoutUserInput = {
  where: Prisma.KYCWhereUniqueInput
  create: Prisma.XOR<Prisma.KYCCreateWithoutUserInput, Prisma.KYCUncheckedCreateWithoutUserInput>
}

export type KYCUpsertWithoutUserInput = {
  update: Prisma.XOR<Prisma.KYCUpdateWithoutUserInput, Prisma.KYCUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.KYCCreateWithoutUserInput, Prisma.KYCUncheckedCreateWithoutUserInput>
  where?: Prisma.KYCWhereInput
}

export type KYCUpdateToOneWithWhereWithoutUserInput = {
  where?: Prisma.KYCWhereInput
  data: Prisma.XOR<Prisma.KYCUpdateWithoutUserInput, Prisma.KYCUncheckedUpdateWithoutUserInput>
}

export type KYCUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  isDocumentVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isAddressVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean
  verificationStatus?: Prisma.StringFieldUpdateOperationsInput | string
  documentReference?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  addressReference?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  amlReference?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  documentSubmittedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  addressSubmittedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  rejectionReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type KYCUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  isDocumentVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isAddressVerified?: Prisma.BoolFieldUpdateOperationsInput | boolean
  verificationStatus?: Prisma.StringFieldUpdateOperationsInput | string
  documentReference?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  addressReference?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  amlReference?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  documentSubmittedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  addressSubmittedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  rejectionReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type KYCSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  isDocumentVerified?: boolean
  isAddressVerified?: boolean
  verificationStatus?: boolean
  documentReference?: boolean
  addressReference?: boolean
  amlReference?: boolean
  documentSubmittedAt?: boolean
  addressSubmittedAt?: boolean
  rejectionReason?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  userId?: boolean
  User?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["kYC"]>

export type KYCSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  isDocumentVerified?: boolean
  isAddressVerified?: boolean
  verificationStatus?: boolean
  documentReference?: boolean
  addressReference?: boolean
  amlReference?: boolean
  documentSubmittedAt?: boolean
  addressSubmittedAt?: boolean
  rejectionReason?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  userId?: boolean
  User?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["kYC"]>

export type KYCSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  isDocumentVerified?: boolean
  isAddressVerified?: boolean
  verificationStatus?: boolean
  documentReference?: boolean
  addressReference?: boolean
  amlReference?: boolean
  documentSubmittedAt?: boolean
  addressSubmittedAt?: boolean
  rejectionReason?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  userId?: boolean
  User?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["kYC"]>

export type KYCSelectScalar = {
  id?: boolean
  isDocumentVerified?: boolean
  isAddressVerified?: boolean
  verificationStatus?: boolean
  documentReference?: boolean
  addressReference?: boolean
  amlReference?: boolean
  documentSubmittedAt?: boolean
  addressSubmittedAt?: boolean
  rejectionReason?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  userId?: boolean
}

export type KYCOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "isDocumentVerified" | "isAddressVerified" | "verificationStatus" | "documentReference" | "addressReference" | "amlReference" | "documentSubmittedAt" | "addressSubmittedAt" | "rejectionReason" | "createdAt" | "updatedAt" | "userId", ExtArgs["result"]["kYC"]>
export type KYCInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  User?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type KYCIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  User?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type KYCIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  User?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $KYCPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "KYC"
  objects: {
    User: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    isDocumentVerified: boolean
    isAddressVerified: boolean
    verificationStatus: string
    documentReference: string | null
    addressReference: string | null
    amlReference: string | null
    documentSubmittedAt: Date | null
    addressSubmittedAt: Date | null
    rejectionReason: string | null
    createdAt: Date
    updatedAt: Date
    userId: string
  }, ExtArgs["result"]["kYC"]>
  composites: {}
}

export type KYCGetPayload<S extends boolean | null | undefined | KYCDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$KYCPayload, S>

export type KYCCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<KYCFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: KYCCountAggregateInputType | true
  }

export interface KYCDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['KYC'], meta: { name: 'KYC' } }
  /**
   * Find zero or one KYC that matches the filter.
   * @param {KYCFindUniqueArgs} args - Arguments to find a KYC
   * @example
   * // Get one KYC
   * const kYC = await prisma.kYC.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends KYCFindUniqueArgs>(args: Prisma.SelectSubset<T, KYCFindUniqueArgs<ExtArgs>>): Prisma.Prisma__KYCClient<runtime.Types.Result.GetResult<Prisma.$KYCPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one KYC that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {KYCFindUniqueOrThrowArgs} args - Arguments to find a KYC
   * @example
   * // Get one KYC
   * const kYC = await prisma.kYC.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends KYCFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, KYCFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__KYCClient<runtime.Types.Result.GetResult<Prisma.$KYCPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first KYC that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {KYCFindFirstArgs} args - Arguments to find a KYC
   * @example
   * // Get one KYC
   * const kYC = await prisma.kYC.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends KYCFindFirstArgs>(args?: Prisma.SelectSubset<T, KYCFindFirstArgs<ExtArgs>>): Prisma.Prisma__KYCClient<runtime.Types.Result.GetResult<Prisma.$KYCPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first KYC that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {KYCFindFirstOrThrowArgs} args - Arguments to find a KYC
   * @example
   * // Get one KYC
   * const kYC = await prisma.kYC.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends KYCFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, KYCFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__KYCClient<runtime.Types.Result.GetResult<Prisma.$KYCPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more KYCS that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {KYCFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all KYCS
   * const kYCS = await prisma.kYC.findMany()
   * 
   * // Get first 10 KYCS
   * const kYCS = await prisma.kYC.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const kYCWithIdOnly = await prisma.kYC.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends KYCFindManyArgs>(args?: Prisma.SelectSubset<T, KYCFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$KYCPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a KYC.
   * @param {KYCCreateArgs} args - Arguments to create a KYC.
   * @example
   * // Create one KYC
   * const KYC = await prisma.kYC.create({
   *   data: {
   *     // ... data to create a KYC
   *   }
   * })
   * 
   */
  create<T extends KYCCreateArgs>(args: Prisma.SelectSubset<T, KYCCreateArgs<ExtArgs>>): Prisma.Prisma__KYCClient<runtime.Types.Result.GetResult<Prisma.$KYCPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many KYCS.
   * @param {KYCCreateManyArgs} args - Arguments to create many KYCS.
   * @example
   * // Create many KYCS
   * const kYC = await prisma.kYC.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends KYCCreateManyArgs>(args?: Prisma.SelectSubset<T, KYCCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many KYCS and returns the data saved in the database.
   * @param {KYCCreateManyAndReturnArgs} args - Arguments to create many KYCS.
   * @example
   * // Create many KYCS
   * const kYC = await prisma.kYC.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many KYCS and only return the `id`
   * const kYCWithIdOnly = await prisma.kYC.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends KYCCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, KYCCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$KYCPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a KYC.
   * @param {KYCDeleteArgs} args - Arguments to delete one KYC.
   * @example
   * // Delete one KYC
   * const KYC = await prisma.kYC.delete({
   *   where: {
   *     // ... filter to delete one KYC
   *   }
   * })
   * 
   */
  delete<T extends KYCDeleteArgs>(args: Prisma.SelectSubset<T, KYCDeleteArgs<ExtArgs>>): Prisma.Prisma__KYCClient<runtime.Types.Result.GetResult<Prisma.$KYCPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one KYC.
   * @param {KYCUpdateArgs} args - Arguments to update one KYC.
   * @example
   * // Update one KYC
   * const kYC = await prisma.kYC.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends KYCUpdateArgs>(args: Prisma.SelectSubset<T, KYCUpdateArgs<ExtArgs>>): Prisma.Prisma__KYCClient<runtime.Types.Result.GetResult<Prisma.$KYCPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more KYCS.
   * @param {KYCDeleteManyArgs} args - Arguments to filter KYCS to delete.
   * @example
   * // Delete a few KYCS
   * const { count } = await prisma.kYC.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends KYCDeleteManyArgs>(args?: Prisma.SelectSubset<T, KYCDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more KYCS.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {KYCUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many KYCS
   * const kYC = await prisma.kYC.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends KYCUpdateManyArgs>(args: Prisma.SelectSubset<T, KYCUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more KYCS and returns the data updated in the database.
   * @param {KYCUpdateManyAndReturnArgs} args - Arguments to update many KYCS.
   * @example
   * // Update many KYCS
   * const kYC = await prisma.kYC.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more KYCS and only return the `id`
   * const kYCWithIdOnly = await prisma.kYC.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends KYCUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, KYCUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$KYCPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one KYC.
   * @param {KYCUpsertArgs} args - Arguments to update or create a KYC.
   * @example
   * // Update or create a KYC
   * const kYC = await prisma.kYC.upsert({
   *   create: {
   *     // ... data to create a KYC
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the KYC we want to update
   *   }
   * })
   */
  upsert<T extends KYCUpsertArgs>(args: Prisma.SelectSubset<T, KYCUpsertArgs<ExtArgs>>): Prisma.Prisma__KYCClient<runtime.Types.Result.GetResult<Prisma.$KYCPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of KYCS.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {KYCCountArgs} args - Arguments to filter KYCS to count.
   * @example
   * // Count the number of KYCS
   * const count = await prisma.kYC.count({
   *   where: {
   *     // ... the filter for the KYCS we want to count
   *   }
   * })
  **/
  count<T extends KYCCountArgs>(
    args?: Prisma.Subset<T, KYCCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], KYCCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a KYC.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {KYCAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends KYCAggregateArgs>(args: Prisma.Subset<T, KYCAggregateArgs>): Prisma.PrismaPromise<GetKYCAggregateType<T>>

  /**
   * Group by KYC.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {KYCGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends KYCGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: KYCGroupByArgs['orderBy'] }
      : { orderBy?: KYCGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, KYCGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetKYCGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the KYC model
 */
readonly fields: KYCFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for KYC.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__KYCClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  User<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the KYC model
 */
export interface KYCFieldRefs {
  readonly id: Prisma.FieldRef<"KYC", 'String'>
  readonly isDocumentVerified: Prisma.FieldRef<"KYC", 'Boolean'>
  readonly isAddressVerified: Prisma.FieldRef<"KYC", 'Boolean'>
  readonly verificationStatus: Prisma.FieldRef<"KYC", 'String'>
  readonly documentReference: Prisma.FieldRef<"KYC", 'String'>
  readonly addressReference: Prisma.FieldRef<"KYC", 'String'>
  readonly amlReference: Prisma.FieldRef<"KYC", 'String'>
  readonly documentSubmittedAt: Prisma.FieldRef<"KYC", 'DateTime'>
  readonly addressSubmittedAt: Prisma.FieldRef<"KYC", 'DateTime'>
  readonly rejectionReason: Prisma.FieldRef<"KYC", 'String'>
  readonly createdAt: Prisma.FieldRef<"KYC", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"KYC", 'DateTime'>
  readonly userId: Prisma.FieldRef<"KYC", 'String'>
}
    

// Custom InputTypes
/**
 * KYC findUnique
 */
export type KYCFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the KYC
   */
  select?: Prisma.KYCSelect<ExtArgs> | null
  /**
   * Omit specific fields from the KYC
   */
  omit?: Prisma.KYCOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.KYCInclude<ExtArgs> | null
  /**
   * Filter, which KYC to fetch.
   */
  where: Prisma.KYCWhereUniqueInput
}

/**
 * KYC findUniqueOrThrow
 */
export type KYCFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the KYC
   */
  select?: Prisma.KYCSelect<ExtArgs> | null
  /**
   * Omit specific fields from the KYC
   */
  omit?: Prisma.KYCOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.KYCInclude<ExtArgs> | null
  /**
   * Filter, which KYC to fetch.
   */
  where: Prisma.KYCWhereUniqueInput
}

/**
 * KYC findFirst
 */
export type KYCFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the KYC
   */
  select?: Prisma.KYCSelect<ExtArgs> | null
  /**
   * Omit specific fields from the KYC
   */
  omit?: Prisma.KYCOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.KYCInclude<ExtArgs> | null
  /**
   * Filter, which KYC to fetch.
   */
  where?: Prisma.KYCWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of KYCS to fetch.
   */
  orderBy?: Prisma.KYCOrderByWithRelationInput | Prisma.KYCOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for KYCS.
   */
  cursor?: Prisma.KYCWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` KYCS from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` KYCS.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of KYCS.
   */
  distinct?: Prisma.KYCScalarFieldEnum | Prisma.KYCScalarFieldEnum[]
}

/**
 * KYC findFirstOrThrow
 */
export type KYCFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the KYC
   */
  select?: Prisma.KYCSelect<ExtArgs> | null
  /**
   * Omit specific fields from the KYC
   */
  omit?: Prisma.KYCOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.KYCInclude<ExtArgs> | null
  /**
   * Filter, which KYC to fetch.
   */
  where?: Prisma.KYCWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of KYCS to fetch.
   */
  orderBy?: Prisma.KYCOrderByWithRelationInput | Prisma.KYCOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for KYCS.
   */
  cursor?: Prisma.KYCWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` KYCS from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` KYCS.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of KYCS.
   */
  distinct?: Prisma.KYCScalarFieldEnum | Prisma.KYCScalarFieldEnum[]
}

/**
 * KYC findMany
 */
export type KYCFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the KYC
   */
  select?: Prisma.KYCSelect<ExtArgs> | null
  /**
   * Omit specific fields from the KYC
   */
  omit?: Prisma.KYCOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.KYCInclude<ExtArgs> | null
  /**
   * Filter, which KYCS to fetch.
   */
  where?: Prisma.KYCWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of KYCS to fetch.
   */
  orderBy?: Prisma.KYCOrderByWithRelationInput | Prisma.KYCOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing KYCS.
   */
  cursor?: Prisma.KYCWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` KYCS from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` KYCS.
   */
  skip?: number
  distinct?: Prisma.KYCScalarFieldEnum | Prisma.KYCScalarFieldEnum[]
}

/**
 * KYC create
 */
export type KYCCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the KYC
   */
  select?: Prisma.KYCSelect<ExtArgs> | null
  /**
   * Omit specific fields from the KYC
   */
  omit?: Prisma.KYCOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.KYCInclude<ExtArgs> | null
  /**
   * The data needed to create a KYC.
   */
  data: Prisma.XOR<Prisma.KYCCreateInput, Prisma.KYCUncheckedCreateInput>
}

/**
 * KYC createMany
 */
export type KYCCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many KYCS.
   */
  data: Prisma.KYCCreateManyInput | Prisma.KYCCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * KYC createManyAndReturn
 */
export type KYCCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the KYC
   */
  select?: Prisma.KYCSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the KYC
   */
  omit?: Prisma.KYCOmit<ExtArgs> | null
  /**
   * The data used to create many KYCS.
   */
  data: Prisma.KYCCreateManyInput | Prisma.KYCCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.KYCIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * KYC update
 */
export type KYCUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the KYC
   */
  select?: Prisma.KYCSelect<ExtArgs> | null
  /**
   * Omit specific fields from the KYC
   */
  omit?: Prisma.KYCOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.KYCInclude<ExtArgs> | null
  /**
   * The data needed to update a KYC.
   */
  data: Prisma.XOR<Prisma.KYCUpdateInput, Prisma.KYCUncheckedUpdateInput>
  /**
   * Choose, which KYC to update.
   */
  where: Prisma.KYCWhereUniqueInput
}

/**
 * KYC updateMany
 */
export type KYCUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update KYCS.
   */
  data: Prisma.XOR<Prisma.KYCUpdateManyMutationInput, Prisma.KYCUncheckedUpdateManyInput>
  /**
   * Filter which KYCS to update
   */
  where?: Prisma.KYCWhereInput
  /**
   * Limit how many KYCS to update.
   */
  limit?: number
}

/**
 * KYC updateManyAndReturn
 */
export type KYCUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the KYC
   */
  select?: Prisma.KYCSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the KYC
   */
  omit?: Prisma.KYCOmit<ExtArgs> | null
  /**
   * The data used to update KYCS.
   */
  data: Prisma.XOR<Prisma.KYCUpdateManyMutationInput, Prisma.KYCUncheckedUpdateManyInput>
  /**
   * Filter which KYCS to update
   */
  where?: Prisma.KYCWhereInput
  /**
   * Limit how many KYCS to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.KYCIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * KYC upsert
 */
export type KYCUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the KYC
   */
  select?: Prisma.KYCSelect<ExtArgs> | null
  /**
   * Omit specific fields from the KYC
   */
  omit?: Prisma.KYCOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.KYCInclude<ExtArgs> | null
  /**
   * The filter to search for the KYC to update in case it exists.
   */
  where: Prisma.KYCWhereUniqueInput
  /**
   * In case the KYC found by the `where` argument doesn't exist, create a new KYC with this data.
   */
  create: Prisma.XOR<Prisma.KYCCreateInput, Prisma.KYCUncheckedCreateInput>
  /**
   * In case the KYC was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.KYCUpdateInput, Prisma.KYCUncheckedUpdateInput>
}

/**
 * KYC delete
 */
export type KYCDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the KYC
   */
  select?: Prisma.KYCSelect<ExtArgs> | null
  /**
   * Omit specific fields from the KYC
   */
  omit?: Prisma.KYCOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.KYCInclude<ExtArgs> | null
  /**
   * Filter which KYC to delete.
   */
  where: Prisma.KYCWhereUniqueInput
}

/**
 * KYC deleteMany
 */
export type KYCDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which KYCS to delete
   */
  where?: Prisma.KYCWhereInput
  /**
   * Limit how many KYCS to delete.
   */
  limit?: number
}

/**
 * KYC without action
 */
export type KYCDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the KYC
   */
  select?: Prisma.KYCSelect<ExtArgs> | null
  /**
   * Omit specific fields from the KYC
   */
  omit?: Prisma.KYCOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.KYCInclude<ExtArgs> | null
}
