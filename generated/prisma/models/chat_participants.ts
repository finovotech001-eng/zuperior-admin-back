
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `chat_participants` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model chat_participants
 * 
 */
export type chat_participantsModel = runtime.Types.Result.DefaultSelection<Prisma.$chat_participantsPayload>

export type AggregateChat_participants = {
  _count: Chat_participantsCountAggregateOutputType | null
  _avg: Chat_participantsAvgAggregateOutputType | null
  _sum: Chat_participantsSumAggregateOutputType | null
  _min: Chat_participantsMinAggregateOutputType | null
  _max: Chat_participantsMaxAggregateOutputType | null
}

export type Chat_participantsAvgAggregateOutputType = {
  id: number | null
  conversation_id: number | null
}

export type Chat_participantsSumAggregateOutputType = {
  id: number | null
  conversation_id: number | null
}

export type Chat_participantsMinAggregateOutputType = {
  id: number | null
  conversation_id: number | null
  user_id: string | null
  user_name: string | null
  user_type: string | null
  role: string | null
  joined_at: Date | null
  left_at: Date | null
  is_active: boolean | null
}

export type Chat_participantsMaxAggregateOutputType = {
  id: number | null
  conversation_id: number | null
  user_id: string | null
  user_name: string | null
  user_type: string | null
  role: string | null
  joined_at: Date | null
  left_at: Date | null
  is_active: boolean | null
}

export type Chat_participantsCountAggregateOutputType = {
  id: number
  conversation_id: number
  user_id: number
  user_name: number
  user_type: number
  role: number
  joined_at: number
  left_at: number
  is_active: number
  _all: number
}


export type Chat_participantsAvgAggregateInputType = {
  id?: true
  conversation_id?: true
}

export type Chat_participantsSumAggregateInputType = {
  id?: true
  conversation_id?: true
}

export type Chat_participantsMinAggregateInputType = {
  id?: true
  conversation_id?: true
  user_id?: true
  user_name?: true
  user_type?: true
  role?: true
  joined_at?: true
  left_at?: true
  is_active?: true
}

export type Chat_participantsMaxAggregateInputType = {
  id?: true
  conversation_id?: true
  user_id?: true
  user_name?: true
  user_type?: true
  role?: true
  joined_at?: true
  left_at?: true
  is_active?: true
}

export type Chat_participantsCountAggregateInputType = {
  id?: true
  conversation_id?: true
  user_id?: true
  user_name?: true
  user_type?: true
  role?: true
  joined_at?: true
  left_at?: true
  is_active?: true
  _all?: true
}

export type Chat_participantsAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which chat_participants to aggregate.
   */
  where?: Prisma.chat_participantsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of chat_participants to fetch.
   */
  orderBy?: Prisma.chat_participantsOrderByWithRelationInput | Prisma.chat_participantsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.chat_participantsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` chat_participants from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` chat_participants.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned chat_participants
  **/
  _count?: true | Chat_participantsCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: Chat_participantsAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: Chat_participantsSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: Chat_participantsMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: Chat_participantsMaxAggregateInputType
}

export type GetChat_participantsAggregateType<T extends Chat_participantsAggregateArgs> = {
      [P in keyof T & keyof AggregateChat_participants]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateChat_participants[P]>
    : Prisma.GetScalarType<T[P], AggregateChat_participants[P]>
}




export type chat_participantsGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.chat_participantsWhereInput
  orderBy?: Prisma.chat_participantsOrderByWithAggregationInput | Prisma.chat_participantsOrderByWithAggregationInput[]
  by: Prisma.Chat_participantsScalarFieldEnum[] | Prisma.Chat_participantsScalarFieldEnum
  having?: Prisma.chat_participantsScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: Chat_participantsCountAggregateInputType | true
  _avg?: Chat_participantsAvgAggregateInputType
  _sum?: Chat_participantsSumAggregateInputType
  _min?: Chat_participantsMinAggregateInputType
  _max?: Chat_participantsMaxAggregateInputType
}

export type Chat_participantsGroupByOutputType = {
  id: number
  conversation_id: number | null
  user_id: string
  user_name: string
  user_type: string
  role: string | null
  joined_at: Date | null
  left_at: Date | null
  is_active: boolean | null
  _count: Chat_participantsCountAggregateOutputType | null
  _avg: Chat_participantsAvgAggregateOutputType | null
  _sum: Chat_participantsSumAggregateOutputType | null
  _min: Chat_participantsMinAggregateOutputType | null
  _max: Chat_participantsMaxAggregateOutputType | null
}

type GetChat_participantsGroupByPayload<T extends chat_participantsGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<Chat_participantsGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof Chat_participantsGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], Chat_participantsGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], Chat_participantsGroupByOutputType[P]>
      }
    >
  >



export type chat_participantsWhereInput = {
  AND?: Prisma.chat_participantsWhereInput | Prisma.chat_participantsWhereInput[]
  OR?: Prisma.chat_participantsWhereInput[]
  NOT?: Prisma.chat_participantsWhereInput | Prisma.chat_participantsWhereInput[]
  id?: Prisma.IntFilter<"chat_participants"> | number
  conversation_id?: Prisma.IntNullableFilter<"chat_participants"> | number | null
  user_id?: Prisma.StringFilter<"chat_participants"> | string
  user_name?: Prisma.StringFilter<"chat_participants"> | string
  user_type?: Prisma.StringFilter<"chat_participants"> | string
  role?: Prisma.StringNullableFilter<"chat_participants"> | string | null
  joined_at?: Prisma.DateTimeNullableFilter<"chat_participants"> | Date | string | null
  left_at?: Prisma.DateTimeNullableFilter<"chat_participants"> | Date | string | null
  is_active?: Prisma.BoolNullableFilter<"chat_participants"> | boolean | null
  chat_conversations?: Prisma.XOR<Prisma.Chat_conversationsNullableScalarRelationFilter, Prisma.chat_conversationsWhereInput> | null
}

export type chat_participantsOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  conversation_id?: Prisma.SortOrderInput | Prisma.SortOrder
  user_id?: Prisma.SortOrder
  user_name?: Prisma.SortOrder
  user_type?: Prisma.SortOrder
  role?: Prisma.SortOrderInput | Prisma.SortOrder
  joined_at?: Prisma.SortOrderInput | Prisma.SortOrder
  left_at?: Prisma.SortOrderInput | Prisma.SortOrder
  is_active?: Prisma.SortOrderInput | Prisma.SortOrder
  chat_conversations?: Prisma.chat_conversationsOrderByWithRelationInput
}

export type chat_participantsWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  conversation_id_user_id?: Prisma.chat_participantsConversation_idUser_idCompoundUniqueInput
  AND?: Prisma.chat_participantsWhereInput | Prisma.chat_participantsWhereInput[]
  OR?: Prisma.chat_participantsWhereInput[]
  NOT?: Prisma.chat_participantsWhereInput | Prisma.chat_participantsWhereInput[]
  conversation_id?: Prisma.IntNullableFilter<"chat_participants"> | number | null
  user_id?: Prisma.StringFilter<"chat_participants"> | string
  user_name?: Prisma.StringFilter<"chat_participants"> | string
  user_type?: Prisma.StringFilter<"chat_participants"> | string
  role?: Prisma.StringNullableFilter<"chat_participants"> | string | null
  joined_at?: Prisma.DateTimeNullableFilter<"chat_participants"> | Date | string | null
  left_at?: Prisma.DateTimeNullableFilter<"chat_participants"> | Date | string | null
  is_active?: Prisma.BoolNullableFilter<"chat_participants"> | boolean | null
  chat_conversations?: Prisma.XOR<Prisma.Chat_conversationsNullableScalarRelationFilter, Prisma.chat_conversationsWhereInput> | null
}, "id" | "conversation_id_user_id">

export type chat_participantsOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  conversation_id?: Prisma.SortOrderInput | Prisma.SortOrder
  user_id?: Prisma.SortOrder
  user_name?: Prisma.SortOrder
  user_type?: Prisma.SortOrder
  role?: Prisma.SortOrderInput | Prisma.SortOrder
  joined_at?: Prisma.SortOrderInput | Prisma.SortOrder
  left_at?: Prisma.SortOrderInput | Prisma.SortOrder
  is_active?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.chat_participantsCountOrderByAggregateInput
  _avg?: Prisma.chat_participantsAvgOrderByAggregateInput
  _max?: Prisma.chat_participantsMaxOrderByAggregateInput
  _min?: Prisma.chat_participantsMinOrderByAggregateInput
  _sum?: Prisma.chat_participantsSumOrderByAggregateInput
}

export type chat_participantsScalarWhereWithAggregatesInput = {
  AND?: Prisma.chat_participantsScalarWhereWithAggregatesInput | Prisma.chat_participantsScalarWhereWithAggregatesInput[]
  OR?: Prisma.chat_participantsScalarWhereWithAggregatesInput[]
  NOT?: Prisma.chat_participantsScalarWhereWithAggregatesInput | Prisma.chat_participantsScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"chat_participants"> | number
  conversation_id?: Prisma.IntNullableWithAggregatesFilter<"chat_participants"> | number | null
  user_id?: Prisma.StringWithAggregatesFilter<"chat_participants"> | string
  user_name?: Prisma.StringWithAggregatesFilter<"chat_participants"> | string
  user_type?: Prisma.StringWithAggregatesFilter<"chat_participants"> | string
  role?: Prisma.StringNullableWithAggregatesFilter<"chat_participants"> | string | null
  joined_at?: Prisma.DateTimeNullableWithAggregatesFilter<"chat_participants"> | Date | string | null
  left_at?: Prisma.DateTimeNullableWithAggregatesFilter<"chat_participants"> | Date | string | null
  is_active?: Prisma.BoolNullableWithAggregatesFilter<"chat_participants"> | boolean | null
}

export type chat_participantsCreateInput = {
  user_id: string
  user_name: string
  user_type: string
  role?: string | null
  joined_at?: Date | string | null
  left_at?: Date | string | null
  is_active?: boolean | null
  chat_conversations?: Prisma.chat_conversationsCreateNestedOneWithoutChat_participantsInput
}

export type chat_participantsUncheckedCreateInput = {
  id?: number
  conversation_id?: number | null
  user_id: string
  user_name: string
  user_type: string
  role?: string | null
  joined_at?: Date | string | null
  left_at?: Date | string | null
  is_active?: boolean | null
}

export type chat_participantsUpdateInput = {
  user_id?: Prisma.StringFieldUpdateOperationsInput | string
  user_name?: Prisma.StringFieldUpdateOperationsInput | string
  user_type?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  joined_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  left_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  is_active?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  chat_conversations?: Prisma.chat_conversationsUpdateOneWithoutChat_participantsNestedInput
}

export type chat_participantsUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  conversation_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  user_id?: Prisma.StringFieldUpdateOperationsInput | string
  user_name?: Prisma.StringFieldUpdateOperationsInput | string
  user_type?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  joined_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  left_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  is_active?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
}

export type chat_participantsCreateManyInput = {
  id?: number
  conversation_id?: number | null
  user_id: string
  user_name: string
  user_type: string
  role?: string | null
  joined_at?: Date | string | null
  left_at?: Date | string | null
  is_active?: boolean | null
}

export type chat_participantsUpdateManyMutationInput = {
  user_id?: Prisma.StringFieldUpdateOperationsInput | string
  user_name?: Prisma.StringFieldUpdateOperationsInput | string
  user_type?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  joined_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  left_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  is_active?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
}

export type chat_participantsUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  conversation_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  user_id?: Prisma.StringFieldUpdateOperationsInput | string
  user_name?: Prisma.StringFieldUpdateOperationsInput | string
  user_type?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  joined_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  left_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  is_active?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
}

export type Chat_participantsListRelationFilter = {
  every?: Prisma.chat_participantsWhereInput
  some?: Prisma.chat_participantsWhereInput
  none?: Prisma.chat_participantsWhereInput
}

export type chat_participantsOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type chat_participantsConversation_idUser_idCompoundUniqueInput = {
  conversation_id: number
  user_id: string
}

export type chat_participantsCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  conversation_id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  user_name?: Prisma.SortOrder
  user_type?: Prisma.SortOrder
  role?: Prisma.SortOrder
  joined_at?: Prisma.SortOrder
  left_at?: Prisma.SortOrder
  is_active?: Prisma.SortOrder
}

export type chat_participantsAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  conversation_id?: Prisma.SortOrder
}

export type chat_participantsMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  conversation_id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  user_name?: Prisma.SortOrder
  user_type?: Prisma.SortOrder
  role?: Prisma.SortOrder
  joined_at?: Prisma.SortOrder
  left_at?: Prisma.SortOrder
  is_active?: Prisma.SortOrder
}

export type chat_participantsMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  conversation_id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  user_name?: Prisma.SortOrder
  user_type?: Prisma.SortOrder
  role?: Prisma.SortOrder
  joined_at?: Prisma.SortOrder
  left_at?: Prisma.SortOrder
  is_active?: Prisma.SortOrder
}

export type chat_participantsSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  conversation_id?: Prisma.SortOrder
}

export type chat_participantsCreateNestedManyWithoutChat_conversationsInput = {
  create?: Prisma.XOR<Prisma.chat_participantsCreateWithoutChat_conversationsInput, Prisma.chat_participantsUncheckedCreateWithoutChat_conversationsInput> | Prisma.chat_participantsCreateWithoutChat_conversationsInput[] | Prisma.chat_participantsUncheckedCreateWithoutChat_conversationsInput[]
  connectOrCreate?: Prisma.chat_participantsCreateOrConnectWithoutChat_conversationsInput | Prisma.chat_participantsCreateOrConnectWithoutChat_conversationsInput[]
  createMany?: Prisma.chat_participantsCreateManyChat_conversationsInputEnvelope
  connect?: Prisma.chat_participantsWhereUniqueInput | Prisma.chat_participantsWhereUniqueInput[]
}

export type chat_participantsUncheckedCreateNestedManyWithoutChat_conversationsInput = {
  create?: Prisma.XOR<Prisma.chat_participantsCreateWithoutChat_conversationsInput, Prisma.chat_participantsUncheckedCreateWithoutChat_conversationsInput> | Prisma.chat_participantsCreateWithoutChat_conversationsInput[] | Prisma.chat_participantsUncheckedCreateWithoutChat_conversationsInput[]
  connectOrCreate?: Prisma.chat_participantsCreateOrConnectWithoutChat_conversationsInput | Prisma.chat_participantsCreateOrConnectWithoutChat_conversationsInput[]
  createMany?: Prisma.chat_participantsCreateManyChat_conversationsInputEnvelope
  connect?: Prisma.chat_participantsWhereUniqueInput | Prisma.chat_participantsWhereUniqueInput[]
}

export type chat_participantsUpdateManyWithoutChat_conversationsNestedInput = {
  create?: Prisma.XOR<Prisma.chat_participantsCreateWithoutChat_conversationsInput, Prisma.chat_participantsUncheckedCreateWithoutChat_conversationsInput> | Prisma.chat_participantsCreateWithoutChat_conversationsInput[] | Prisma.chat_participantsUncheckedCreateWithoutChat_conversationsInput[]
  connectOrCreate?: Prisma.chat_participantsCreateOrConnectWithoutChat_conversationsInput | Prisma.chat_participantsCreateOrConnectWithoutChat_conversationsInput[]
  upsert?: Prisma.chat_participantsUpsertWithWhereUniqueWithoutChat_conversationsInput | Prisma.chat_participantsUpsertWithWhereUniqueWithoutChat_conversationsInput[]
  createMany?: Prisma.chat_participantsCreateManyChat_conversationsInputEnvelope
  set?: Prisma.chat_participantsWhereUniqueInput | Prisma.chat_participantsWhereUniqueInput[]
  disconnect?: Prisma.chat_participantsWhereUniqueInput | Prisma.chat_participantsWhereUniqueInput[]
  delete?: Prisma.chat_participantsWhereUniqueInput | Prisma.chat_participantsWhereUniqueInput[]
  connect?: Prisma.chat_participantsWhereUniqueInput | Prisma.chat_participantsWhereUniqueInput[]
  update?: Prisma.chat_participantsUpdateWithWhereUniqueWithoutChat_conversationsInput | Prisma.chat_participantsUpdateWithWhereUniqueWithoutChat_conversationsInput[]
  updateMany?: Prisma.chat_participantsUpdateManyWithWhereWithoutChat_conversationsInput | Prisma.chat_participantsUpdateManyWithWhereWithoutChat_conversationsInput[]
  deleteMany?: Prisma.chat_participantsScalarWhereInput | Prisma.chat_participantsScalarWhereInput[]
}

export type chat_participantsUncheckedUpdateManyWithoutChat_conversationsNestedInput = {
  create?: Prisma.XOR<Prisma.chat_participantsCreateWithoutChat_conversationsInput, Prisma.chat_participantsUncheckedCreateWithoutChat_conversationsInput> | Prisma.chat_participantsCreateWithoutChat_conversationsInput[] | Prisma.chat_participantsUncheckedCreateWithoutChat_conversationsInput[]
  connectOrCreate?: Prisma.chat_participantsCreateOrConnectWithoutChat_conversationsInput | Prisma.chat_participantsCreateOrConnectWithoutChat_conversationsInput[]
  upsert?: Prisma.chat_participantsUpsertWithWhereUniqueWithoutChat_conversationsInput | Prisma.chat_participantsUpsertWithWhereUniqueWithoutChat_conversationsInput[]
  createMany?: Prisma.chat_participantsCreateManyChat_conversationsInputEnvelope
  set?: Prisma.chat_participantsWhereUniqueInput | Prisma.chat_participantsWhereUniqueInput[]
  disconnect?: Prisma.chat_participantsWhereUniqueInput | Prisma.chat_participantsWhereUniqueInput[]
  delete?: Prisma.chat_participantsWhereUniqueInput | Prisma.chat_participantsWhereUniqueInput[]
  connect?: Prisma.chat_participantsWhereUniqueInput | Prisma.chat_participantsWhereUniqueInput[]
  update?: Prisma.chat_participantsUpdateWithWhereUniqueWithoutChat_conversationsInput | Prisma.chat_participantsUpdateWithWhereUniqueWithoutChat_conversationsInput[]
  updateMany?: Prisma.chat_participantsUpdateManyWithWhereWithoutChat_conversationsInput | Prisma.chat_participantsUpdateManyWithWhereWithoutChat_conversationsInput[]
  deleteMany?: Prisma.chat_participantsScalarWhereInput | Prisma.chat_participantsScalarWhereInput[]
}

export type chat_participantsCreateWithoutChat_conversationsInput = {
  user_id: string
  user_name: string
  user_type: string
  role?: string | null
  joined_at?: Date | string | null
  left_at?: Date | string | null
  is_active?: boolean | null
}

export type chat_participantsUncheckedCreateWithoutChat_conversationsInput = {
  id?: number
  user_id: string
  user_name: string
  user_type: string
  role?: string | null
  joined_at?: Date | string | null
  left_at?: Date | string | null
  is_active?: boolean | null
}

export type chat_participantsCreateOrConnectWithoutChat_conversationsInput = {
  where: Prisma.chat_participantsWhereUniqueInput
  create: Prisma.XOR<Prisma.chat_participantsCreateWithoutChat_conversationsInput, Prisma.chat_participantsUncheckedCreateWithoutChat_conversationsInput>
}

export type chat_participantsCreateManyChat_conversationsInputEnvelope = {
  data: Prisma.chat_participantsCreateManyChat_conversationsInput | Prisma.chat_participantsCreateManyChat_conversationsInput[]
  skipDuplicates?: boolean
}

export type chat_participantsUpsertWithWhereUniqueWithoutChat_conversationsInput = {
  where: Prisma.chat_participantsWhereUniqueInput
  update: Prisma.XOR<Prisma.chat_participantsUpdateWithoutChat_conversationsInput, Prisma.chat_participantsUncheckedUpdateWithoutChat_conversationsInput>
  create: Prisma.XOR<Prisma.chat_participantsCreateWithoutChat_conversationsInput, Prisma.chat_participantsUncheckedCreateWithoutChat_conversationsInput>
}

export type chat_participantsUpdateWithWhereUniqueWithoutChat_conversationsInput = {
  where: Prisma.chat_participantsWhereUniqueInput
  data: Prisma.XOR<Prisma.chat_participantsUpdateWithoutChat_conversationsInput, Prisma.chat_participantsUncheckedUpdateWithoutChat_conversationsInput>
}

export type chat_participantsUpdateManyWithWhereWithoutChat_conversationsInput = {
  where: Prisma.chat_participantsScalarWhereInput
  data: Prisma.XOR<Prisma.chat_participantsUpdateManyMutationInput, Prisma.chat_participantsUncheckedUpdateManyWithoutChat_conversationsInput>
}

export type chat_participantsScalarWhereInput = {
  AND?: Prisma.chat_participantsScalarWhereInput | Prisma.chat_participantsScalarWhereInput[]
  OR?: Prisma.chat_participantsScalarWhereInput[]
  NOT?: Prisma.chat_participantsScalarWhereInput | Prisma.chat_participantsScalarWhereInput[]
  id?: Prisma.IntFilter<"chat_participants"> | number
  conversation_id?: Prisma.IntNullableFilter<"chat_participants"> | number | null
  user_id?: Prisma.StringFilter<"chat_participants"> | string
  user_name?: Prisma.StringFilter<"chat_participants"> | string
  user_type?: Prisma.StringFilter<"chat_participants"> | string
  role?: Prisma.StringNullableFilter<"chat_participants"> | string | null
  joined_at?: Prisma.DateTimeNullableFilter<"chat_participants"> | Date | string | null
  left_at?: Prisma.DateTimeNullableFilter<"chat_participants"> | Date | string | null
  is_active?: Prisma.BoolNullableFilter<"chat_participants"> | boolean | null
}

export type chat_participantsCreateManyChat_conversationsInput = {
  id?: number
  user_id: string
  user_name: string
  user_type: string
  role?: string | null
  joined_at?: Date | string | null
  left_at?: Date | string | null
  is_active?: boolean | null
}

export type chat_participantsUpdateWithoutChat_conversationsInput = {
  user_id?: Prisma.StringFieldUpdateOperationsInput | string
  user_name?: Prisma.StringFieldUpdateOperationsInput | string
  user_type?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  joined_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  left_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  is_active?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
}

export type chat_participantsUncheckedUpdateWithoutChat_conversationsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  user_id?: Prisma.StringFieldUpdateOperationsInput | string
  user_name?: Prisma.StringFieldUpdateOperationsInput | string
  user_type?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  joined_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  left_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  is_active?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
}

export type chat_participantsUncheckedUpdateManyWithoutChat_conversationsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  user_id?: Prisma.StringFieldUpdateOperationsInput | string
  user_name?: Prisma.StringFieldUpdateOperationsInput | string
  user_type?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  joined_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  left_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  is_active?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
}



export type chat_participantsSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  conversation_id?: boolean
  user_id?: boolean
  user_name?: boolean
  user_type?: boolean
  role?: boolean
  joined_at?: boolean
  left_at?: boolean
  is_active?: boolean
  chat_conversations?: boolean | Prisma.chat_participants$chat_conversationsArgs<ExtArgs>
}, ExtArgs["result"]["chat_participants"]>

export type chat_participantsSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  conversation_id?: boolean
  user_id?: boolean
  user_name?: boolean
  user_type?: boolean
  role?: boolean
  joined_at?: boolean
  left_at?: boolean
  is_active?: boolean
  chat_conversations?: boolean | Prisma.chat_participants$chat_conversationsArgs<ExtArgs>
}, ExtArgs["result"]["chat_participants"]>

export type chat_participantsSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  conversation_id?: boolean
  user_id?: boolean
  user_name?: boolean
  user_type?: boolean
  role?: boolean
  joined_at?: boolean
  left_at?: boolean
  is_active?: boolean
  chat_conversations?: boolean | Prisma.chat_participants$chat_conversationsArgs<ExtArgs>
}, ExtArgs["result"]["chat_participants"]>

export type chat_participantsSelectScalar = {
  id?: boolean
  conversation_id?: boolean
  user_id?: boolean
  user_name?: boolean
  user_type?: boolean
  role?: boolean
  joined_at?: boolean
  left_at?: boolean
  is_active?: boolean
}

export type chat_participantsOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "conversation_id" | "user_id" | "user_name" | "user_type" | "role" | "joined_at" | "left_at" | "is_active", ExtArgs["result"]["chat_participants"]>
export type chat_participantsInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  chat_conversations?: boolean | Prisma.chat_participants$chat_conversationsArgs<ExtArgs>
}
export type chat_participantsIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  chat_conversations?: boolean | Prisma.chat_participants$chat_conversationsArgs<ExtArgs>
}
export type chat_participantsIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  chat_conversations?: boolean | Prisma.chat_participants$chat_conversationsArgs<ExtArgs>
}

export type $chat_participantsPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "chat_participants"
  objects: {
    chat_conversations: Prisma.$chat_conversationsPayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    conversation_id: number | null
    user_id: string
    user_name: string
    user_type: string
    role: string | null
    joined_at: Date | null
    left_at: Date | null
    is_active: boolean | null
  }, ExtArgs["result"]["chat_participants"]>
  composites: {}
}

export type chat_participantsGetPayload<S extends boolean | null | undefined | chat_participantsDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$chat_participantsPayload, S>

export type chat_participantsCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<chat_participantsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: Chat_participantsCountAggregateInputType | true
  }

export interface chat_participantsDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['chat_participants'], meta: { name: 'chat_participants' } }
  /**
   * Find zero or one Chat_participants that matches the filter.
   * @param {chat_participantsFindUniqueArgs} args - Arguments to find a Chat_participants
   * @example
   * // Get one Chat_participants
   * const chat_participants = await prisma.chat_participants.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends chat_participantsFindUniqueArgs>(args: Prisma.SelectSubset<T, chat_participantsFindUniqueArgs<ExtArgs>>): Prisma.Prisma__chat_participantsClient<runtime.Types.Result.GetResult<Prisma.$chat_participantsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Chat_participants that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {chat_participantsFindUniqueOrThrowArgs} args - Arguments to find a Chat_participants
   * @example
   * // Get one Chat_participants
   * const chat_participants = await prisma.chat_participants.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends chat_participantsFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, chat_participantsFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__chat_participantsClient<runtime.Types.Result.GetResult<Prisma.$chat_participantsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Chat_participants that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {chat_participantsFindFirstArgs} args - Arguments to find a Chat_participants
   * @example
   * // Get one Chat_participants
   * const chat_participants = await prisma.chat_participants.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends chat_participantsFindFirstArgs>(args?: Prisma.SelectSubset<T, chat_participantsFindFirstArgs<ExtArgs>>): Prisma.Prisma__chat_participantsClient<runtime.Types.Result.GetResult<Prisma.$chat_participantsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Chat_participants that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {chat_participantsFindFirstOrThrowArgs} args - Arguments to find a Chat_participants
   * @example
   * // Get one Chat_participants
   * const chat_participants = await prisma.chat_participants.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends chat_participantsFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, chat_participantsFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__chat_participantsClient<runtime.Types.Result.GetResult<Prisma.$chat_participantsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Chat_participants that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {chat_participantsFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Chat_participants
   * const chat_participants = await prisma.chat_participants.findMany()
   * 
   * // Get first 10 Chat_participants
   * const chat_participants = await prisma.chat_participants.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const chat_participantsWithIdOnly = await prisma.chat_participants.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends chat_participantsFindManyArgs>(args?: Prisma.SelectSubset<T, chat_participantsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$chat_participantsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Chat_participants.
   * @param {chat_participantsCreateArgs} args - Arguments to create a Chat_participants.
   * @example
   * // Create one Chat_participants
   * const Chat_participants = await prisma.chat_participants.create({
   *   data: {
   *     // ... data to create a Chat_participants
   *   }
   * })
   * 
   */
  create<T extends chat_participantsCreateArgs>(args: Prisma.SelectSubset<T, chat_participantsCreateArgs<ExtArgs>>): Prisma.Prisma__chat_participantsClient<runtime.Types.Result.GetResult<Prisma.$chat_participantsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Chat_participants.
   * @param {chat_participantsCreateManyArgs} args - Arguments to create many Chat_participants.
   * @example
   * // Create many Chat_participants
   * const chat_participants = await prisma.chat_participants.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends chat_participantsCreateManyArgs>(args?: Prisma.SelectSubset<T, chat_participantsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Chat_participants and returns the data saved in the database.
   * @param {chat_participantsCreateManyAndReturnArgs} args - Arguments to create many Chat_participants.
   * @example
   * // Create many Chat_participants
   * const chat_participants = await prisma.chat_participants.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Chat_participants and only return the `id`
   * const chat_participantsWithIdOnly = await prisma.chat_participants.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends chat_participantsCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, chat_participantsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$chat_participantsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Chat_participants.
   * @param {chat_participantsDeleteArgs} args - Arguments to delete one Chat_participants.
   * @example
   * // Delete one Chat_participants
   * const Chat_participants = await prisma.chat_participants.delete({
   *   where: {
   *     // ... filter to delete one Chat_participants
   *   }
   * })
   * 
   */
  delete<T extends chat_participantsDeleteArgs>(args: Prisma.SelectSubset<T, chat_participantsDeleteArgs<ExtArgs>>): Prisma.Prisma__chat_participantsClient<runtime.Types.Result.GetResult<Prisma.$chat_participantsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Chat_participants.
   * @param {chat_participantsUpdateArgs} args - Arguments to update one Chat_participants.
   * @example
   * // Update one Chat_participants
   * const chat_participants = await prisma.chat_participants.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends chat_participantsUpdateArgs>(args: Prisma.SelectSubset<T, chat_participantsUpdateArgs<ExtArgs>>): Prisma.Prisma__chat_participantsClient<runtime.Types.Result.GetResult<Prisma.$chat_participantsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Chat_participants.
   * @param {chat_participantsDeleteManyArgs} args - Arguments to filter Chat_participants to delete.
   * @example
   * // Delete a few Chat_participants
   * const { count } = await prisma.chat_participants.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends chat_participantsDeleteManyArgs>(args?: Prisma.SelectSubset<T, chat_participantsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Chat_participants.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {chat_participantsUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Chat_participants
   * const chat_participants = await prisma.chat_participants.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends chat_participantsUpdateManyArgs>(args: Prisma.SelectSubset<T, chat_participantsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Chat_participants and returns the data updated in the database.
   * @param {chat_participantsUpdateManyAndReturnArgs} args - Arguments to update many Chat_participants.
   * @example
   * // Update many Chat_participants
   * const chat_participants = await prisma.chat_participants.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Chat_participants and only return the `id`
   * const chat_participantsWithIdOnly = await prisma.chat_participants.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends chat_participantsUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, chat_participantsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$chat_participantsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Chat_participants.
   * @param {chat_participantsUpsertArgs} args - Arguments to update or create a Chat_participants.
   * @example
   * // Update or create a Chat_participants
   * const chat_participants = await prisma.chat_participants.upsert({
   *   create: {
   *     // ... data to create a Chat_participants
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Chat_participants we want to update
   *   }
   * })
   */
  upsert<T extends chat_participantsUpsertArgs>(args: Prisma.SelectSubset<T, chat_participantsUpsertArgs<ExtArgs>>): Prisma.Prisma__chat_participantsClient<runtime.Types.Result.GetResult<Prisma.$chat_participantsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Chat_participants.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {chat_participantsCountArgs} args - Arguments to filter Chat_participants to count.
   * @example
   * // Count the number of Chat_participants
   * const count = await prisma.chat_participants.count({
   *   where: {
   *     // ... the filter for the Chat_participants we want to count
   *   }
   * })
  **/
  count<T extends chat_participantsCountArgs>(
    args?: Prisma.Subset<T, chat_participantsCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], Chat_participantsCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Chat_participants.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {Chat_participantsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends Chat_participantsAggregateArgs>(args: Prisma.Subset<T, Chat_participantsAggregateArgs>): Prisma.PrismaPromise<GetChat_participantsAggregateType<T>>

  /**
   * Group by Chat_participants.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {chat_participantsGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends chat_participantsGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: chat_participantsGroupByArgs['orderBy'] }
      : { orderBy?: chat_participantsGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, chat_participantsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChat_participantsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the chat_participants model
 */
readonly fields: chat_participantsFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for chat_participants.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__chat_participantsClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  chat_conversations<T extends Prisma.chat_participants$chat_conversationsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.chat_participants$chat_conversationsArgs<ExtArgs>>): Prisma.Prisma__chat_conversationsClient<runtime.Types.Result.GetResult<Prisma.$chat_conversationsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the chat_participants model
 */
export interface chat_participantsFieldRefs {
  readonly id: Prisma.FieldRef<"chat_participants", 'Int'>
  readonly conversation_id: Prisma.FieldRef<"chat_participants", 'Int'>
  readonly user_id: Prisma.FieldRef<"chat_participants", 'String'>
  readonly user_name: Prisma.FieldRef<"chat_participants", 'String'>
  readonly user_type: Prisma.FieldRef<"chat_participants", 'String'>
  readonly role: Prisma.FieldRef<"chat_participants", 'String'>
  readonly joined_at: Prisma.FieldRef<"chat_participants", 'DateTime'>
  readonly left_at: Prisma.FieldRef<"chat_participants", 'DateTime'>
  readonly is_active: Prisma.FieldRef<"chat_participants", 'Boolean'>
}
    

// Custom InputTypes
/**
 * chat_participants findUnique
 */
export type chat_participantsFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the chat_participants
   */
  select?: Prisma.chat_participantsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the chat_participants
   */
  omit?: Prisma.chat_participantsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.chat_participantsInclude<ExtArgs> | null
  /**
   * Filter, which chat_participants to fetch.
   */
  where: Prisma.chat_participantsWhereUniqueInput
}

/**
 * chat_participants findUniqueOrThrow
 */
export type chat_participantsFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the chat_participants
   */
  select?: Prisma.chat_participantsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the chat_participants
   */
  omit?: Prisma.chat_participantsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.chat_participantsInclude<ExtArgs> | null
  /**
   * Filter, which chat_participants to fetch.
   */
  where: Prisma.chat_participantsWhereUniqueInput
}

/**
 * chat_participants findFirst
 */
export type chat_participantsFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the chat_participants
   */
  select?: Prisma.chat_participantsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the chat_participants
   */
  omit?: Prisma.chat_participantsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.chat_participantsInclude<ExtArgs> | null
  /**
   * Filter, which chat_participants to fetch.
   */
  where?: Prisma.chat_participantsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of chat_participants to fetch.
   */
  orderBy?: Prisma.chat_participantsOrderByWithRelationInput | Prisma.chat_participantsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for chat_participants.
   */
  cursor?: Prisma.chat_participantsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` chat_participants from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` chat_participants.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of chat_participants.
   */
  distinct?: Prisma.Chat_participantsScalarFieldEnum | Prisma.Chat_participantsScalarFieldEnum[]
}

/**
 * chat_participants findFirstOrThrow
 */
export type chat_participantsFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the chat_participants
   */
  select?: Prisma.chat_participantsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the chat_participants
   */
  omit?: Prisma.chat_participantsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.chat_participantsInclude<ExtArgs> | null
  /**
   * Filter, which chat_participants to fetch.
   */
  where?: Prisma.chat_participantsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of chat_participants to fetch.
   */
  orderBy?: Prisma.chat_participantsOrderByWithRelationInput | Prisma.chat_participantsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for chat_participants.
   */
  cursor?: Prisma.chat_participantsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` chat_participants from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` chat_participants.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of chat_participants.
   */
  distinct?: Prisma.Chat_participantsScalarFieldEnum | Prisma.Chat_participantsScalarFieldEnum[]
}

/**
 * chat_participants findMany
 */
export type chat_participantsFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the chat_participants
   */
  select?: Prisma.chat_participantsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the chat_participants
   */
  omit?: Prisma.chat_participantsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.chat_participantsInclude<ExtArgs> | null
  /**
   * Filter, which chat_participants to fetch.
   */
  where?: Prisma.chat_participantsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of chat_participants to fetch.
   */
  orderBy?: Prisma.chat_participantsOrderByWithRelationInput | Prisma.chat_participantsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing chat_participants.
   */
  cursor?: Prisma.chat_participantsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` chat_participants from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` chat_participants.
   */
  skip?: number
  distinct?: Prisma.Chat_participantsScalarFieldEnum | Prisma.Chat_participantsScalarFieldEnum[]
}

/**
 * chat_participants create
 */
export type chat_participantsCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the chat_participants
   */
  select?: Prisma.chat_participantsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the chat_participants
   */
  omit?: Prisma.chat_participantsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.chat_participantsInclude<ExtArgs> | null
  /**
   * The data needed to create a chat_participants.
   */
  data: Prisma.XOR<Prisma.chat_participantsCreateInput, Prisma.chat_participantsUncheckedCreateInput>
}

/**
 * chat_participants createMany
 */
export type chat_participantsCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many chat_participants.
   */
  data: Prisma.chat_participantsCreateManyInput | Prisma.chat_participantsCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * chat_participants createManyAndReturn
 */
export type chat_participantsCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the chat_participants
   */
  select?: Prisma.chat_participantsSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the chat_participants
   */
  omit?: Prisma.chat_participantsOmit<ExtArgs> | null
  /**
   * The data used to create many chat_participants.
   */
  data: Prisma.chat_participantsCreateManyInput | Prisma.chat_participantsCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.chat_participantsIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * chat_participants update
 */
export type chat_participantsUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the chat_participants
   */
  select?: Prisma.chat_participantsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the chat_participants
   */
  omit?: Prisma.chat_participantsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.chat_participantsInclude<ExtArgs> | null
  /**
   * The data needed to update a chat_participants.
   */
  data: Prisma.XOR<Prisma.chat_participantsUpdateInput, Prisma.chat_participantsUncheckedUpdateInput>
  /**
   * Choose, which chat_participants to update.
   */
  where: Prisma.chat_participantsWhereUniqueInput
}

/**
 * chat_participants updateMany
 */
export type chat_participantsUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update chat_participants.
   */
  data: Prisma.XOR<Prisma.chat_participantsUpdateManyMutationInput, Prisma.chat_participantsUncheckedUpdateManyInput>
  /**
   * Filter which chat_participants to update
   */
  where?: Prisma.chat_participantsWhereInput
  /**
   * Limit how many chat_participants to update.
   */
  limit?: number
}

/**
 * chat_participants updateManyAndReturn
 */
export type chat_participantsUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the chat_participants
   */
  select?: Prisma.chat_participantsSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the chat_participants
   */
  omit?: Prisma.chat_participantsOmit<ExtArgs> | null
  /**
   * The data used to update chat_participants.
   */
  data: Prisma.XOR<Prisma.chat_participantsUpdateManyMutationInput, Prisma.chat_participantsUncheckedUpdateManyInput>
  /**
   * Filter which chat_participants to update
   */
  where?: Prisma.chat_participantsWhereInput
  /**
   * Limit how many chat_participants to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.chat_participantsIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * chat_participants upsert
 */
export type chat_participantsUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the chat_participants
   */
  select?: Prisma.chat_participantsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the chat_participants
   */
  omit?: Prisma.chat_participantsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.chat_participantsInclude<ExtArgs> | null
  /**
   * The filter to search for the chat_participants to update in case it exists.
   */
  where: Prisma.chat_participantsWhereUniqueInput
  /**
   * In case the chat_participants found by the `where` argument doesn't exist, create a new chat_participants with this data.
   */
  create: Prisma.XOR<Prisma.chat_participantsCreateInput, Prisma.chat_participantsUncheckedCreateInput>
  /**
   * In case the chat_participants was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.chat_participantsUpdateInput, Prisma.chat_participantsUncheckedUpdateInput>
}

/**
 * chat_participants delete
 */
export type chat_participantsDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the chat_participants
   */
  select?: Prisma.chat_participantsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the chat_participants
   */
  omit?: Prisma.chat_participantsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.chat_participantsInclude<ExtArgs> | null
  /**
   * Filter which chat_participants to delete.
   */
  where: Prisma.chat_participantsWhereUniqueInput
}

/**
 * chat_participants deleteMany
 */
export type chat_participantsDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which chat_participants to delete
   */
  where?: Prisma.chat_participantsWhereInput
  /**
   * Limit how many chat_participants to delete.
   */
  limit?: number
}

/**
 * chat_participants.chat_conversations
 */
export type chat_participants$chat_conversationsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the chat_conversations
   */
  select?: Prisma.chat_conversationsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the chat_conversations
   */
  omit?: Prisma.chat_conversationsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.chat_conversationsInclude<ExtArgs> | null
  where?: Prisma.chat_conversationsWhereInput
}

/**
 * chat_participants without action
 */
export type chat_participantsDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the chat_participants
   */
  select?: Prisma.chat_participantsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the chat_participants
   */
  omit?: Prisma.chat_participantsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.chat_participantsInclude<ExtArgs> | null
}
