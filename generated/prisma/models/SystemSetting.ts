
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `SystemSetting` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model SystemSetting
 * 
 */
export type SystemSettingModel = runtime.Types.Result.DefaultSelection<Prisma.$SystemSettingPayload>

export type AggregateSystemSetting = {
  _count: SystemSettingCountAggregateOutputType | null
  _min: SystemSettingMinAggregateOutputType | null
  _max: SystemSettingMaxAggregateOutputType | null
}

export type SystemSettingMinAggregateOutputType = {
  id: string | null
  key: string | null
  value: string | null
  category: string | null
  description: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type SystemSettingMaxAggregateOutputType = {
  id: string | null
  key: string | null
  value: string | null
  category: string | null
  description: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type SystemSettingCountAggregateOutputType = {
  id: number
  key: number
  value: number
  category: number
  description: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type SystemSettingMinAggregateInputType = {
  id?: true
  key?: true
  value?: true
  category?: true
  description?: true
  createdAt?: true
  updatedAt?: true
}

export type SystemSettingMaxAggregateInputType = {
  id?: true
  key?: true
  value?: true
  category?: true
  description?: true
  createdAt?: true
  updatedAt?: true
}

export type SystemSettingCountAggregateInputType = {
  id?: true
  key?: true
  value?: true
  category?: true
  description?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type SystemSettingAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which SystemSetting to aggregate.
   */
  where?: Prisma.SystemSettingWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of SystemSettings to fetch.
   */
  orderBy?: Prisma.SystemSettingOrderByWithRelationInput | Prisma.SystemSettingOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.SystemSettingWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` SystemSettings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` SystemSettings.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned SystemSettings
  **/
  _count?: true | SystemSettingCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: SystemSettingMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: SystemSettingMaxAggregateInputType
}

export type GetSystemSettingAggregateType<T extends SystemSettingAggregateArgs> = {
      [P in keyof T & keyof AggregateSystemSetting]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateSystemSetting[P]>
    : Prisma.GetScalarType<T[P], AggregateSystemSetting[P]>
}




export type SystemSettingGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.SystemSettingWhereInput
  orderBy?: Prisma.SystemSettingOrderByWithAggregationInput | Prisma.SystemSettingOrderByWithAggregationInput[]
  by: Prisma.SystemSettingScalarFieldEnum[] | Prisma.SystemSettingScalarFieldEnum
  having?: Prisma.SystemSettingScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: SystemSettingCountAggregateInputType | true
  _min?: SystemSettingMinAggregateInputType
  _max?: SystemSettingMaxAggregateInputType
}

export type SystemSettingGroupByOutputType = {
  id: string
  key: string
  value: string
  category: string
  description: string | null
  createdAt: Date
  updatedAt: Date
  _count: SystemSettingCountAggregateOutputType | null
  _min: SystemSettingMinAggregateOutputType | null
  _max: SystemSettingMaxAggregateOutputType | null
}

type GetSystemSettingGroupByPayload<T extends SystemSettingGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<SystemSettingGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof SystemSettingGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], SystemSettingGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], SystemSettingGroupByOutputType[P]>
      }
    >
  >



export type SystemSettingWhereInput = {
  AND?: Prisma.SystemSettingWhereInput | Prisma.SystemSettingWhereInput[]
  OR?: Prisma.SystemSettingWhereInput[]
  NOT?: Prisma.SystemSettingWhereInput | Prisma.SystemSettingWhereInput[]
  id?: Prisma.StringFilter<"SystemSetting"> | string
  key?: Prisma.StringFilter<"SystemSetting"> | string
  value?: Prisma.StringFilter<"SystemSetting"> | string
  category?: Prisma.StringFilter<"SystemSetting"> | string
  description?: Prisma.StringNullableFilter<"SystemSetting"> | string | null
  createdAt?: Prisma.DateTimeFilter<"SystemSetting"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"SystemSetting"> | Date | string
}

export type SystemSettingOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  key?: Prisma.SortOrder
  value?: Prisma.SortOrder
  category?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type SystemSettingWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  key?: string
  AND?: Prisma.SystemSettingWhereInput | Prisma.SystemSettingWhereInput[]
  OR?: Prisma.SystemSettingWhereInput[]
  NOT?: Prisma.SystemSettingWhereInput | Prisma.SystemSettingWhereInput[]
  value?: Prisma.StringFilter<"SystemSetting"> | string
  category?: Prisma.StringFilter<"SystemSetting"> | string
  description?: Prisma.StringNullableFilter<"SystemSetting"> | string | null
  createdAt?: Prisma.DateTimeFilter<"SystemSetting"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"SystemSetting"> | Date | string
}, "id" | "key">

export type SystemSettingOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  key?: Prisma.SortOrder
  value?: Prisma.SortOrder
  category?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.SystemSettingCountOrderByAggregateInput
  _max?: Prisma.SystemSettingMaxOrderByAggregateInput
  _min?: Prisma.SystemSettingMinOrderByAggregateInput
}

export type SystemSettingScalarWhereWithAggregatesInput = {
  AND?: Prisma.SystemSettingScalarWhereWithAggregatesInput | Prisma.SystemSettingScalarWhereWithAggregatesInput[]
  OR?: Prisma.SystemSettingScalarWhereWithAggregatesInput[]
  NOT?: Prisma.SystemSettingScalarWhereWithAggregatesInput | Prisma.SystemSettingScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"SystemSetting"> | string
  key?: Prisma.StringWithAggregatesFilter<"SystemSetting"> | string
  value?: Prisma.StringWithAggregatesFilter<"SystemSetting"> | string
  category?: Prisma.StringWithAggregatesFilter<"SystemSetting"> | string
  description?: Prisma.StringNullableWithAggregatesFilter<"SystemSetting"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"SystemSetting"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"SystemSetting"> | Date | string
}

export type SystemSettingCreateInput = {
  id: string
  key: string
  value: string
  category: string
  description?: string | null
  createdAt?: Date | string
  updatedAt: Date | string
}

export type SystemSettingUncheckedCreateInput = {
  id: string
  key: string
  value: string
  category: string
  description?: string | null
  createdAt?: Date | string
  updatedAt: Date | string
}

export type SystemSettingUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  key?: Prisma.StringFieldUpdateOperationsInput | string
  value?: Prisma.StringFieldUpdateOperationsInput | string
  category?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type SystemSettingUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  key?: Prisma.StringFieldUpdateOperationsInput | string
  value?: Prisma.StringFieldUpdateOperationsInput | string
  category?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type SystemSettingCreateManyInput = {
  id: string
  key: string
  value: string
  category: string
  description?: string | null
  createdAt?: Date | string
  updatedAt: Date | string
}

export type SystemSettingUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  key?: Prisma.StringFieldUpdateOperationsInput | string
  value?: Prisma.StringFieldUpdateOperationsInput | string
  category?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type SystemSettingUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  key?: Prisma.StringFieldUpdateOperationsInput | string
  value?: Prisma.StringFieldUpdateOperationsInput | string
  category?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type SystemSettingCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  key?: Prisma.SortOrder
  value?: Prisma.SortOrder
  category?: Prisma.SortOrder
  description?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type SystemSettingMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  key?: Prisma.SortOrder
  value?: Prisma.SortOrder
  category?: Prisma.SortOrder
  description?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type SystemSettingMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  key?: Prisma.SortOrder
  value?: Prisma.SortOrder
  category?: Prisma.SortOrder
  description?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}



export type SystemSettingSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  key?: boolean
  value?: boolean
  category?: boolean
  description?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["systemSetting"]>

export type SystemSettingSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  key?: boolean
  value?: boolean
  category?: boolean
  description?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["systemSetting"]>

export type SystemSettingSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  key?: boolean
  value?: boolean
  category?: boolean
  description?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["systemSetting"]>

export type SystemSettingSelectScalar = {
  id?: boolean
  key?: boolean
  value?: boolean
  category?: boolean
  description?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type SystemSettingOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "key" | "value" | "category" | "description" | "createdAt" | "updatedAt", ExtArgs["result"]["systemSetting"]>

export type $SystemSettingPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "SystemSetting"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    key: string
    value: string
    category: string
    description: string | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["systemSetting"]>
  composites: {}
}

export type SystemSettingGetPayload<S extends boolean | null | undefined | SystemSettingDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$SystemSettingPayload, S>

export type SystemSettingCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<SystemSettingFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: SystemSettingCountAggregateInputType | true
  }

export interface SystemSettingDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SystemSetting'], meta: { name: 'SystemSetting' } }
  /**
   * Find zero or one SystemSetting that matches the filter.
   * @param {SystemSettingFindUniqueArgs} args - Arguments to find a SystemSetting
   * @example
   * // Get one SystemSetting
   * const systemSetting = await prisma.systemSetting.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends SystemSettingFindUniqueArgs>(args: Prisma.SelectSubset<T, SystemSettingFindUniqueArgs<ExtArgs>>): Prisma.Prisma__SystemSettingClient<runtime.Types.Result.GetResult<Prisma.$SystemSettingPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one SystemSetting that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {SystemSettingFindUniqueOrThrowArgs} args - Arguments to find a SystemSetting
   * @example
   * // Get one SystemSetting
   * const systemSetting = await prisma.systemSetting.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends SystemSettingFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, SystemSettingFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__SystemSettingClient<runtime.Types.Result.GetResult<Prisma.$SystemSettingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first SystemSetting that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SystemSettingFindFirstArgs} args - Arguments to find a SystemSetting
   * @example
   * // Get one SystemSetting
   * const systemSetting = await prisma.systemSetting.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends SystemSettingFindFirstArgs>(args?: Prisma.SelectSubset<T, SystemSettingFindFirstArgs<ExtArgs>>): Prisma.Prisma__SystemSettingClient<runtime.Types.Result.GetResult<Prisma.$SystemSettingPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first SystemSetting that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SystemSettingFindFirstOrThrowArgs} args - Arguments to find a SystemSetting
   * @example
   * // Get one SystemSetting
   * const systemSetting = await prisma.systemSetting.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends SystemSettingFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, SystemSettingFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__SystemSettingClient<runtime.Types.Result.GetResult<Prisma.$SystemSettingPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more SystemSettings that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SystemSettingFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all SystemSettings
   * const systemSettings = await prisma.systemSetting.findMany()
   * 
   * // Get first 10 SystemSettings
   * const systemSettings = await prisma.systemSetting.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const systemSettingWithIdOnly = await prisma.systemSetting.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends SystemSettingFindManyArgs>(args?: Prisma.SelectSubset<T, SystemSettingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SystemSettingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a SystemSetting.
   * @param {SystemSettingCreateArgs} args - Arguments to create a SystemSetting.
   * @example
   * // Create one SystemSetting
   * const SystemSetting = await prisma.systemSetting.create({
   *   data: {
   *     // ... data to create a SystemSetting
   *   }
   * })
   * 
   */
  create<T extends SystemSettingCreateArgs>(args: Prisma.SelectSubset<T, SystemSettingCreateArgs<ExtArgs>>): Prisma.Prisma__SystemSettingClient<runtime.Types.Result.GetResult<Prisma.$SystemSettingPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many SystemSettings.
   * @param {SystemSettingCreateManyArgs} args - Arguments to create many SystemSettings.
   * @example
   * // Create many SystemSettings
   * const systemSetting = await prisma.systemSetting.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends SystemSettingCreateManyArgs>(args?: Prisma.SelectSubset<T, SystemSettingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many SystemSettings and returns the data saved in the database.
   * @param {SystemSettingCreateManyAndReturnArgs} args - Arguments to create many SystemSettings.
   * @example
   * // Create many SystemSettings
   * const systemSetting = await prisma.systemSetting.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many SystemSettings and only return the `id`
   * const systemSettingWithIdOnly = await prisma.systemSetting.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends SystemSettingCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, SystemSettingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SystemSettingPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a SystemSetting.
   * @param {SystemSettingDeleteArgs} args - Arguments to delete one SystemSetting.
   * @example
   * // Delete one SystemSetting
   * const SystemSetting = await prisma.systemSetting.delete({
   *   where: {
   *     // ... filter to delete one SystemSetting
   *   }
   * })
   * 
   */
  delete<T extends SystemSettingDeleteArgs>(args: Prisma.SelectSubset<T, SystemSettingDeleteArgs<ExtArgs>>): Prisma.Prisma__SystemSettingClient<runtime.Types.Result.GetResult<Prisma.$SystemSettingPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one SystemSetting.
   * @param {SystemSettingUpdateArgs} args - Arguments to update one SystemSetting.
   * @example
   * // Update one SystemSetting
   * const systemSetting = await prisma.systemSetting.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends SystemSettingUpdateArgs>(args: Prisma.SelectSubset<T, SystemSettingUpdateArgs<ExtArgs>>): Prisma.Prisma__SystemSettingClient<runtime.Types.Result.GetResult<Prisma.$SystemSettingPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more SystemSettings.
   * @param {SystemSettingDeleteManyArgs} args - Arguments to filter SystemSettings to delete.
   * @example
   * // Delete a few SystemSettings
   * const { count } = await prisma.systemSetting.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends SystemSettingDeleteManyArgs>(args?: Prisma.SelectSubset<T, SystemSettingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more SystemSettings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SystemSettingUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many SystemSettings
   * const systemSetting = await prisma.systemSetting.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends SystemSettingUpdateManyArgs>(args: Prisma.SelectSubset<T, SystemSettingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more SystemSettings and returns the data updated in the database.
   * @param {SystemSettingUpdateManyAndReturnArgs} args - Arguments to update many SystemSettings.
   * @example
   * // Update many SystemSettings
   * const systemSetting = await prisma.systemSetting.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more SystemSettings and only return the `id`
   * const systemSettingWithIdOnly = await prisma.systemSetting.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends SystemSettingUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, SystemSettingUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SystemSettingPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one SystemSetting.
   * @param {SystemSettingUpsertArgs} args - Arguments to update or create a SystemSetting.
   * @example
   * // Update or create a SystemSetting
   * const systemSetting = await prisma.systemSetting.upsert({
   *   create: {
   *     // ... data to create a SystemSetting
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the SystemSetting we want to update
   *   }
   * })
   */
  upsert<T extends SystemSettingUpsertArgs>(args: Prisma.SelectSubset<T, SystemSettingUpsertArgs<ExtArgs>>): Prisma.Prisma__SystemSettingClient<runtime.Types.Result.GetResult<Prisma.$SystemSettingPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of SystemSettings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SystemSettingCountArgs} args - Arguments to filter SystemSettings to count.
   * @example
   * // Count the number of SystemSettings
   * const count = await prisma.systemSetting.count({
   *   where: {
   *     // ... the filter for the SystemSettings we want to count
   *   }
   * })
  **/
  count<T extends SystemSettingCountArgs>(
    args?: Prisma.Subset<T, SystemSettingCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], SystemSettingCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a SystemSetting.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SystemSettingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends SystemSettingAggregateArgs>(args: Prisma.Subset<T, SystemSettingAggregateArgs>): Prisma.PrismaPromise<GetSystemSettingAggregateType<T>>

  /**
   * Group by SystemSetting.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SystemSettingGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends SystemSettingGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: SystemSettingGroupByArgs['orderBy'] }
      : { orderBy?: SystemSettingGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, SystemSettingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSystemSettingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the SystemSetting model
 */
readonly fields: SystemSettingFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for SystemSetting.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__SystemSettingClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the SystemSetting model
 */
export interface SystemSettingFieldRefs {
  readonly id: Prisma.FieldRef<"SystemSetting", 'String'>
  readonly key: Prisma.FieldRef<"SystemSetting", 'String'>
  readonly value: Prisma.FieldRef<"SystemSetting", 'String'>
  readonly category: Prisma.FieldRef<"SystemSetting", 'String'>
  readonly description: Prisma.FieldRef<"SystemSetting", 'String'>
  readonly createdAt: Prisma.FieldRef<"SystemSetting", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"SystemSetting", 'DateTime'>
}
    

// Custom InputTypes
/**
 * SystemSetting findUnique
 */
export type SystemSettingFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SystemSetting
   */
  select?: Prisma.SystemSettingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SystemSetting
   */
  omit?: Prisma.SystemSettingOmit<ExtArgs> | null
  /**
   * Filter, which SystemSetting to fetch.
   */
  where: Prisma.SystemSettingWhereUniqueInput
}

/**
 * SystemSetting findUniqueOrThrow
 */
export type SystemSettingFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SystemSetting
   */
  select?: Prisma.SystemSettingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SystemSetting
   */
  omit?: Prisma.SystemSettingOmit<ExtArgs> | null
  /**
   * Filter, which SystemSetting to fetch.
   */
  where: Prisma.SystemSettingWhereUniqueInput
}

/**
 * SystemSetting findFirst
 */
export type SystemSettingFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SystemSetting
   */
  select?: Prisma.SystemSettingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SystemSetting
   */
  omit?: Prisma.SystemSettingOmit<ExtArgs> | null
  /**
   * Filter, which SystemSetting to fetch.
   */
  where?: Prisma.SystemSettingWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of SystemSettings to fetch.
   */
  orderBy?: Prisma.SystemSettingOrderByWithRelationInput | Prisma.SystemSettingOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for SystemSettings.
   */
  cursor?: Prisma.SystemSettingWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` SystemSettings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` SystemSettings.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of SystemSettings.
   */
  distinct?: Prisma.SystemSettingScalarFieldEnum | Prisma.SystemSettingScalarFieldEnum[]
}

/**
 * SystemSetting findFirstOrThrow
 */
export type SystemSettingFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SystemSetting
   */
  select?: Prisma.SystemSettingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SystemSetting
   */
  omit?: Prisma.SystemSettingOmit<ExtArgs> | null
  /**
   * Filter, which SystemSetting to fetch.
   */
  where?: Prisma.SystemSettingWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of SystemSettings to fetch.
   */
  orderBy?: Prisma.SystemSettingOrderByWithRelationInput | Prisma.SystemSettingOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for SystemSettings.
   */
  cursor?: Prisma.SystemSettingWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` SystemSettings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` SystemSettings.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of SystemSettings.
   */
  distinct?: Prisma.SystemSettingScalarFieldEnum | Prisma.SystemSettingScalarFieldEnum[]
}

/**
 * SystemSetting findMany
 */
export type SystemSettingFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SystemSetting
   */
  select?: Prisma.SystemSettingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SystemSetting
   */
  omit?: Prisma.SystemSettingOmit<ExtArgs> | null
  /**
   * Filter, which SystemSettings to fetch.
   */
  where?: Prisma.SystemSettingWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of SystemSettings to fetch.
   */
  orderBy?: Prisma.SystemSettingOrderByWithRelationInput | Prisma.SystemSettingOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing SystemSettings.
   */
  cursor?: Prisma.SystemSettingWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` SystemSettings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` SystemSettings.
   */
  skip?: number
  distinct?: Prisma.SystemSettingScalarFieldEnum | Prisma.SystemSettingScalarFieldEnum[]
}

/**
 * SystemSetting create
 */
export type SystemSettingCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SystemSetting
   */
  select?: Prisma.SystemSettingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SystemSetting
   */
  omit?: Prisma.SystemSettingOmit<ExtArgs> | null
  /**
   * The data needed to create a SystemSetting.
   */
  data: Prisma.XOR<Prisma.SystemSettingCreateInput, Prisma.SystemSettingUncheckedCreateInput>
}

/**
 * SystemSetting createMany
 */
export type SystemSettingCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many SystemSettings.
   */
  data: Prisma.SystemSettingCreateManyInput | Prisma.SystemSettingCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * SystemSetting createManyAndReturn
 */
export type SystemSettingCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SystemSetting
   */
  select?: Prisma.SystemSettingSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the SystemSetting
   */
  omit?: Prisma.SystemSettingOmit<ExtArgs> | null
  /**
   * The data used to create many SystemSettings.
   */
  data: Prisma.SystemSettingCreateManyInput | Prisma.SystemSettingCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * SystemSetting update
 */
export type SystemSettingUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SystemSetting
   */
  select?: Prisma.SystemSettingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SystemSetting
   */
  omit?: Prisma.SystemSettingOmit<ExtArgs> | null
  /**
   * The data needed to update a SystemSetting.
   */
  data: Prisma.XOR<Prisma.SystemSettingUpdateInput, Prisma.SystemSettingUncheckedUpdateInput>
  /**
   * Choose, which SystemSetting to update.
   */
  where: Prisma.SystemSettingWhereUniqueInput
}

/**
 * SystemSetting updateMany
 */
export type SystemSettingUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update SystemSettings.
   */
  data: Prisma.XOR<Prisma.SystemSettingUpdateManyMutationInput, Prisma.SystemSettingUncheckedUpdateManyInput>
  /**
   * Filter which SystemSettings to update
   */
  where?: Prisma.SystemSettingWhereInput
  /**
   * Limit how many SystemSettings to update.
   */
  limit?: number
}

/**
 * SystemSetting updateManyAndReturn
 */
export type SystemSettingUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SystemSetting
   */
  select?: Prisma.SystemSettingSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the SystemSetting
   */
  omit?: Prisma.SystemSettingOmit<ExtArgs> | null
  /**
   * The data used to update SystemSettings.
   */
  data: Prisma.XOR<Prisma.SystemSettingUpdateManyMutationInput, Prisma.SystemSettingUncheckedUpdateManyInput>
  /**
   * Filter which SystemSettings to update
   */
  where?: Prisma.SystemSettingWhereInput
  /**
   * Limit how many SystemSettings to update.
   */
  limit?: number
}

/**
 * SystemSetting upsert
 */
export type SystemSettingUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SystemSetting
   */
  select?: Prisma.SystemSettingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SystemSetting
   */
  omit?: Prisma.SystemSettingOmit<ExtArgs> | null
  /**
   * The filter to search for the SystemSetting to update in case it exists.
   */
  where: Prisma.SystemSettingWhereUniqueInput
  /**
   * In case the SystemSetting found by the `where` argument doesn't exist, create a new SystemSetting with this data.
   */
  create: Prisma.XOR<Prisma.SystemSettingCreateInput, Prisma.SystemSettingUncheckedCreateInput>
  /**
   * In case the SystemSetting was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.SystemSettingUpdateInput, Prisma.SystemSettingUncheckedUpdateInput>
}

/**
 * SystemSetting delete
 */
export type SystemSettingDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SystemSetting
   */
  select?: Prisma.SystemSettingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SystemSetting
   */
  omit?: Prisma.SystemSettingOmit<ExtArgs> | null
  /**
   * Filter which SystemSetting to delete.
   */
  where: Prisma.SystemSettingWhereUniqueInput
}

/**
 * SystemSetting deleteMany
 */
export type SystemSettingDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which SystemSettings to delete
   */
  where?: Prisma.SystemSettingWhereInput
  /**
   * Limit how many SystemSettings to delete.
   */
  limit?: number
}

/**
 * SystemSetting without action
 */
export type SystemSettingDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SystemSetting
   */
  select?: Prisma.SystemSettingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SystemSetting
   */
  omit?: Prisma.SystemSettingOmit<ExtArgs> | null
}
