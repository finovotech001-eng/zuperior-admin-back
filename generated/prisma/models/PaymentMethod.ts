
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `PaymentMethod` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model PaymentMethod
 * 
 */
export type PaymentMethodModel = runtime.Types.Result.DefaultSelection<Prisma.$PaymentMethodPayload>

export type AggregatePaymentMethod = {
  _count: PaymentMethodCountAggregateOutputType | null
  _min: PaymentMethodMinAggregateOutputType | null
  _max: PaymentMethodMaxAggregateOutputType | null
}

export type PaymentMethodMinAggregateOutputType = {
  id: string | null
  userId: string | null
  address: string | null
  currency: string | null
  network: string | null
  status: string | null
  submittedAt: Date | null
  approvedAt: Date | null
  approvedBy: string | null
  rejectionReason: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type PaymentMethodMaxAggregateOutputType = {
  id: string | null
  userId: string | null
  address: string | null
  currency: string | null
  network: string | null
  status: string | null
  submittedAt: Date | null
  approvedAt: Date | null
  approvedBy: string | null
  rejectionReason: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type PaymentMethodCountAggregateOutputType = {
  id: number
  userId: number
  address: number
  currency: number
  network: number
  status: number
  submittedAt: number
  approvedAt: number
  approvedBy: number
  rejectionReason: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type PaymentMethodMinAggregateInputType = {
  id?: true
  userId?: true
  address?: true
  currency?: true
  network?: true
  status?: true
  submittedAt?: true
  approvedAt?: true
  approvedBy?: true
  rejectionReason?: true
  createdAt?: true
  updatedAt?: true
}

export type PaymentMethodMaxAggregateInputType = {
  id?: true
  userId?: true
  address?: true
  currency?: true
  network?: true
  status?: true
  submittedAt?: true
  approvedAt?: true
  approvedBy?: true
  rejectionReason?: true
  createdAt?: true
  updatedAt?: true
}

export type PaymentMethodCountAggregateInputType = {
  id?: true
  userId?: true
  address?: true
  currency?: true
  network?: true
  status?: true
  submittedAt?: true
  approvedAt?: true
  approvedBy?: true
  rejectionReason?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type PaymentMethodAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PaymentMethod to aggregate.
   */
  where?: Prisma.PaymentMethodWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PaymentMethods to fetch.
   */
  orderBy?: Prisma.PaymentMethodOrderByWithRelationInput | Prisma.PaymentMethodOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.PaymentMethodWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PaymentMethods from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PaymentMethods.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned PaymentMethods
  **/
  _count?: true | PaymentMethodCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: PaymentMethodMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: PaymentMethodMaxAggregateInputType
}

export type GetPaymentMethodAggregateType<T extends PaymentMethodAggregateArgs> = {
      [P in keyof T & keyof AggregatePaymentMethod]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePaymentMethod[P]>
    : Prisma.GetScalarType<T[P], AggregatePaymentMethod[P]>
}




export type PaymentMethodGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PaymentMethodWhereInput
  orderBy?: Prisma.PaymentMethodOrderByWithAggregationInput | Prisma.PaymentMethodOrderByWithAggregationInput[]
  by: Prisma.PaymentMethodScalarFieldEnum[] | Prisma.PaymentMethodScalarFieldEnum
  having?: Prisma.PaymentMethodScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: PaymentMethodCountAggregateInputType | true
  _min?: PaymentMethodMinAggregateInputType
  _max?: PaymentMethodMaxAggregateInputType
}

export type PaymentMethodGroupByOutputType = {
  id: string
  userId: string
  address: string
  currency: string
  network: string
  status: string
  submittedAt: Date
  approvedAt: Date | null
  approvedBy: string | null
  rejectionReason: string | null
  createdAt: Date
  updatedAt: Date
  _count: PaymentMethodCountAggregateOutputType | null
  _min: PaymentMethodMinAggregateOutputType | null
  _max: PaymentMethodMaxAggregateOutputType | null
}

type GetPaymentMethodGroupByPayload<T extends PaymentMethodGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<PaymentMethodGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof PaymentMethodGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], PaymentMethodGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], PaymentMethodGroupByOutputType[P]>
      }
    >
  >



export type PaymentMethodWhereInput = {
  AND?: Prisma.PaymentMethodWhereInput | Prisma.PaymentMethodWhereInput[]
  OR?: Prisma.PaymentMethodWhereInput[]
  NOT?: Prisma.PaymentMethodWhereInput | Prisma.PaymentMethodWhereInput[]
  id?: Prisma.StringFilter<"PaymentMethod"> | string
  userId?: Prisma.StringFilter<"PaymentMethod"> | string
  address?: Prisma.StringFilter<"PaymentMethod"> | string
  currency?: Prisma.StringFilter<"PaymentMethod"> | string
  network?: Prisma.StringFilter<"PaymentMethod"> | string
  status?: Prisma.StringFilter<"PaymentMethod"> | string
  submittedAt?: Prisma.DateTimeFilter<"PaymentMethod"> | Date | string
  approvedAt?: Prisma.DateTimeNullableFilter<"PaymentMethod"> | Date | string | null
  approvedBy?: Prisma.StringNullableFilter<"PaymentMethod"> | string | null
  rejectionReason?: Prisma.StringNullableFilter<"PaymentMethod"> | string | null
  createdAt?: Prisma.DateTimeFilter<"PaymentMethod"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"PaymentMethod"> | Date | string
}

export type PaymentMethodOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  address?: Prisma.SortOrder
  currency?: Prisma.SortOrder
  network?: Prisma.SortOrder
  status?: Prisma.SortOrder
  submittedAt?: Prisma.SortOrder
  approvedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  approvedBy?: Prisma.SortOrderInput | Prisma.SortOrder
  rejectionReason?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PaymentMethodWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.PaymentMethodWhereInput | Prisma.PaymentMethodWhereInput[]
  OR?: Prisma.PaymentMethodWhereInput[]
  NOT?: Prisma.PaymentMethodWhereInput | Prisma.PaymentMethodWhereInput[]
  userId?: Prisma.StringFilter<"PaymentMethod"> | string
  address?: Prisma.StringFilter<"PaymentMethod"> | string
  currency?: Prisma.StringFilter<"PaymentMethod"> | string
  network?: Prisma.StringFilter<"PaymentMethod"> | string
  status?: Prisma.StringFilter<"PaymentMethod"> | string
  submittedAt?: Prisma.DateTimeFilter<"PaymentMethod"> | Date | string
  approvedAt?: Prisma.DateTimeNullableFilter<"PaymentMethod"> | Date | string | null
  approvedBy?: Prisma.StringNullableFilter<"PaymentMethod"> | string | null
  rejectionReason?: Prisma.StringNullableFilter<"PaymentMethod"> | string | null
  createdAt?: Prisma.DateTimeFilter<"PaymentMethod"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"PaymentMethod"> | Date | string
}, "id">

export type PaymentMethodOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  address?: Prisma.SortOrder
  currency?: Prisma.SortOrder
  network?: Prisma.SortOrder
  status?: Prisma.SortOrder
  submittedAt?: Prisma.SortOrder
  approvedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  approvedBy?: Prisma.SortOrderInput | Prisma.SortOrder
  rejectionReason?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.PaymentMethodCountOrderByAggregateInput
  _max?: Prisma.PaymentMethodMaxOrderByAggregateInput
  _min?: Prisma.PaymentMethodMinOrderByAggregateInput
}

export type PaymentMethodScalarWhereWithAggregatesInput = {
  AND?: Prisma.PaymentMethodScalarWhereWithAggregatesInput | Prisma.PaymentMethodScalarWhereWithAggregatesInput[]
  OR?: Prisma.PaymentMethodScalarWhereWithAggregatesInput[]
  NOT?: Prisma.PaymentMethodScalarWhereWithAggregatesInput | Prisma.PaymentMethodScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"PaymentMethod"> | string
  userId?: Prisma.StringWithAggregatesFilter<"PaymentMethod"> | string
  address?: Prisma.StringWithAggregatesFilter<"PaymentMethod"> | string
  currency?: Prisma.StringWithAggregatesFilter<"PaymentMethod"> | string
  network?: Prisma.StringWithAggregatesFilter<"PaymentMethod"> | string
  status?: Prisma.StringWithAggregatesFilter<"PaymentMethod"> | string
  submittedAt?: Prisma.DateTimeWithAggregatesFilter<"PaymentMethod"> | Date | string
  approvedAt?: Prisma.DateTimeNullableWithAggregatesFilter<"PaymentMethod"> | Date | string | null
  approvedBy?: Prisma.StringNullableWithAggregatesFilter<"PaymentMethod"> | string | null
  rejectionReason?: Prisma.StringNullableWithAggregatesFilter<"PaymentMethod"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"PaymentMethod"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"PaymentMethod"> | Date | string
}

export type PaymentMethodCreateInput = {
  id: string
  userId: string
  address: string
  currency?: string
  network?: string
  status?: string
  submittedAt?: Date | string
  approvedAt?: Date | string | null
  approvedBy?: string | null
  rejectionReason?: string | null
  createdAt?: Date | string
  updatedAt: Date | string
}

export type PaymentMethodUncheckedCreateInput = {
  id: string
  userId: string
  address: string
  currency?: string
  network?: string
  status?: string
  submittedAt?: Date | string
  approvedAt?: Date | string | null
  approvedBy?: string | null
  rejectionReason?: string | null
  createdAt?: Date | string
  updatedAt: Date | string
}

export type PaymentMethodUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  address?: Prisma.StringFieldUpdateOperationsInput | string
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  network?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  submittedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  approvedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  approvedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  rejectionReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PaymentMethodUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  address?: Prisma.StringFieldUpdateOperationsInput | string
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  network?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  submittedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  approvedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  approvedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  rejectionReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PaymentMethodCreateManyInput = {
  id: string
  userId: string
  address: string
  currency?: string
  network?: string
  status?: string
  submittedAt?: Date | string
  approvedAt?: Date | string | null
  approvedBy?: string | null
  rejectionReason?: string | null
  createdAt?: Date | string
  updatedAt: Date | string
}

export type PaymentMethodUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  address?: Prisma.StringFieldUpdateOperationsInput | string
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  network?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  submittedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  approvedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  approvedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  rejectionReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PaymentMethodUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  address?: Prisma.StringFieldUpdateOperationsInput | string
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  network?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  submittedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  approvedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  approvedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  rejectionReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PaymentMethodCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  address?: Prisma.SortOrder
  currency?: Prisma.SortOrder
  network?: Prisma.SortOrder
  status?: Prisma.SortOrder
  submittedAt?: Prisma.SortOrder
  approvedAt?: Prisma.SortOrder
  approvedBy?: Prisma.SortOrder
  rejectionReason?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PaymentMethodMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  address?: Prisma.SortOrder
  currency?: Prisma.SortOrder
  network?: Prisma.SortOrder
  status?: Prisma.SortOrder
  submittedAt?: Prisma.SortOrder
  approvedAt?: Prisma.SortOrder
  approvedBy?: Prisma.SortOrder
  rejectionReason?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PaymentMethodMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  address?: Prisma.SortOrder
  currency?: Prisma.SortOrder
  network?: Prisma.SortOrder
  status?: Prisma.SortOrder
  submittedAt?: Prisma.SortOrder
  approvedAt?: Prisma.SortOrder
  approvedBy?: Prisma.SortOrder
  rejectionReason?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}



export type PaymentMethodSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  address?: boolean
  currency?: boolean
  network?: boolean
  status?: boolean
  submittedAt?: boolean
  approvedAt?: boolean
  approvedBy?: boolean
  rejectionReason?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["paymentMethod"]>

export type PaymentMethodSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  address?: boolean
  currency?: boolean
  network?: boolean
  status?: boolean
  submittedAt?: boolean
  approvedAt?: boolean
  approvedBy?: boolean
  rejectionReason?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["paymentMethod"]>

export type PaymentMethodSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  address?: boolean
  currency?: boolean
  network?: boolean
  status?: boolean
  submittedAt?: boolean
  approvedAt?: boolean
  approvedBy?: boolean
  rejectionReason?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["paymentMethod"]>

export type PaymentMethodSelectScalar = {
  id?: boolean
  userId?: boolean
  address?: boolean
  currency?: boolean
  network?: boolean
  status?: boolean
  submittedAt?: boolean
  approvedAt?: boolean
  approvedBy?: boolean
  rejectionReason?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type PaymentMethodOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "userId" | "address" | "currency" | "network" | "status" | "submittedAt" | "approvedAt" | "approvedBy" | "rejectionReason" | "createdAt" | "updatedAt", ExtArgs["result"]["paymentMethod"]>

export type $PaymentMethodPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "PaymentMethod"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    userId: string
    address: string
    currency: string
    network: string
    status: string
    submittedAt: Date
    approvedAt: Date | null
    approvedBy: string | null
    rejectionReason: string | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["paymentMethod"]>
  composites: {}
}

export type PaymentMethodGetPayload<S extends boolean | null | undefined | PaymentMethodDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$PaymentMethodPayload, S>

export type PaymentMethodCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<PaymentMethodFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: PaymentMethodCountAggregateInputType | true
  }

export interface PaymentMethodDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PaymentMethod'], meta: { name: 'PaymentMethod' } }
  /**
   * Find zero or one PaymentMethod that matches the filter.
   * @param {PaymentMethodFindUniqueArgs} args - Arguments to find a PaymentMethod
   * @example
   * // Get one PaymentMethod
   * const paymentMethod = await prisma.paymentMethod.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends PaymentMethodFindUniqueArgs>(args: Prisma.SelectSubset<T, PaymentMethodFindUniqueArgs<ExtArgs>>): Prisma.Prisma__PaymentMethodClient<runtime.Types.Result.GetResult<Prisma.$PaymentMethodPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one PaymentMethod that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {PaymentMethodFindUniqueOrThrowArgs} args - Arguments to find a PaymentMethod
   * @example
   * // Get one PaymentMethod
   * const paymentMethod = await prisma.paymentMethod.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends PaymentMethodFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, PaymentMethodFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__PaymentMethodClient<runtime.Types.Result.GetResult<Prisma.$PaymentMethodPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PaymentMethod that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PaymentMethodFindFirstArgs} args - Arguments to find a PaymentMethod
   * @example
   * // Get one PaymentMethod
   * const paymentMethod = await prisma.paymentMethod.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends PaymentMethodFindFirstArgs>(args?: Prisma.SelectSubset<T, PaymentMethodFindFirstArgs<ExtArgs>>): Prisma.Prisma__PaymentMethodClient<runtime.Types.Result.GetResult<Prisma.$PaymentMethodPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PaymentMethod that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PaymentMethodFindFirstOrThrowArgs} args - Arguments to find a PaymentMethod
   * @example
   * // Get one PaymentMethod
   * const paymentMethod = await prisma.paymentMethod.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends PaymentMethodFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, PaymentMethodFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__PaymentMethodClient<runtime.Types.Result.GetResult<Prisma.$PaymentMethodPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more PaymentMethods that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PaymentMethodFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all PaymentMethods
   * const paymentMethods = await prisma.paymentMethod.findMany()
   * 
   * // Get first 10 PaymentMethods
   * const paymentMethods = await prisma.paymentMethod.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const paymentMethodWithIdOnly = await prisma.paymentMethod.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends PaymentMethodFindManyArgs>(args?: Prisma.SelectSubset<T, PaymentMethodFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PaymentMethodPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a PaymentMethod.
   * @param {PaymentMethodCreateArgs} args - Arguments to create a PaymentMethod.
   * @example
   * // Create one PaymentMethod
   * const PaymentMethod = await prisma.paymentMethod.create({
   *   data: {
   *     // ... data to create a PaymentMethod
   *   }
   * })
   * 
   */
  create<T extends PaymentMethodCreateArgs>(args: Prisma.SelectSubset<T, PaymentMethodCreateArgs<ExtArgs>>): Prisma.Prisma__PaymentMethodClient<runtime.Types.Result.GetResult<Prisma.$PaymentMethodPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many PaymentMethods.
   * @param {PaymentMethodCreateManyArgs} args - Arguments to create many PaymentMethods.
   * @example
   * // Create many PaymentMethods
   * const paymentMethod = await prisma.paymentMethod.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends PaymentMethodCreateManyArgs>(args?: Prisma.SelectSubset<T, PaymentMethodCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many PaymentMethods and returns the data saved in the database.
   * @param {PaymentMethodCreateManyAndReturnArgs} args - Arguments to create many PaymentMethods.
   * @example
   * // Create many PaymentMethods
   * const paymentMethod = await prisma.paymentMethod.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many PaymentMethods and only return the `id`
   * const paymentMethodWithIdOnly = await prisma.paymentMethod.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends PaymentMethodCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, PaymentMethodCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PaymentMethodPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a PaymentMethod.
   * @param {PaymentMethodDeleteArgs} args - Arguments to delete one PaymentMethod.
   * @example
   * // Delete one PaymentMethod
   * const PaymentMethod = await prisma.paymentMethod.delete({
   *   where: {
   *     // ... filter to delete one PaymentMethod
   *   }
   * })
   * 
   */
  delete<T extends PaymentMethodDeleteArgs>(args: Prisma.SelectSubset<T, PaymentMethodDeleteArgs<ExtArgs>>): Prisma.Prisma__PaymentMethodClient<runtime.Types.Result.GetResult<Prisma.$PaymentMethodPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one PaymentMethod.
   * @param {PaymentMethodUpdateArgs} args - Arguments to update one PaymentMethod.
   * @example
   * // Update one PaymentMethod
   * const paymentMethod = await prisma.paymentMethod.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends PaymentMethodUpdateArgs>(args: Prisma.SelectSubset<T, PaymentMethodUpdateArgs<ExtArgs>>): Prisma.Prisma__PaymentMethodClient<runtime.Types.Result.GetResult<Prisma.$PaymentMethodPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more PaymentMethods.
   * @param {PaymentMethodDeleteManyArgs} args - Arguments to filter PaymentMethods to delete.
   * @example
   * // Delete a few PaymentMethods
   * const { count } = await prisma.paymentMethod.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends PaymentMethodDeleteManyArgs>(args?: Prisma.SelectSubset<T, PaymentMethodDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PaymentMethods.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PaymentMethodUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many PaymentMethods
   * const paymentMethod = await prisma.paymentMethod.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends PaymentMethodUpdateManyArgs>(args: Prisma.SelectSubset<T, PaymentMethodUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PaymentMethods and returns the data updated in the database.
   * @param {PaymentMethodUpdateManyAndReturnArgs} args - Arguments to update many PaymentMethods.
   * @example
   * // Update many PaymentMethods
   * const paymentMethod = await prisma.paymentMethod.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more PaymentMethods and only return the `id`
   * const paymentMethodWithIdOnly = await prisma.paymentMethod.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends PaymentMethodUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, PaymentMethodUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PaymentMethodPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one PaymentMethod.
   * @param {PaymentMethodUpsertArgs} args - Arguments to update or create a PaymentMethod.
   * @example
   * // Update or create a PaymentMethod
   * const paymentMethod = await prisma.paymentMethod.upsert({
   *   create: {
   *     // ... data to create a PaymentMethod
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the PaymentMethod we want to update
   *   }
   * })
   */
  upsert<T extends PaymentMethodUpsertArgs>(args: Prisma.SelectSubset<T, PaymentMethodUpsertArgs<ExtArgs>>): Prisma.Prisma__PaymentMethodClient<runtime.Types.Result.GetResult<Prisma.$PaymentMethodPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of PaymentMethods.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PaymentMethodCountArgs} args - Arguments to filter PaymentMethods to count.
   * @example
   * // Count the number of PaymentMethods
   * const count = await prisma.paymentMethod.count({
   *   where: {
   *     // ... the filter for the PaymentMethods we want to count
   *   }
   * })
  **/
  count<T extends PaymentMethodCountArgs>(
    args?: Prisma.Subset<T, PaymentMethodCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], PaymentMethodCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a PaymentMethod.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PaymentMethodAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends PaymentMethodAggregateArgs>(args: Prisma.Subset<T, PaymentMethodAggregateArgs>): Prisma.PrismaPromise<GetPaymentMethodAggregateType<T>>

  /**
   * Group by PaymentMethod.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PaymentMethodGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends PaymentMethodGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: PaymentMethodGroupByArgs['orderBy'] }
      : { orderBy?: PaymentMethodGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, PaymentMethodGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPaymentMethodGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the PaymentMethod model
 */
readonly fields: PaymentMethodFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for PaymentMethod.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__PaymentMethodClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the PaymentMethod model
 */
export interface PaymentMethodFieldRefs {
  readonly id: Prisma.FieldRef<"PaymentMethod", 'String'>
  readonly userId: Prisma.FieldRef<"PaymentMethod", 'String'>
  readonly address: Prisma.FieldRef<"PaymentMethod", 'String'>
  readonly currency: Prisma.FieldRef<"PaymentMethod", 'String'>
  readonly network: Prisma.FieldRef<"PaymentMethod", 'String'>
  readonly status: Prisma.FieldRef<"PaymentMethod", 'String'>
  readonly submittedAt: Prisma.FieldRef<"PaymentMethod", 'DateTime'>
  readonly approvedAt: Prisma.FieldRef<"PaymentMethod", 'DateTime'>
  readonly approvedBy: Prisma.FieldRef<"PaymentMethod", 'String'>
  readonly rejectionReason: Prisma.FieldRef<"PaymentMethod", 'String'>
  readonly createdAt: Prisma.FieldRef<"PaymentMethod", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"PaymentMethod", 'DateTime'>
}
    

// Custom InputTypes
/**
 * PaymentMethod findUnique
 */
export type PaymentMethodFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PaymentMethod
   */
  select?: Prisma.PaymentMethodSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PaymentMethod
   */
  omit?: Prisma.PaymentMethodOmit<ExtArgs> | null
  /**
   * Filter, which PaymentMethod to fetch.
   */
  where: Prisma.PaymentMethodWhereUniqueInput
}

/**
 * PaymentMethod findUniqueOrThrow
 */
export type PaymentMethodFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PaymentMethod
   */
  select?: Prisma.PaymentMethodSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PaymentMethod
   */
  omit?: Prisma.PaymentMethodOmit<ExtArgs> | null
  /**
   * Filter, which PaymentMethod to fetch.
   */
  where: Prisma.PaymentMethodWhereUniqueInput
}

/**
 * PaymentMethod findFirst
 */
export type PaymentMethodFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PaymentMethod
   */
  select?: Prisma.PaymentMethodSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PaymentMethod
   */
  omit?: Prisma.PaymentMethodOmit<ExtArgs> | null
  /**
   * Filter, which PaymentMethod to fetch.
   */
  where?: Prisma.PaymentMethodWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PaymentMethods to fetch.
   */
  orderBy?: Prisma.PaymentMethodOrderByWithRelationInput | Prisma.PaymentMethodOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PaymentMethods.
   */
  cursor?: Prisma.PaymentMethodWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PaymentMethods from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PaymentMethods.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PaymentMethods.
   */
  distinct?: Prisma.PaymentMethodScalarFieldEnum | Prisma.PaymentMethodScalarFieldEnum[]
}

/**
 * PaymentMethod findFirstOrThrow
 */
export type PaymentMethodFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PaymentMethod
   */
  select?: Prisma.PaymentMethodSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PaymentMethod
   */
  omit?: Prisma.PaymentMethodOmit<ExtArgs> | null
  /**
   * Filter, which PaymentMethod to fetch.
   */
  where?: Prisma.PaymentMethodWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PaymentMethods to fetch.
   */
  orderBy?: Prisma.PaymentMethodOrderByWithRelationInput | Prisma.PaymentMethodOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PaymentMethods.
   */
  cursor?: Prisma.PaymentMethodWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PaymentMethods from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PaymentMethods.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PaymentMethods.
   */
  distinct?: Prisma.PaymentMethodScalarFieldEnum | Prisma.PaymentMethodScalarFieldEnum[]
}

/**
 * PaymentMethod findMany
 */
export type PaymentMethodFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PaymentMethod
   */
  select?: Prisma.PaymentMethodSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PaymentMethod
   */
  omit?: Prisma.PaymentMethodOmit<ExtArgs> | null
  /**
   * Filter, which PaymentMethods to fetch.
   */
  where?: Prisma.PaymentMethodWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PaymentMethods to fetch.
   */
  orderBy?: Prisma.PaymentMethodOrderByWithRelationInput | Prisma.PaymentMethodOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing PaymentMethods.
   */
  cursor?: Prisma.PaymentMethodWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PaymentMethods from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PaymentMethods.
   */
  skip?: number
  distinct?: Prisma.PaymentMethodScalarFieldEnum | Prisma.PaymentMethodScalarFieldEnum[]
}

/**
 * PaymentMethod create
 */
export type PaymentMethodCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PaymentMethod
   */
  select?: Prisma.PaymentMethodSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PaymentMethod
   */
  omit?: Prisma.PaymentMethodOmit<ExtArgs> | null
  /**
   * The data needed to create a PaymentMethod.
   */
  data: Prisma.XOR<Prisma.PaymentMethodCreateInput, Prisma.PaymentMethodUncheckedCreateInput>
}

/**
 * PaymentMethod createMany
 */
export type PaymentMethodCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many PaymentMethods.
   */
  data: Prisma.PaymentMethodCreateManyInput | Prisma.PaymentMethodCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * PaymentMethod createManyAndReturn
 */
export type PaymentMethodCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PaymentMethod
   */
  select?: Prisma.PaymentMethodSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PaymentMethod
   */
  omit?: Prisma.PaymentMethodOmit<ExtArgs> | null
  /**
   * The data used to create many PaymentMethods.
   */
  data: Prisma.PaymentMethodCreateManyInput | Prisma.PaymentMethodCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * PaymentMethod update
 */
export type PaymentMethodUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PaymentMethod
   */
  select?: Prisma.PaymentMethodSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PaymentMethod
   */
  omit?: Prisma.PaymentMethodOmit<ExtArgs> | null
  /**
   * The data needed to update a PaymentMethod.
   */
  data: Prisma.XOR<Prisma.PaymentMethodUpdateInput, Prisma.PaymentMethodUncheckedUpdateInput>
  /**
   * Choose, which PaymentMethod to update.
   */
  where: Prisma.PaymentMethodWhereUniqueInput
}

/**
 * PaymentMethod updateMany
 */
export type PaymentMethodUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update PaymentMethods.
   */
  data: Prisma.XOR<Prisma.PaymentMethodUpdateManyMutationInput, Prisma.PaymentMethodUncheckedUpdateManyInput>
  /**
   * Filter which PaymentMethods to update
   */
  where?: Prisma.PaymentMethodWhereInput
  /**
   * Limit how many PaymentMethods to update.
   */
  limit?: number
}

/**
 * PaymentMethod updateManyAndReturn
 */
export type PaymentMethodUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PaymentMethod
   */
  select?: Prisma.PaymentMethodSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PaymentMethod
   */
  omit?: Prisma.PaymentMethodOmit<ExtArgs> | null
  /**
   * The data used to update PaymentMethods.
   */
  data: Prisma.XOR<Prisma.PaymentMethodUpdateManyMutationInput, Prisma.PaymentMethodUncheckedUpdateManyInput>
  /**
   * Filter which PaymentMethods to update
   */
  where?: Prisma.PaymentMethodWhereInput
  /**
   * Limit how many PaymentMethods to update.
   */
  limit?: number
}

/**
 * PaymentMethod upsert
 */
export type PaymentMethodUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PaymentMethod
   */
  select?: Prisma.PaymentMethodSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PaymentMethod
   */
  omit?: Prisma.PaymentMethodOmit<ExtArgs> | null
  /**
   * The filter to search for the PaymentMethod to update in case it exists.
   */
  where: Prisma.PaymentMethodWhereUniqueInput
  /**
   * In case the PaymentMethod found by the `where` argument doesn't exist, create a new PaymentMethod with this data.
   */
  create: Prisma.XOR<Prisma.PaymentMethodCreateInput, Prisma.PaymentMethodUncheckedCreateInput>
  /**
   * In case the PaymentMethod was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.PaymentMethodUpdateInput, Prisma.PaymentMethodUncheckedUpdateInput>
}

/**
 * PaymentMethod delete
 */
export type PaymentMethodDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PaymentMethod
   */
  select?: Prisma.PaymentMethodSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PaymentMethod
   */
  omit?: Prisma.PaymentMethodOmit<ExtArgs> | null
  /**
   * Filter which PaymentMethod to delete.
   */
  where: Prisma.PaymentMethodWhereUniqueInput
}

/**
 * PaymentMethod deleteMany
 */
export type PaymentMethodDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PaymentMethods to delete
   */
  where?: Prisma.PaymentMethodWhereInput
  /**
   * Limit how many PaymentMethods to delete.
   */
  limit?: number
}

/**
 * PaymentMethod without action
 */
export type PaymentMethodDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PaymentMethod
   */
  select?: Prisma.PaymentMethodSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PaymentMethod
   */
  omit?: Prisma.PaymentMethodOmit<ExtArgs> | null
}
