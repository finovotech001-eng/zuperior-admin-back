
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Withdrawal` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model Withdrawal
 * 
 */
export type WithdrawalModel = runtime.Types.Result.DefaultSelection<Prisma.$WithdrawalPayload>

export type AggregateWithdrawal = {
  _count: WithdrawalCountAggregateOutputType | null
  _avg: WithdrawalAvgAggregateOutputType | null
  _sum: WithdrawalSumAggregateOutputType | null
  _min: WithdrawalMinAggregateOutputType | null
  _max: WithdrawalMaxAggregateOutputType | null
}

export type WithdrawalAvgAggregateOutputType = {
  amount: number | null
}

export type WithdrawalSumAggregateOutputType = {
  amount: number | null
}

export type WithdrawalMinAggregateOutputType = {
  id: string | null
  userId: string | null
  mt5AccountId: string | null
  amount: number | null
  method: string | null
  bankDetails: string | null
  cryptoAddress: string | null
  status: string | null
  rejectionReason: string | null
  approvedBy: string | null
  approvedAt: Date | null
  rejectedAt: Date | null
  createdAt: Date | null
  updatedAt: Date | null
  currency: string | null
  externalTransactionId: string | null
  paymentMethod: string | null
  processedAt: Date | null
  walletAddress: string | null
}

export type WithdrawalMaxAggregateOutputType = {
  id: string | null
  userId: string | null
  mt5AccountId: string | null
  amount: number | null
  method: string | null
  bankDetails: string | null
  cryptoAddress: string | null
  status: string | null
  rejectionReason: string | null
  approvedBy: string | null
  approvedAt: Date | null
  rejectedAt: Date | null
  createdAt: Date | null
  updatedAt: Date | null
  currency: string | null
  externalTransactionId: string | null
  paymentMethod: string | null
  processedAt: Date | null
  walletAddress: string | null
}

export type WithdrawalCountAggregateOutputType = {
  id: number
  userId: number
  mt5AccountId: number
  amount: number
  method: number
  bankDetails: number
  cryptoAddress: number
  status: number
  rejectionReason: number
  approvedBy: number
  approvedAt: number
  rejectedAt: number
  createdAt: number
  updatedAt: number
  currency: number
  externalTransactionId: number
  paymentMethod: number
  processedAt: number
  walletAddress: number
  _all: number
}


export type WithdrawalAvgAggregateInputType = {
  amount?: true
}

export type WithdrawalSumAggregateInputType = {
  amount?: true
}

export type WithdrawalMinAggregateInputType = {
  id?: true
  userId?: true
  mt5AccountId?: true
  amount?: true
  method?: true
  bankDetails?: true
  cryptoAddress?: true
  status?: true
  rejectionReason?: true
  approvedBy?: true
  approvedAt?: true
  rejectedAt?: true
  createdAt?: true
  updatedAt?: true
  currency?: true
  externalTransactionId?: true
  paymentMethod?: true
  processedAt?: true
  walletAddress?: true
}

export type WithdrawalMaxAggregateInputType = {
  id?: true
  userId?: true
  mt5AccountId?: true
  amount?: true
  method?: true
  bankDetails?: true
  cryptoAddress?: true
  status?: true
  rejectionReason?: true
  approvedBy?: true
  approvedAt?: true
  rejectedAt?: true
  createdAt?: true
  updatedAt?: true
  currency?: true
  externalTransactionId?: true
  paymentMethod?: true
  processedAt?: true
  walletAddress?: true
}

export type WithdrawalCountAggregateInputType = {
  id?: true
  userId?: true
  mt5AccountId?: true
  amount?: true
  method?: true
  bankDetails?: true
  cryptoAddress?: true
  status?: true
  rejectionReason?: true
  approvedBy?: true
  approvedAt?: true
  rejectedAt?: true
  createdAt?: true
  updatedAt?: true
  currency?: true
  externalTransactionId?: true
  paymentMethod?: true
  processedAt?: true
  walletAddress?: true
  _all?: true
}

export type WithdrawalAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Withdrawal to aggregate.
   */
  where?: Prisma.WithdrawalWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Withdrawals to fetch.
   */
  orderBy?: Prisma.WithdrawalOrderByWithRelationInput | Prisma.WithdrawalOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.WithdrawalWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Withdrawals from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Withdrawals.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Withdrawals
  **/
  _count?: true | WithdrawalCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: WithdrawalAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: WithdrawalSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: WithdrawalMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: WithdrawalMaxAggregateInputType
}

export type GetWithdrawalAggregateType<T extends WithdrawalAggregateArgs> = {
      [P in keyof T & keyof AggregateWithdrawal]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateWithdrawal[P]>
    : Prisma.GetScalarType<T[P], AggregateWithdrawal[P]>
}




export type WithdrawalGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.WithdrawalWhereInput
  orderBy?: Prisma.WithdrawalOrderByWithAggregationInput | Prisma.WithdrawalOrderByWithAggregationInput[]
  by: Prisma.WithdrawalScalarFieldEnum[] | Prisma.WithdrawalScalarFieldEnum
  having?: Prisma.WithdrawalScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: WithdrawalCountAggregateInputType | true
  _avg?: WithdrawalAvgAggregateInputType
  _sum?: WithdrawalSumAggregateInputType
  _min?: WithdrawalMinAggregateInputType
  _max?: WithdrawalMaxAggregateInputType
}

export type WithdrawalGroupByOutputType = {
  id: string
  userId: string
  mt5AccountId: string
  amount: number
  method: string
  bankDetails: string | null
  cryptoAddress: string | null
  status: string
  rejectionReason: string | null
  approvedBy: string | null
  approvedAt: Date | null
  rejectedAt: Date | null
  createdAt: Date
  updatedAt: Date
  currency: string
  externalTransactionId: string | null
  paymentMethod: string | null
  processedAt: Date | null
  walletAddress: string | null
  _count: WithdrawalCountAggregateOutputType | null
  _avg: WithdrawalAvgAggregateOutputType | null
  _sum: WithdrawalSumAggregateOutputType | null
  _min: WithdrawalMinAggregateOutputType | null
  _max: WithdrawalMaxAggregateOutputType | null
}

type GetWithdrawalGroupByPayload<T extends WithdrawalGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<WithdrawalGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof WithdrawalGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], WithdrawalGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], WithdrawalGroupByOutputType[P]>
      }
    >
  >



export type WithdrawalWhereInput = {
  AND?: Prisma.WithdrawalWhereInput | Prisma.WithdrawalWhereInput[]
  OR?: Prisma.WithdrawalWhereInput[]
  NOT?: Prisma.WithdrawalWhereInput | Prisma.WithdrawalWhereInput[]
  id?: Prisma.StringFilter<"Withdrawal"> | string
  userId?: Prisma.StringFilter<"Withdrawal"> | string
  mt5AccountId?: Prisma.StringFilter<"Withdrawal"> | string
  amount?: Prisma.FloatFilter<"Withdrawal"> | number
  method?: Prisma.StringFilter<"Withdrawal"> | string
  bankDetails?: Prisma.StringNullableFilter<"Withdrawal"> | string | null
  cryptoAddress?: Prisma.StringNullableFilter<"Withdrawal"> | string | null
  status?: Prisma.StringFilter<"Withdrawal"> | string
  rejectionReason?: Prisma.StringNullableFilter<"Withdrawal"> | string | null
  approvedBy?: Prisma.StringNullableFilter<"Withdrawal"> | string | null
  approvedAt?: Prisma.DateTimeNullableFilter<"Withdrawal"> | Date | string | null
  rejectedAt?: Prisma.DateTimeNullableFilter<"Withdrawal"> | Date | string | null
  createdAt?: Prisma.DateTimeFilter<"Withdrawal"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Withdrawal"> | Date | string
  currency?: Prisma.StringFilter<"Withdrawal"> | string
  externalTransactionId?: Prisma.StringNullableFilter<"Withdrawal"> | string | null
  paymentMethod?: Prisma.StringNullableFilter<"Withdrawal"> | string | null
  processedAt?: Prisma.DateTimeNullableFilter<"Withdrawal"> | Date | string | null
  walletAddress?: Prisma.StringNullableFilter<"Withdrawal"> | string | null
  Transaction?: Prisma.TransactionListRelationFilter
  User?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type WithdrawalOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  mt5AccountId?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  method?: Prisma.SortOrder
  bankDetails?: Prisma.SortOrderInput | Prisma.SortOrder
  cryptoAddress?: Prisma.SortOrderInput | Prisma.SortOrder
  status?: Prisma.SortOrder
  rejectionReason?: Prisma.SortOrderInput | Prisma.SortOrder
  approvedBy?: Prisma.SortOrderInput | Prisma.SortOrder
  approvedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  rejectedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  currency?: Prisma.SortOrder
  externalTransactionId?: Prisma.SortOrderInput | Prisma.SortOrder
  paymentMethod?: Prisma.SortOrderInput | Prisma.SortOrder
  processedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  walletAddress?: Prisma.SortOrderInput | Prisma.SortOrder
  Transaction?: Prisma.TransactionOrderByRelationAggregateInput
  User?: Prisma.UserOrderByWithRelationInput
}

export type WithdrawalWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.WithdrawalWhereInput | Prisma.WithdrawalWhereInput[]
  OR?: Prisma.WithdrawalWhereInput[]
  NOT?: Prisma.WithdrawalWhereInput | Prisma.WithdrawalWhereInput[]
  userId?: Prisma.StringFilter<"Withdrawal"> | string
  mt5AccountId?: Prisma.StringFilter<"Withdrawal"> | string
  amount?: Prisma.FloatFilter<"Withdrawal"> | number
  method?: Prisma.StringFilter<"Withdrawal"> | string
  bankDetails?: Prisma.StringNullableFilter<"Withdrawal"> | string | null
  cryptoAddress?: Prisma.StringNullableFilter<"Withdrawal"> | string | null
  status?: Prisma.StringFilter<"Withdrawal"> | string
  rejectionReason?: Prisma.StringNullableFilter<"Withdrawal"> | string | null
  approvedBy?: Prisma.StringNullableFilter<"Withdrawal"> | string | null
  approvedAt?: Prisma.DateTimeNullableFilter<"Withdrawal"> | Date | string | null
  rejectedAt?: Prisma.DateTimeNullableFilter<"Withdrawal"> | Date | string | null
  createdAt?: Prisma.DateTimeFilter<"Withdrawal"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Withdrawal"> | Date | string
  currency?: Prisma.StringFilter<"Withdrawal"> | string
  externalTransactionId?: Prisma.StringNullableFilter<"Withdrawal"> | string | null
  paymentMethod?: Prisma.StringNullableFilter<"Withdrawal"> | string | null
  processedAt?: Prisma.DateTimeNullableFilter<"Withdrawal"> | Date | string | null
  walletAddress?: Prisma.StringNullableFilter<"Withdrawal"> | string | null
  Transaction?: Prisma.TransactionListRelationFilter
  User?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "id">

export type WithdrawalOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  mt5AccountId?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  method?: Prisma.SortOrder
  bankDetails?: Prisma.SortOrderInput | Prisma.SortOrder
  cryptoAddress?: Prisma.SortOrderInput | Prisma.SortOrder
  status?: Prisma.SortOrder
  rejectionReason?: Prisma.SortOrderInput | Prisma.SortOrder
  approvedBy?: Prisma.SortOrderInput | Prisma.SortOrder
  approvedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  rejectedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  currency?: Prisma.SortOrder
  externalTransactionId?: Prisma.SortOrderInput | Prisma.SortOrder
  paymentMethod?: Prisma.SortOrderInput | Prisma.SortOrder
  processedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  walletAddress?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.WithdrawalCountOrderByAggregateInput
  _avg?: Prisma.WithdrawalAvgOrderByAggregateInput
  _max?: Prisma.WithdrawalMaxOrderByAggregateInput
  _min?: Prisma.WithdrawalMinOrderByAggregateInput
  _sum?: Prisma.WithdrawalSumOrderByAggregateInput
}

export type WithdrawalScalarWhereWithAggregatesInput = {
  AND?: Prisma.WithdrawalScalarWhereWithAggregatesInput | Prisma.WithdrawalScalarWhereWithAggregatesInput[]
  OR?: Prisma.WithdrawalScalarWhereWithAggregatesInput[]
  NOT?: Prisma.WithdrawalScalarWhereWithAggregatesInput | Prisma.WithdrawalScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Withdrawal"> | string
  userId?: Prisma.StringWithAggregatesFilter<"Withdrawal"> | string
  mt5AccountId?: Prisma.StringWithAggregatesFilter<"Withdrawal"> | string
  amount?: Prisma.FloatWithAggregatesFilter<"Withdrawal"> | number
  method?: Prisma.StringWithAggregatesFilter<"Withdrawal"> | string
  bankDetails?: Prisma.StringNullableWithAggregatesFilter<"Withdrawal"> | string | null
  cryptoAddress?: Prisma.StringNullableWithAggregatesFilter<"Withdrawal"> | string | null
  status?: Prisma.StringWithAggregatesFilter<"Withdrawal"> | string
  rejectionReason?: Prisma.StringNullableWithAggregatesFilter<"Withdrawal"> | string | null
  approvedBy?: Prisma.StringNullableWithAggregatesFilter<"Withdrawal"> | string | null
  approvedAt?: Prisma.DateTimeNullableWithAggregatesFilter<"Withdrawal"> | Date | string | null
  rejectedAt?: Prisma.DateTimeNullableWithAggregatesFilter<"Withdrawal"> | Date | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Withdrawal"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Withdrawal"> | Date | string
  currency?: Prisma.StringWithAggregatesFilter<"Withdrawal"> | string
  externalTransactionId?: Prisma.StringNullableWithAggregatesFilter<"Withdrawal"> | string | null
  paymentMethod?: Prisma.StringNullableWithAggregatesFilter<"Withdrawal"> | string | null
  processedAt?: Prisma.DateTimeNullableWithAggregatesFilter<"Withdrawal"> | Date | string | null
  walletAddress?: Prisma.StringNullableWithAggregatesFilter<"Withdrawal"> | string | null
}

export type WithdrawalCreateInput = {
  id: string
  mt5AccountId: string
  amount: number
  method: string
  bankDetails?: string | null
  cryptoAddress?: string | null
  status?: string
  rejectionReason?: string | null
  approvedBy?: string | null
  approvedAt?: Date | string | null
  rejectedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt: Date | string
  currency?: string
  externalTransactionId?: string | null
  paymentMethod?: string | null
  processedAt?: Date | string | null
  walletAddress?: string | null
  Transaction?: Prisma.TransactionCreateNestedManyWithoutWithdrawalInput
  User: Prisma.UserCreateNestedOneWithoutWithdrawalInput
}

export type WithdrawalUncheckedCreateInput = {
  id: string
  userId: string
  mt5AccountId: string
  amount: number
  method: string
  bankDetails?: string | null
  cryptoAddress?: string | null
  status?: string
  rejectionReason?: string | null
  approvedBy?: string | null
  approvedAt?: Date | string | null
  rejectedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt: Date | string
  currency?: string
  externalTransactionId?: string | null
  paymentMethod?: string | null
  processedAt?: Date | string | null
  walletAddress?: string | null
  Transaction?: Prisma.TransactionUncheckedCreateNestedManyWithoutWithdrawalInput
}

export type WithdrawalUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  mt5AccountId?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  method?: Prisma.StringFieldUpdateOperationsInput | string
  bankDetails?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  cryptoAddress?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  rejectionReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  approvedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  approvedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  rejectedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  externalTransactionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  paymentMethod?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  processedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  walletAddress?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  Transaction?: Prisma.TransactionUpdateManyWithoutWithdrawalNestedInput
  User?: Prisma.UserUpdateOneRequiredWithoutWithdrawalNestedInput
}

export type WithdrawalUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  mt5AccountId?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  method?: Prisma.StringFieldUpdateOperationsInput | string
  bankDetails?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  cryptoAddress?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  rejectionReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  approvedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  approvedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  rejectedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  externalTransactionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  paymentMethod?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  processedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  walletAddress?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  Transaction?: Prisma.TransactionUncheckedUpdateManyWithoutWithdrawalNestedInput
}

export type WithdrawalCreateManyInput = {
  id: string
  userId: string
  mt5AccountId: string
  amount: number
  method: string
  bankDetails?: string | null
  cryptoAddress?: string | null
  status?: string
  rejectionReason?: string | null
  approvedBy?: string | null
  approvedAt?: Date | string | null
  rejectedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt: Date | string
  currency?: string
  externalTransactionId?: string | null
  paymentMethod?: string | null
  processedAt?: Date | string | null
  walletAddress?: string | null
}

export type WithdrawalUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  mt5AccountId?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  method?: Prisma.StringFieldUpdateOperationsInput | string
  bankDetails?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  cryptoAddress?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  rejectionReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  approvedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  approvedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  rejectedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  externalTransactionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  paymentMethod?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  processedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  walletAddress?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type WithdrawalUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  mt5AccountId?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  method?: Prisma.StringFieldUpdateOperationsInput | string
  bankDetails?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  cryptoAddress?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  rejectionReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  approvedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  approvedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  rejectedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  externalTransactionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  paymentMethod?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  processedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  walletAddress?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type WithdrawalNullableScalarRelationFilter = {
  is?: Prisma.WithdrawalWhereInput | null
  isNot?: Prisma.WithdrawalWhereInput | null
}

export type WithdrawalListRelationFilter = {
  every?: Prisma.WithdrawalWhereInput
  some?: Prisma.WithdrawalWhereInput
  none?: Prisma.WithdrawalWhereInput
}

export type WithdrawalOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type WithdrawalCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  mt5AccountId?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  method?: Prisma.SortOrder
  bankDetails?: Prisma.SortOrder
  cryptoAddress?: Prisma.SortOrder
  status?: Prisma.SortOrder
  rejectionReason?: Prisma.SortOrder
  approvedBy?: Prisma.SortOrder
  approvedAt?: Prisma.SortOrder
  rejectedAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  currency?: Prisma.SortOrder
  externalTransactionId?: Prisma.SortOrder
  paymentMethod?: Prisma.SortOrder
  processedAt?: Prisma.SortOrder
  walletAddress?: Prisma.SortOrder
}

export type WithdrawalAvgOrderByAggregateInput = {
  amount?: Prisma.SortOrder
}

export type WithdrawalMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  mt5AccountId?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  method?: Prisma.SortOrder
  bankDetails?: Prisma.SortOrder
  cryptoAddress?: Prisma.SortOrder
  status?: Prisma.SortOrder
  rejectionReason?: Prisma.SortOrder
  approvedBy?: Prisma.SortOrder
  approvedAt?: Prisma.SortOrder
  rejectedAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  currency?: Prisma.SortOrder
  externalTransactionId?: Prisma.SortOrder
  paymentMethod?: Prisma.SortOrder
  processedAt?: Prisma.SortOrder
  walletAddress?: Prisma.SortOrder
}

export type WithdrawalMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  mt5AccountId?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  method?: Prisma.SortOrder
  bankDetails?: Prisma.SortOrder
  cryptoAddress?: Prisma.SortOrder
  status?: Prisma.SortOrder
  rejectionReason?: Prisma.SortOrder
  approvedBy?: Prisma.SortOrder
  approvedAt?: Prisma.SortOrder
  rejectedAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  currency?: Prisma.SortOrder
  externalTransactionId?: Prisma.SortOrder
  paymentMethod?: Prisma.SortOrder
  processedAt?: Prisma.SortOrder
  walletAddress?: Prisma.SortOrder
}

export type WithdrawalSumOrderByAggregateInput = {
  amount?: Prisma.SortOrder
}

export type WithdrawalCreateNestedOneWithoutTransactionInput = {
  create?: Prisma.XOR<Prisma.WithdrawalCreateWithoutTransactionInput, Prisma.WithdrawalUncheckedCreateWithoutTransactionInput>
  connectOrCreate?: Prisma.WithdrawalCreateOrConnectWithoutTransactionInput
  connect?: Prisma.WithdrawalWhereUniqueInput
}

export type WithdrawalUpdateOneWithoutTransactionNestedInput = {
  create?: Prisma.XOR<Prisma.WithdrawalCreateWithoutTransactionInput, Prisma.WithdrawalUncheckedCreateWithoutTransactionInput>
  connectOrCreate?: Prisma.WithdrawalCreateOrConnectWithoutTransactionInput
  upsert?: Prisma.WithdrawalUpsertWithoutTransactionInput
  disconnect?: Prisma.WithdrawalWhereInput | boolean
  delete?: Prisma.WithdrawalWhereInput | boolean
  connect?: Prisma.WithdrawalWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.WithdrawalUpdateToOneWithWhereWithoutTransactionInput, Prisma.WithdrawalUpdateWithoutTransactionInput>, Prisma.WithdrawalUncheckedUpdateWithoutTransactionInput>
}

export type WithdrawalCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.WithdrawalCreateWithoutUserInput, Prisma.WithdrawalUncheckedCreateWithoutUserInput> | Prisma.WithdrawalCreateWithoutUserInput[] | Prisma.WithdrawalUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.WithdrawalCreateOrConnectWithoutUserInput | Prisma.WithdrawalCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.WithdrawalCreateManyUserInputEnvelope
  connect?: Prisma.WithdrawalWhereUniqueInput | Prisma.WithdrawalWhereUniqueInput[]
}

export type WithdrawalUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.WithdrawalCreateWithoutUserInput, Prisma.WithdrawalUncheckedCreateWithoutUserInput> | Prisma.WithdrawalCreateWithoutUserInput[] | Prisma.WithdrawalUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.WithdrawalCreateOrConnectWithoutUserInput | Prisma.WithdrawalCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.WithdrawalCreateManyUserInputEnvelope
  connect?: Prisma.WithdrawalWhereUniqueInput | Prisma.WithdrawalWhereUniqueInput[]
}

export type WithdrawalUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.WithdrawalCreateWithoutUserInput, Prisma.WithdrawalUncheckedCreateWithoutUserInput> | Prisma.WithdrawalCreateWithoutUserInput[] | Prisma.WithdrawalUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.WithdrawalCreateOrConnectWithoutUserInput | Prisma.WithdrawalCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.WithdrawalUpsertWithWhereUniqueWithoutUserInput | Prisma.WithdrawalUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.WithdrawalCreateManyUserInputEnvelope
  set?: Prisma.WithdrawalWhereUniqueInput | Prisma.WithdrawalWhereUniqueInput[]
  disconnect?: Prisma.WithdrawalWhereUniqueInput | Prisma.WithdrawalWhereUniqueInput[]
  delete?: Prisma.WithdrawalWhereUniqueInput | Prisma.WithdrawalWhereUniqueInput[]
  connect?: Prisma.WithdrawalWhereUniqueInput | Prisma.WithdrawalWhereUniqueInput[]
  update?: Prisma.WithdrawalUpdateWithWhereUniqueWithoutUserInput | Prisma.WithdrawalUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.WithdrawalUpdateManyWithWhereWithoutUserInput | Prisma.WithdrawalUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.WithdrawalScalarWhereInput | Prisma.WithdrawalScalarWhereInput[]
}

export type WithdrawalUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.WithdrawalCreateWithoutUserInput, Prisma.WithdrawalUncheckedCreateWithoutUserInput> | Prisma.WithdrawalCreateWithoutUserInput[] | Prisma.WithdrawalUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.WithdrawalCreateOrConnectWithoutUserInput | Prisma.WithdrawalCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.WithdrawalUpsertWithWhereUniqueWithoutUserInput | Prisma.WithdrawalUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.WithdrawalCreateManyUserInputEnvelope
  set?: Prisma.WithdrawalWhereUniqueInput | Prisma.WithdrawalWhereUniqueInput[]
  disconnect?: Prisma.WithdrawalWhereUniqueInput | Prisma.WithdrawalWhereUniqueInput[]
  delete?: Prisma.WithdrawalWhereUniqueInput | Prisma.WithdrawalWhereUniqueInput[]
  connect?: Prisma.WithdrawalWhereUniqueInput | Prisma.WithdrawalWhereUniqueInput[]
  update?: Prisma.WithdrawalUpdateWithWhereUniqueWithoutUserInput | Prisma.WithdrawalUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.WithdrawalUpdateManyWithWhereWithoutUserInput | Prisma.WithdrawalUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.WithdrawalScalarWhereInput | Prisma.WithdrawalScalarWhereInput[]
}

export type WithdrawalCreateWithoutTransactionInput = {
  id: string
  mt5AccountId: string
  amount: number
  method: string
  bankDetails?: string | null
  cryptoAddress?: string | null
  status?: string
  rejectionReason?: string | null
  approvedBy?: string | null
  approvedAt?: Date | string | null
  rejectedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt: Date | string
  currency?: string
  externalTransactionId?: string | null
  paymentMethod?: string | null
  processedAt?: Date | string | null
  walletAddress?: string | null
  User: Prisma.UserCreateNestedOneWithoutWithdrawalInput
}

export type WithdrawalUncheckedCreateWithoutTransactionInput = {
  id: string
  userId: string
  mt5AccountId: string
  amount: number
  method: string
  bankDetails?: string | null
  cryptoAddress?: string | null
  status?: string
  rejectionReason?: string | null
  approvedBy?: string | null
  approvedAt?: Date | string | null
  rejectedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt: Date | string
  currency?: string
  externalTransactionId?: string | null
  paymentMethod?: string | null
  processedAt?: Date | string | null
  walletAddress?: string | null
}

export type WithdrawalCreateOrConnectWithoutTransactionInput = {
  where: Prisma.WithdrawalWhereUniqueInput
  create: Prisma.XOR<Prisma.WithdrawalCreateWithoutTransactionInput, Prisma.WithdrawalUncheckedCreateWithoutTransactionInput>
}

export type WithdrawalUpsertWithoutTransactionInput = {
  update: Prisma.XOR<Prisma.WithdrawalUpdateWithoutTransactionInput, Prisma.WithdrawalUncheckedUpdateWithoutTransactionInput>
  create: Prisma.XOR<Prisma.WithdrawalCreateWithoutTransactionInput, Prisma.WithdrawalUncheckedCreateWithoutTransactionInput>
  where?: Prisma.WithdrawalWhereInput
}

export type WithdrawalUpdateToOneWithWhereWithoutTransactionInput = {
  where?: Prisma.WithdrawalWhereInput
  data: Prisma.XOR<Prisma.WithdrawalUpdateWithoutTransactionInput, Prisma.WithdrawalUncheckedUpdateWithoutTransactionInput>
}

export type WithdrawalUpdateWithoutTransactionInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  mt5AccountId?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  method?: Prisma.StringFieldUpdateOperationsInput | string
  bankDetails?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  cryptoAddress?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  rejectionReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  approvedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  approvedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  rejectedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  externalTransactionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  paymentMethod?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  processedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  walletAddress?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  User?: Prisma.UserUpdateOneRequiredWithoutWithdrawalNestedInput
}

export type WithdrawalUncheckedUpdateWithoutTransactionInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  mt5AccountId?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  method?: Prisma.StringFieldUpdateOperationsInput | string
  bankDetails?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  cryptoAddress?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  rejectionReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  approvedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  approvedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  rejectedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  externalTransactionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  paymentMethod?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  processedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  walletAddress?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type WithdrawalCreateWithoutUserInput = {
  id: string
  mt5AccountId: string
  amount: number
  method: string
  bankDetails?: string | null
  cryptoAddress?: string | null
  status?: string
  rejectionReason?: string | null
  approvedBy?: string | null
  approvedAt?: Date | string | null
  rejectedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt: Date | string
  currency?: string
  externalTransactionId?: string | null
  paymentMethod?: string | null
  processedAt?: Date | string | null
  walletAddress?: string | null
  Transaction?: Prisma.TransactionCreateNestedManyWithoutWithdrawalInput
}

export type WithdrawalUncheckedCreateWithoutUserInput = {
  id: string
  mt5AccountId: string
  amount: number
  method: string
  bankDetails?: string | null
  cryptoAddress?: string | null
  status?: string
  rejectionReason?: string | null
  approvedBy?: string | null
  approvedAt?: Date | string | null
  rejectedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt: Date | string
  currency?: string
  externalTransactionId?: string | null
  paymentMethod?: string | null
  processedAt?: Date | string | null
  walletAddress?: string | null
  Transaction?: Prisma.TransactionUncheckedCreateNestedManyWithoutWithdrawalInput
}

export type WithdrawalCreateOrConnectWithoutUserInput = {
  where: Prisma.WithdrawalWhereUniqueInput
  create: Prisma.XOR<Prisma.WithdrawalCreateWithoutUserInput, Prisma.WithdrawalUncheckedCreateWithoutUserInput>
}

export type WithdrawalCreateManyUserInputEnvelope = {
  data: Prisma.WithdrawalCreateManyUserInput | Prisma.WithdrawalCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type WithdrawalUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.WithdrawalWhereUniqueInput
  update: Prisma.XOR<Prisma.WithdrawalUpdateWithoutUserInput, Prisma.WithdrawalUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.WithdrawalCreateWithoutUserInput, Prisma.WithdrawalUncheckedCreateWithoutUserInput>
}

export type WithdrawalUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.WithdrawalWhereUniqueInput
  data: Prisma.XOR<Prisma.WithdrawalUpdateWithoutUserInput, Prisma.WithdrawalUncheckedUpdateWithoutUserInput>
}

export type WithdrawalUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.WithdrawalScalarWhereInput
  data: Prisma.XOR<Prisma.WithdrawalUpdateManyMutationInput, Prisma.WithdrawalUncheckedUpdateManyWithoutUserInput>
}

export type WithdrawalScalarWhereInput = {
  AND?: Prisma.WithdrawalScalarWhereInput | Prisma.WithdrawalScalarWhereInput[]
  OR?: Prisma.WithdrawalScalarWhereInput[]
  NOT?: Prisma.WithdrawalScalarWhereInput | Prisma.WithdrawalScalarWhereInput[]
  id?: Prisma.StringFilter<"Withdrawal"> | string
  userId?: Prisma.StringFilter<"Withdrawal"> | string
  mt5AccountId?: Prisma.StringFilter<"Withdrawal"> | string
  amount?: Prisma.FloatFilter<"Withdrawal"> | number
  method?: Prisma.StringFilter<"Withdrawal"> | string
  bankDetails?: Prisma.StringNullableFilter<"Withdrawal"> | string | null
  cryptoAddress?: Prisma.StringNullableFilter<"Withdrawal"> | string | null
  status?: Prisma.StringFilter<"Withdrawal"> | string
  rejectionReason?: Prisma.StringNullableFilter<"Withdrawal"> | string | null
  approvedBy?: Prisma.StringNullableFilter<"Withdrawal"> | string | null
  approvedAt?: Prisma.DateTimeNullableFilter<"Withdrawal"> | Date | string | null
  rejectedAt?: Prisma.DateTimeNullableFilter<"Withdrawal"> | Date | string | null
  createdAt?: Prisma.DateTimeFilter<"Withdrawal"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Withdrawal"> | Date | string
  currency?: Prisma.StringFilter<"Withdrawal"> | string
  externalTransactionId?: Prisma.StringNullableFilter<"Withdrawal"> | string | null
  paymentMethod?: Prisma.StringNullableFilter<"Withdrawal"> | string | null
  processedAt?: Prisma.DateTimeNullableFilter<"Withdrawal"> | Date | string | null
  walletAddress?: Prisma.StringNullableFilter<"Withdrawal"> | string | null
}

export type WithdrawalCreateManyUserInput = {
  id: string
  mt5AccountId: string
  amount: number
  method: string
  bankDetails?: string | null
  cryptoAddress?: string | null
  status?: string
  rejectionReason?: string | null
  approvedBy?: string | null
  approvedAt?: Date | string | null
  rejectedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt: Date | string
  currency?: string
  externalTransactionId?: string | null
  paymentMethod?: string | null
  processedAt?: Date | string | null
  walletAddress?: string | null
}

export type WithdrawalUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  mt5AccountId?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  method?: Prisma.StringFieldUpdateOperationsInput | string
  bankDetails?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  cryptoAddress?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  rejectionReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  approvedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  approvedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  rejectedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  externalTransactionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  paymentMethod?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  processedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  walletAddress?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  Transaction?: Prisma.TransactionUpdateManyWithoutWithdrawalNestedInput
}

export type WithdrawalUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  mt5AccountId?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  method?: Prisma.StringFieldUpdateOperationsInput | string
  bankDetails?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  cryptoAddress?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  rejectionReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  approvedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  approvedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  rejectedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  externalTransactionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  paymentMethod?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  processedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  walletAddress?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  Transaction?: Prisma.TransactionUncheckedUpdateManyWithoutWithdrawalNestedInput
}

export type WithdrawalUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  mt5AccountId?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  method?: Prisma.StringFieldUpdateOperationsInput | string
  bankDetails?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  cryptoAddress?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  rejectionReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  approvedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  approvedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  rejectedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  externalTransactionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  paymentMethod?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  processedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  walletAddress?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}


/**
 * Count Type WithdrawalCountOutputType
 */

export type WithdrawalCountOutputType = {
  Transaction: number
}

export type WithdrawalCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Transaction?: boolean | WithdrawalCountOutputTypeCountTransactionArgs
}

/**
 * WithdrawalCountOutputType without action
 */
export type WithdrawalCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WithdrawalCountOutputType
   */
  select?: Prisma.WithdrawalCountOutputTypeSelect<ExtArgs> | null
}

/**
 * WithdrawalCountOutputType without action
 */
export type WithdrawalCountOutputTypeCountTransactionArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TransactionWhereInput
}


export type WithdrawalSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  mt5AccountId?: boolean
  amount?: boolean
  method?: boolean
  bankDetails?: boolean
  cryptoAddress?: boolean
  status?: boolean
  rejectionReason?: boolean
  approvedBy?: boolean
  approvedAt?: boolean
  rejectedAt?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  currency?: boolean
  externalTransactionId?: boolean
  paymentMethod?: boolean
  processedAt?: boolean
  walletAddress?: boolean
  Transaction?: boolean | Prisma.Withdrawal$TransactionArgs<ExtArgs>
  User?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  _count?: boolean | Prisma.WithdrawalCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["withdrawal"]>

export type WithdrawalSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  mt5AccountId?: boolean
  amount?: boolean
  method?: boolean
  bankDetails?: boolean
  cryptoAddress?: boolean
  status?: boolean
  rejectionReason?: boolean
  approvedBy?: boolean
  approvedAt?: boolean
  rejectedAt?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  currency?: boolean
  externalTransactionId?: boolean
  paymentMethod?: boolean
  processedAt?: boolean
  walletAddress?: boolean
  User?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["withdrawal"]>

export type WithdrawalSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  mt5AccountId?: boolean
  amount?: boolean
  method?: boolean
  bankDetails?: boolean
  cryptoAddress?: boolean
  status?: boolean
  rejectionReason?: boolean
  approvedBy?: boolean
  approvedAt?: boolean
  rejectedAt?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  currency?: boolean
  externalTransactionId?: boolean
  paymentMethod?: boolean
  processedAt?: boolean
  walletAddress?: boolean
  User?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["withdrawal"]>

export type WithdrawalSelectScalar = {
  id?: boolean
  userId?: boolean
  mt5AccountId?: boolean
  amount?: boolean
  method?: boolean
  bankDetails?: boolean
  cryptoAddress?: boolean
  status?: boolean
  rejectionReason?: boolean
  approvedBy?: boolean
  approvedAt?: boolean
  rejectedAt?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  currency?: boolean
  externalTransactionId?: boolean
  paymentMethod?: boolean
  processedAt?: boolean
  walletAddress?: boolean
}

export type WithdrawalOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "userId" | "mt5AccountId" | "amount" | "method" | "bankDetails" | "cryptoAddress" | "status" | "rejectionReason" | "approvedBy" | "approvedAt" | "rejectedAt" | "createdAt" | "updatedAt" | "currency" | "externalTransactionId" | "paymentMethod" | "processedAt" | "walletAddress", ExtArgs["result"]["withdrawal"]>
export type WithdrawalInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Transaction?: boolean | Prisma.Withdrawal$TransactionArgs<ExtArgs>
  User?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  _count?: boolean | Prisma.WithdrawalCountOutputTypeDefaultArgs<ExtArgs>
}
export type WithdrawalIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  User?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type WithdrawalIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  User?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $WithdrawalPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Withdrawal"
  objects: {
    Transaction: Prisma.$TransactionPayload<ExtArgs>[]
    User: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    userId: string
    mt5AccountId: string
    amount: number
    method: string
    bankDetails: string | null
    cryptoAddress: string | null
    status: string
    rejectionReason: string | null
    approvedBy: string | null
    approvedAt: Date | null
    rejectedAt: Date | null
    createdAt: Date
    updatedAt: Date
    currency: string
    externalTransactionId: string | null
    paymentMethod: string | null
    processedAt: Date | null
    walletAddress: string | null
  }, ExtArgs["result"]["withdrawal"]>
  composites: {}
}

export type WithdrawalGetPayload<S extends boolean | null | undefined | WithdrawalDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$WithdrawalPayload, S>

export type WithdrawalCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<WithdrawalFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: WithdrawalCountAggregateInputType | true
  }

export interface WithdrawalDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Withdrawal'], meta: { name: 'Withdrawal' } }
  /**
   * Find zero or one Withdrawal that matches the filter.
   * @param {WithdrawalFindUniqueArgs} args - Arguments to find a Withdrawal
   * @example
   * // Get one Withdrawal
   * const withdrawal = await prisma.withdrawal.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends WithdrawalFindUniqueArgs>(args: Prisma.SelectSubset<T, WithdrawalFindUniqueArgs<ExtArgs>>): Prisma.Prisma__WithdrawalClient<runtime.Types.Result.GetResult<Prisma.$WithdrawalPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Withdrawal that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {WithdrawalFindUniqueOrThrowArgs} args - Arguments to find a Withdrawal
   * @example
   * // Get one Withdrawal
   * const withdrawal = await prisma.withdrawal.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends WithdrawalFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, WithdrawalFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__WithdrawalClient<runtime.Types.Result.GetResult<Prisma.$WithdrawalPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Withdrawal that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WithdrawalFindFirstArgs} args - Arguments to find a Withdrawal
   * @example
   * // Get one Withdrawal
   * const withdrawal = await prisma.withdrawal.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends WithdrawalFindFirstArgs>(args?: Prisma.SelectSubset<T, WithdrawalFindFirstArgs<ExtArgs>>): Prisma.Prisma__WithdrawalClient<runtime.Types.Result.GetResult<Prisma.$WithdrawalPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Withdrawal that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WithdrawalFindFirstOrThrowArgs} args - Arguments to find a Withdrawal
   * @example
   * // Get one Withdrawal
   * const withdrawal = await prisma.withdrawal.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends WithdrawalFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, WithdrawalFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__WithdrawalClient<runtime.Types.Result.GetResult<Prisma.$WithdrawalPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Withdrawals that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WithdrawalFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Withdrawals
   * const withdrawals = await prisma.withdrawal.findMany()
   * 
   * // Get first 10 Withdrawals
   * const withdrawals = await prisma.withdrawal.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const withdrawalWithIdOnly = await prisma.withdrawal.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends WithdrawalFindManyArgs>(args?: Prisma.SelectSubset<T, WithdrawalFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WithdrawalPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Withdrawal.
   * @param {WithdrawalCreateArgs} args - Arguments to create a Withdrawal.
   * @example
   * // Create one Withdrawal
   * const Withdrawal = await prisma.withdrawal.create({
   *   data: {
   *     // ... data to create a Withdrawal
   *   }
   * })
   * 
   */
  create<T extends WithdrawalCreateArgs>(args: Prisma.SelectSubset<T, WithdrawalCreateArgs<ExtArgs>>): Prisma.Prisma__WithdrawalClient<runtime.Types.Result.GetResult<Prisma.$WithdrawalPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Withdrawals.
   * @param {WithdrawalCreateManyArgs} args - Arguments to create many Withdrawals.
   * @example
   * // Create many Withdrawals
   * const withdrawal = await prisma.withdrawal.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends WithdrawalCreateManyArgs>(args?: Prisma.SelectSubset<T, WithdrawalCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Withdrawals and returns the data saved in the database.
   * @param {WithdrawalCreateManyAndReturnArgs} args - Arguments to create many Withdrawals.
   * @example
   * // Create many Withdrawals
   * const withdrawal = await prisma.withdrawal.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Withdrawals and only return the `id`
   * const withdrawalWithIdOnly = await prisma.withdrawal.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends WithdrawalCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, WithdrawalCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WithdrawalPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Withdrawal.
   * @param {WithdrawalDeleteArgs} args - Arguments to delete one Withdrawal.
   * @example
   * // Delete one Withdrawal
   * const Withdrawal = await prisma.withdrawal.delete({
   *   where: {
   *     // ... filter to delete one Withdrawal
   *   }
   * })
   * 
   */
  delete<T extends WithdrawalDeleteArgs>(args: Prisma.SelectSubset<T, WithdrawalDeleteArgs<ExtArgs>>): Prisma.Prisma__WithdrawalClient<runtime.Types.Result.GetResult<Prisma.$WithdrawalPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Withdrawal.
   * @param {WithdrawalUpdateArgs} args - Arguments to update one Withdrawal.
   * @example
   * // Update one Withdrawal
   * const withdrawal = await prisma.withdrawal.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends WithdrawalUpdateArgs>(args: Prisma.SelectSubset<T, WithdrawalUpdateArgs<ExtArgs>>): Prisma.Prisma__WithdrawalClient<runtime.Types.Result.GetResult<Prisma.$WithdrawalPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Withdrawals.
   * @param {WithdrawalDeleteManyArgs} args - Arguments to filter Withdrawals to delete.
   * @example
   * // Delete a few Withdrawals
   * const { count } = await prisma.withdrawal.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends WithdrawalDeleteManyArgs>(args?: Prisma.SelectSubset<T, WithdrawalDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Withdrawals.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WithdrawalUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Withdrawals
   * const withdrawal = await prisma.withdrawal.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends WithdrawalUpdateManyArgs>(args: Prisma.SelectSubset<T, WithdrawalUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Withdrawals and returns the data updated in the database.
   * @param {WithdrawalUpdateManyAndReturnArgs} args - Arguments to update many Withdrawals.
   * @example
   * // Update many Withdrawals
   * const withdrawal = await prisma.withdrawal.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Withdrawals and only return the `id`
   * const withdrawalWithIdOnly = await prisma.withdrawal.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends WithdrawalUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, WithdrawalUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WithdrawalPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Withdrawal.
   * @param {WithdrawalUpsertArgs} args - Arguments to update or create a Withdrawal.
   * @example
   * // Update or create a Withdrawal
   * const withdrawal = await prisma.withdrawal.upsert({
   *   create: {
   *     // ... data to create a Withdrawal
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Withdrawal we want to update
   *   }
   * })
   */
  upsert<T extends WithdrawalUpsertArgs>(args: Prisma.SelectSubset<T, WithdrawalUpsertArgs<ExtArgs>>): Prisma.Prisma__WithdrawalClient<runtime.Types.Result.GetResult<Prisma.$WithdrawalPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Withdrawals.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WithdrawalCountArgs} args - Arguments to filter Withdrawals to count.
   * @example
   * // Count the number of Withdrawals
   * const count = await prisma.withdrawal.count({
   *   where: {
   *     // ... the filter for the Withdrawals we want to count
   *   }
   * })
  **/
  count<T extends WithdrawalCountArgs>(
    args?: Prisma.Subset<T, WithdrawalCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], WithdrawalCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Withdrawal.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WithdrawalAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends WithdrawalAggregateArgs>(args: Prisma.Subset<T, WithdrawalAggregateArgs>): Prisma.PrismaPromise<GetWithdrawalAggregateType<T>>

  /**
   * Group by Withdrawal.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WithdrawalGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends WithdrawalGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: WithdrawalGroupByArgs['orderBy'] }
      : { orderBy?: WithdrawalGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, WithdrawalGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWithdrawalGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Withdrawal model
 */
readonly fields: WithdrawalFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Withdrawal.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__WithdrawalClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  Transaction<T extends Prisma.Withdrawal$TransactionArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Withdrawal$TransactionArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  User<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Withdrawal model
 */
export interface WithdrawalFieldRefs {
  readonly id: Prisma.FieldRef<"Withdrawal", 'String'>
  readonly userId: Prisma.FieldRef<"Withdrawal", 'String'>
  readonly mt5AccountId: Prisma.FieldRef<"Withdrawal", 'String'>
  readonly amount: Prisma.FieldRef<"Withdrawal", 'Float'>
  readonly method: Prisma.FieldRef<"Withdrawal", 'String'>
  readonly bankDetails: Prisma.FieldRef<"Withdrawal", 'String'>
  readonly cryptoAddress: Prisma.FieldRef<"Withdrawal", 'String'>
  readonly status: Prisma.FieldRef<"Withdrawal", 'String'>
  readonly rejectionReason: Prisma.FieldRef<"Withdrawal", 'String'>
  readonly approvedBy: Prisma.FieldRef<"Withdrawal", 'String'>
  readonly approvedAt: Prisma.FieldRef<"Withdrawal", 'DateTime'>
  readonly rejectedAt: Prisma.FieldRef<"Withdrawal", 'DateTime'>
  readonly createdAt: Prisma.FieldRef<"Withdrawal", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Withdrawal", 'DateTime'>
  readonly currency: Prisma.FieldRef<"Withdrawal", 'String'>
  readonly externalTransactionId: Prisma.FieldRef<"Withdrawal", 'String'>
  readonly paymentMethod: Prisma.FieldRef<"Withdrawal", 'String'>
  readonly processedAt: Prisma.FieldRef<"Withdrawal", 'DateTime'>
  readonly walletAddress: Prisma.FieldRef<"Withdrawal", 'String'>
}
    

// Custom InputTypes
/**
 * Withdrawal findUnique
 */
export type WithdrawalFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Withdrawal
   */
  select?: Prisma.WithdrawalSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Withdrawal
   */
  omit?: Prisma.WithdrawalOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WithdrawalInclude<ExtArgs> | null
  /**
   * Filter, which Withdrawal to fetch.
   */
  where: Prisma.WithdrawalWhereUniqueInput
}

/**
 * Withdrawal findUniqueOrThrow
 */
export type WithdrawalFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Withdrawal
   */
  select?: Prisma.WithdrawalSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Withdrawal
   */
  omit?: Prisma.WithdrawalOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WithdrawalInclude<ExtArgs> | null
  /**
   * Filter, which Withdrawal to fetch.
   */
  where: Prisma.WithdrawalWhereUniqueInput
}

/**
 * Withdrawal findFirst
 */
export type WithdrawalFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Withdrawal
   */
  select?: Prisma.WithdrawalSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Withdrawal
   */
  omit?: Prisma.WithdrawalOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WithdrawalInclude<ExtArgs> | null
  /**
   * Filter, which Withdrawal to fetch.
   */
  where?: Prisma.WithdrawalWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Withdrawals to fetch.
   */
  orderBy?: Prisma.WithdrawalOrderByWithRelationInput | Prisma.WithdrawalOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Withdrawals.
   */
  cursor?: Prisma.WithdrawalWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Withdrawals from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Withdrawals.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Withdrawals.
   */
  distinct?: Prisma.WithdrawalScalarFieldEnum | Prisma.WithdrawalScalarFieldEnum[]
}

/**
 * Withdrawal findFirstOrThrow
 */
export type WithdrawalFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Withdrawal
   */
  select?: Prisma.WithdrawalSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Withdrawal
   */
  omit?: Prisma.WithdrawalOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WithdrawalInclude<ExtArgs> | null
  /**
   * Filter, which Withdrawal to fetch.
   */
  where?: Prisma.WithdrawalWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Withdrawals to fetch.
   */
  orderBy?: Prisma.WithdrawalOrderByWithRelationInput | Prisma.WithdrawalOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Withdrawals.
   */
  cursor?: Prisma.WithdrawalWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Withdrawals from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Withdrawals.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Withdrawals.
   */
  distinct?: Prisma.WithdrawalScalarFieldEnum | Prisma.WithdrawalScalarFieldEnum[]
}

/**
 * Withdrawal findMany
 */
export type WithdrawalFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Withdrawal
   */
  select?: Prisma.WithdrawalSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Withdrawal
   */
  omit?: Prisma.WithdrawalOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WithdrawalInclude<ExtArgs> | null
  /**
   * Filter, which Withdrawals to fetch.
   */
  where?: Prisma.WithdrawalWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Withdrawals to fetch.
   */
  orderBy?: Prisma.WithdrawalOrderByWithRelationInput | Prisma.WithdrawalOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Withdrawals.
   */
  cursor?: Prisma.WithdrawalWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Withdrawals from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Withdrawals.
   */
  skip?: number
  distinct?: Prisma.WithdrawalScalarFieldEnum | Prisma.WithdrawalScalarFieldEnum[]
}

/**
 * Withdrawal create
 */
export type WithdrawalCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Withdrawal
   */
  select?: Prisma.WithdrawalSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Withdrawal
   */
  omit?: Prisma.WithdrawalOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WithdrawalInclude<ExtArgs> | null
  /**
   * The data needed to create a Withdrawal.
   */
  data: Prisma.XOR<Prisma.WithdrawalCreateInput, Prisma.WithdrawalUncheckedCreateInput>
}

/**
 * Withdrawal createMany
 */
export type WithdrawalCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Withdrawals.
   */
  data: Prisma.WithdrawalCreateManyInput | Prisma.WithdrawalCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Withdrawal createManyAndReturn
 */
export type WithdrawalCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Withdrawal
   */
  select?: Prisma.WithdrawalSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Withdrawal
   */
  omit?: Prisma.WithdrawalOmit<ExtArgs> | null
  /**
   * The data used to create many Withdrawals.
   */
  data: Prisma.WithdrawalCreateManyInput | Prisma.WithdrawalCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WithdrawalIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Withdrawal update
 */
export type WithdrawalUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Withdrawal
   */
  select?: Prisma.WithdrawalSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Withdrawal
   */
  omit?: Prisma.WithdrawalOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WithdrawalInclude<ExtArgs> | null
  /**
   * The data needed to update a Withdrawal.
   */
  data: Prisma.XOR<Prisma.WithdrawalUpdateInput, Prisma.WithdrawalUncheckedUpdateInput>
  /**
   * Choose, which Withdrawal to update.
   */
  where: Prisma.WithdrawalWhereUniqueInput
}

/**
 * Withdrawal updateMany
 */
export type WithdrawalUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Withdrawals.
   */
  data: Prisma.XOR<Prisma.WithdrawalUpdateManyMutationInput, Prisma.WithdrawalUncheckedUpdateManyInput>
  /**
   * Filter which Withdrawals to update
   */
  where?: Prisma.WithdrawalWhereInput
  /**
   * Limit how many Withdrawals to update.
   */
  limit?: number
}

/**
 * Withdrawal updateManyAndReturn
 */
export type WithdrawalUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Withdrawal
   */
  select?: Prisma.WithdrawalSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Withdrawal
   */
  omit?: Prisma.WithdrawalOmit<ExtArgs> | null
  /**
   * The data used to update Withdrawals.
   */
  data: Prisma.XOR<Prisma.WithdrawalUpdateManyMutationInput, Prisma.WithdrawalUncheckedUpdateManyInput>
  /**
   * Filter which Withdrawals to update
   */
  where?: Prisma.WithdrawalWhereInput
  /**
   * Limit how many Withdrawals to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WithdrawalIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Withdrawal upsert
 */
export type WithdrawalUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Withdrawal
   */
  select?: Prisma.WithdrawalSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Withdrawal
   */
  omit?: Prisma.WithdrawalOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WithdrawalInclude<ExtArgs> | null
  /**
   * The filter to search for the Withdrawal to update in case it exists.
   */
  where: Prisma.WithdrawalWhereUniqueInput
  /**
   * In case the Withdrawal found by the `where` argument doesn't exist, create a new Withdrawal with this data.
   */
  create: Prisma.XOR<Prisma.WithdrawalCreateInput, Prisma.WithdrawalUncheckedCreateInput>
  /**
   * In case the Withdrawal was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.WithdrawalUpdateInput, Prisma.WithdrawalUncheckedUpdateInput>
}

/**
 * Withdrawal delete
 */
export type WithdrawalDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Withdrawal
   */
  select?: Prisma.WithdrawalSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Withdrawal
   */
  omit?: Prisma.WithdrawalOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WithdrawalInclude<ExtArgs> | null
  /**
   * Filter which Withdrawal to delete.
   */
  where: Prisma.WithdrawalWhereUniqueInput
}

/**
 * Withdrawal deleteMany
 */
export type WithdrawalDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Withdrawals to delete
   */
  where?: Prisma.WithdrawalWhereInput
  /**
   * Limit how many Withdrawals to delete.
   */
  limit?: number
}

/**
 * Withdrawal.Transaction
 */
export type Withdrawal$TransactionArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Transaction
   */
  select?: Prisma.TransactionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Transaction
   */
  omit?: Prisma.TransactionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransactionInclude<ExtArgs> | null
  where?: Prisma.TransactionWhereInput
  orderBy?: Prisma.TransactionOrderByWithRelationInput | Prisma.TransactionOrderByWithRelationInput[]
  cursor?: Prisma.TransactionWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.TransactionScalarFieldEnum | Prisma.TransactionScalarFieldEnum[]
}

/**
 * Withdrawal without action
 */
export type WithdrawalDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Withdrawal
   */
  select?: Prisma.WithdrawalSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Withdrawal
   */
  omit?: Prisma.WithdrawalOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WithdrawalInclude<ExtArgs> | null
}
