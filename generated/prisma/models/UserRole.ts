
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `UserRole` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model UserRole
 * 
 */
export type UserRoleModel = runtime.Types.Result.DefaultSelection<Prisma.$UserRolePayload>

export type AggregateUserRole = {
  _count: UserRoleCountAggregateOutputType | null
  _min: UserRoleMinAggregateOutputType | null
  _max: UserRoleMaxAggregateOutputType | null
}

export type UserRoleMinAggregateOutputType = {
  id: string | null
  userId: string | null
  roleId: string | null
  assignedAt: Date | null
  assignedBy: string | null
}

export type UserRoleMaxAggregateOutputType = {
  id: string | null
  userId: string | null
  roleId: string | null
  assignedAt: Date | null
  assignedBy: string | null
}

export type UserRoleCountAggregateOutputType = {
  id: number
  userId: number
  roleId: number
  assignedAt: number
  assignedBy: number
  _all: number
}


export type UserRoleMinAggregateInputType = {
  id?: true
  userId?: true
  roleId?: true
  assignedAt?: true
  assignedBy?: true
}

export type UserRoleMaxAggregateInputType = {
  id?: true
  userId?: true
  roleId?: true
  assignedAt?: true
  assignedBy?: true
}

export type UserRoleCountAggregateInputType = {
  id?: true
  userId?: true
  roleId?: true
  assignedAt?: true
  assignedBy?: true
  _all?: true
}

export type UserRoleAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which UserRole to aggregate.
   */
  where?: Prisma.UserRoleWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserRoles to fetch.
   */
  orderBy?: Prisma.UserRoleOrderByWithRelationInput | Prisma.UserRoleOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.UserRoleWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserRoles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserRoles.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned UserRoles
  **/
  _count?: true | UserRoleCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: UserRoleMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: UserRoleMaxAggregateInputType
}

export type GetUserRoleAggregateType<T extends UserRoleAggregateArgs> = {
      [P in keyof T & keyof AggregateUserRole]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateUserRole[P]>
    : Prisma.GetScalarType<T[P], AggregateUserRole[P]>
}




export type UserRoleGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.UserRoleWhereInput
  orderBy?: Prisma.UserRoleOrderByWithAggregationInput | Prisma.UserRoleOrderByWithAggregationInput[]
  by: Prisma.UserRoleScalarFieldEnum[] | Prisma.UserRoleScalarFieldEnum
  having?: Prisma.UserRoleScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: UserRoleCountAggregateInputType | true
  _min?: UserRoleMinAggregateInputType
  _max?: UserRoleMaxAggregateInputType
}

export type UserRoleGroupByOutputType = {
  id: string
  userId: string
  roleId: string
  assignedAt: Date
  assignedBy: string
  _count: UserRoleCountAggregateOutputType | null
  _min: UserRoleMinAggregateOutputType | null
  _max: UserRoleMaxAggregateOutputType | null
}

type GetUserRoleGroupByPayload<T extends UserRoleGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<UserRoleGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof UserRoleGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], UserRoleGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], UserRoleGroupByOutputType[P]>
      }
    >
  >



export type UserRoleWhereInput = {
  AND?: Prisma.UserRoleWhereInput | Prisma.UserRoleWhereInput[]
  OR?: Prisma.UserRoleWhereInput[]
  NOT?: Prisma.UserRoleWhereInput | Prisma.UserRoleWhereInput[]
  id?: Prisma.StringFilter<"UserRole"> | string
  userId?: Prisma.StringFilter<"UserRole"> | string
  roleId?: Prisma.StringFilter<"UserRole"> | string
  assignedAt?: Prisma.DateTimeFilter<"UserRole"> | Date | string
  assignedBy?: Prisma.StringFilter<"UserRole"> | string
}

export type UserRoleOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  roleId?: Prisma.SortOrder
  assignedAt?: Prisma.SortOrder
  assignedBy?: Prisma.SortOrder
}

export type UserRoleWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.UserRoleWhereInput | Prisma.UserRoleWhereInput[]
  OR?: Prisma.UserRoleWhereInput[]
  NOT?: Prisma.UserRoleWhereInput | Prisma.UserRoleWhereInput[]
  userId?: Prisma.StringFilter<"UserRole"> | string
  roleId?: Prisma.StringFilter<"UserRole"> | string
  assignedAt?: Prisma.DateTimeFilter<"UserRole"> | Date | string
  assignedBy?: Prisma.StringFilter<"UserRole"> | string
}, "id">

export type UserRoleOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  roleId?: Prisma.SortOrder
  assignedAt?: Prisma.SortOrder
  assignedBy?: Prisma.SortOrder
  _count?: Prisma.UserRoleCountOrderByAggregateInput
  _max?: Prisma.UserRoleMaxOrderByAggregateInput
  _min?: Prisma.UserRoleMinOrderByAggregateInput
}

export type UserRoleScalarWhereWithAggregatesInput = {
  AND?: Prisma.UserRoleScalarWhereWithAggregatesInput | Prisma.UserRoleScalarWhereWithAggregatesInput[]
  OR?: Prisma.UserRoleScalarWhereWithAggregatesInput[]
  NOT?: Prisma.UserRoleScalarWhereWithAggregatesInput | Prisma.UserRoleScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"UserRole"> | string
  userId?: Prisma.StringWithAggregatesFilter<"UserRole"> | string
  roleId?: Prisma.StringWithAggregatesFilter<"UserRole"> | string
  assignedAt?: Prisma.DateTimeWithAggregatesFilter<"UserRole"> | Date | string
  assignedBy?: Prisma.StringWithAggregatesFilter<"UserRole"> | string
}

export type UserRoleCreateInput = {
  id: string
  userId: string
  roleId: string
  assignedAt?: Date | string
  assignedBy: string
}

export type UserRoleUncheckedCreateInput = {
  id: string
  userId: string
  roleId: string
  assignedAt?: Date | string
  assignedBy: string
}

export type UserRoleUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  roleId?: Prisma.StringFieldUpdateOperationsInput | string
  assignedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  assignedBy?: Prisma.StringFieldUpdateOperationsInput | string
}

export type UserRoleUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  roleId?: Prisma.StringFieldUpdateOperationsInput | string
  assignedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  assignedBy?: Prisma.StringFieldUpdateOperationsInput | string
}

export type UserRoleCreateManyInput = {
  id: string
  userId: string
  roleId: string
  assignedAt?: Date | string
  assignedBy: string
}

export type UserRoleUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  roleId?: Prisma.StringFieldUpdateOperationsInput | string
  assignedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  assignedBy?: Prisma.StringFieldUpdateOperationsInput | string
}

export type UserRoleUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  roleId?: Prisma.StringFieldUpdateOperationsInput | string
  assignedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  assignedBy?: Prisma.StringFieldUpdateOperationsInput | string
}

export type UserRoleCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  roleId?: Prisma.SortOrder
  assignedAt?: Prisma.SortOrder
  assignedBy?: Prisma.SortOrder
}

export type UserRoleMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  roleId?: Prisma.SortOrder
  assignedAt?: Prisma.SortOrder
  assignedBy?: Prisma.SortOrder
}

export type UserRoleMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  roleId?: Prisma.SortOrder
  assignedAt?: Prisma.SortOrder
  assignedBy?: Prisma.SortOrder
}



export type UserRoleSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  roleId?: boolean
  assignedAt?: boolean
  assignedBy?: boolean
}, ExtArgs["result"]["userRole"]>

export type UserRoleSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  roleId?: boolean
  assignedAt?: boolean
  assignedBy?: boolean
}, ExtArgs["result"]["userRole"]>

export type UserRoleSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  roleId?: boolean
  assignedAt?: boolean
  assignedBy?: boolean
}, ExtArgs["result"]["userRole"]>

export type UserRoleSelectScalar = {
  id?: boolean
  userId?: boolean
  roleId?: boolean
  assignedAt?: boolean
  assignedBy?: boolean
}

export type UserRoleOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "userId" | "roleId" | "assignedAt" | "assignedBy", ExtArgs["result"]["userRole"]>

export type $UserRolePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "UserRole"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    userId: string
    roleId: string
    assignedAt: Date
    assignedBy: string
  }, ExtArgs["result"]["userRole"]>
  composites: {}
}

export type UserRoleGetPayload<S extends boolean | null | undefined | UserRoleDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$UserRolePayload, S>

export type UserRoleCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<UserRoleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: UserRoleCountAggregateInputType | true
  }

export interface UserRoleDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserRole'], meta: { name: 'UserRole' } }
  /**
   * Find zero or one UserRole that matches the filter.
   * @param {UserRoleFindUniqueArgs} args - Arguments to find a UserRole
   * @example
   * // Get one UserRole
   * const userRole = await prisma.userRole.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends UserRoleFindUniqueArgs>(args: Prisma.SelectSubset<T, UserRoleFindUniqueArgs<ExtArgs>>): Prisma.Prisma__UserRoleClient<runtime.Types.Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one UserRole that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {UserRoleFindUniqueOrThrowArgs} args - Arguments to find a UserRole
   * @example
   * // Get one UserRole
   * const userRole = await prisma.userRole.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends UserRoleFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, UserRoleFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__UserRoleClient<runtime.Types.Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first UserRole that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserRoleFindFirstArgs} args - Arguments to find a UserRole
   * @example
   * // Get one UserRole
   * const userRole = await prisma.userRole.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends UserRoleFindFirstArgs>(args?: Prisma.SelectSubset<T, UserRoleFindFirstArgs<ExtArgs>>): Prisma.Prisma__UserRoleClient<runtime.Types.Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first UserRole that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserRoleFindFirstOrThrowArgs} args - Arguments to find a UserRole
   * @example
   * // Get one UserRole
   * const userRole = await prisma.userRole.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends UserRoleFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, UserRoleFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__UserRoleClient<runtime.Types.Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more UserRoles that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserRoleFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all UserRoles
   * const userRoles = await prisma.userRole.findMany()
   * 
   * // Get first 10 UserRoles
   * const userRoles = await prisma.userRole.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const userRoleWithIdOnly = await prisma.userRole.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends UserRoleFindManyArgs>(args?: Prisma.SelectSubset<T, UserRoleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a UserRole.
   * @param {UserRoleCreateArgs} args - Arguments to create a UserRole.
   * @example
   * // Create one UserRole
   * const UserRole = await prisma.userRole.create({
   *   data: {
   *     // ... data to create a UserRole
   *   }
   * })
   * 
   */
  create<T extends UserRoleCreateArgs>(args: Prisma.SelectSubset<T, UserRoleCreateArgs<ExtArgs>>): Prisma.Prisma__UserRoleClient<runtime.Types.Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many UserRoles.
   * @param {UserRoleCreateManyArgs} args - Arguments to create many UserRoles.
   * @example
   * // Create many UserRoles
   * const userRole = await prisma.userRole.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends UserRoleCreateManyArgs>(args?: Prisma.SelectSubset<T, UserRoleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many UserRoles and returns the data saved in the database.
   * @param {UserRoleCreateManyAndReturnArgs} args - Arguments to create many UserRoles.
   * @example
   * // Create many UserRoles
   * const userRole = await prisma.userRole.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many UserRoles and only return the `id`
   * const userRoleWithIdOnly = await prisma.userRole.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends UserRoleCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, UserRoleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a UserRole.
   * @param {UserRoleDeleteArgs} args - Arguments to delete one UserRole.
   * @example
   * // Delete one UserRole
   * const UserRole = await prisma.userRole.delete({
   *   where: {
   *     // ... filter to delete one UserRole
   *   }
   * })
   * 
   */
  delete<T extends UserRoleDeleteArgs>(args: Prisma.SelectSubset<T, UserRoleDeleteArgs<ExtArgs>>): Prisma.Prisma__UserRoleClient<runtime.Types.Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one UserRole.
   * @param {UserRoleUpdateArgs} args - Arguments to update one UserRole.
   * @example
   * // Update one UserRole
   * const userRole = await prisma.userRole.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends UserRoleUpdateArgs>(args: Prisma.SelectSubset<T, UserRoleUpdateArgs<ExtArgs>>): Prisma.Prisma__UserRoleClient<runtime.Types.Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more UserRoles.
   * @param {UserRoleDeleteManyArgs} args - Arguments to filter UserRoles to delete.
   * @example
   * // Delete a few UserRoles
   * const { count } = await prisma.userRole.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends UserRoleDeleteManyArgs>(args?: Prisma.SelectSubset<T, UserRoleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more UserRoles.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserRoleUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many UserRoles
   * const userRole = await prisma.userRole.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends UserRoleUpdateManyArgs>(args: Prisma.SelectSubset<T, UserRoleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more UserRoles and returns the data updated in the database.
   * @param {UserRoleUpdateManyAndReturnArgs} args - Arguments to update many UserRoles.
   * @example
   * // Update many UserRoles
   * const userRole = await prisma.userRole.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more UserRoles and only return the `id`
   * const userRoleWithIdOnly = await prisma.userRole.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends UserRoleUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, UserRoleUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one UserRole.
   * @param {UserRoleUpsertArgs} args - Arguments to update or create a UserRole.
   * @example
   * // Update or create a UserRole
   * const userRole = await prisma.userRole.upsert({
   *   create: {
   *     // ... data to create a UserRole
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the UserRole we want to update
   *   }
   * })
   */
  upsert<T extends UserRoleUpsertArgs>(args: Prisma.SelectSubset<T, UserRoleUpsertArgs<ExtArgs>>): Prisma.Prisma__UserRoleClient<runtime.Types.Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of UserRoles.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserRoleCountArgs} args - Arguments to filter UserRoles to count.
   * @example
   * // Count the number of UserRoles
   * const count = await prisma.userRole.count({
   *   where: {
   *     // ... the filter for the UserRoles we want to count
   *   }
   * })
  **/
  count<T extends UserRoleCountArgs>(
    args?: Prisma.Subset<T, UserRoleCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], UserRoleCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a UserRole.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserRoleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends UserRoleAggregateArgs>(args: Prisma.Subset<T, UserRoleAggregateArgs>): Prisma.PrismaPromise<GetUserRoleAggregateType<T>>

  /**
   * Group by UserRole.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserRoleGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends UserRoleGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: UserRoleGroupByArgs['orderBy'] }
      : { orderBy?: UserRoleGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, UserRoleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserRoleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the UserRole model
 */
readonly fields: UserRoleFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for UserRole.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__UserRoleClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the UserRole model
 */
export interface UserRoleFieldRefs {
  readonly id: Prisma.FieldRef<"UserRole", 'String'>
  readonly userId: Prisma.FieldRef<"UserRole", 'String'>
  readonly roleId: Prisma.FieldRef<"UserRole", 'String'>
  readonly assignedAt: Prisma.FieldRef<"UserRole", 'DateTime'>
  readonly assignedBy: Prisma.FieldRef<"UserRole", 'String'>
}
    

// Custom InputTypes
/**
 * UserRole findUnique
 */
export type UserRoleFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserRole
   */
  select?: Prisma.UserRoleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserRole
   */
  omit?: Prisma.UserRoleOmit<ExtArgs> | null
  /**
   * Filter, which UserRole to fetch.
   */
  where: Prisma.UserRoleWhereUniqueInput
}

/**
 * UserRole findUniqueOrThrow
 */
export type UserRoleFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserRole
   */
  select?: Prisma.UserRoleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserRole
   */
  omit?: Prisma.UserRoleOmit<ExtArgs> | null
  /**
   * Filter, which UserRole to fetch.
   */
  where: Prisma.UserRoleWhereUniqueInput
}

/**
 * UserRole findFirst
 */
export type UserRoleFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserRole
   */
  select?: Prisma.UserRoleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserRole
   */
  omit?: Prisma.UserRoleOmit<ExtArgs> | null
  /**
   * Filter, which UserRole to fetch.
   */
  where?: Prisma.UserRoleWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserRoles to fetch.
   */
  orderBy?: Prisma.UserRoleOrderByWithRelationInput | Prisma.UserRoleOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for UserRoles.
   */
  cursor?: Prisma.UserRoleWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserRoles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserRoles.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of UserRoles.
   */
  distinct?: Prisma.UserRoleScalarFieldEnum | Prisma.UserRoleScalarFieldEnum[]
}

/**
 * UserRole findFirstOrThrow
 */
export type UserRoleFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserRole
   */
  select?: Prisma.UserRoleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserRole
   */
  omit?: Prisma.UserRoleOmit<ExtArgs> | null
  /**
   * Filter, which UserRole to fetch.
   */
  where?: Prisma.UserRoleWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserRoles to fetch.
   */
  orderBy?: Prisma.UserRoleOrderByWithRelationInput | Prisma.UserRoleOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for UserRoles.
   */
  cursor?: Prisma.UserRoleWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserRoles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserRoles.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of UserRoles.
   */
  distinct?: Prisma.UserRoleScalarFieldEnum | Prisma.UserRoleScalarFieldEnum[]
}

/**
 * UserRole findMany
 */
export type UserRoleFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserRole
   */
  select?: Prisma.UserRoleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserRole
   */
  omit?: Prisma.UserRoleOmit<ExtArgs> | null
  /**
   * Filter, which UserRoles to fetch.
   */
  where?: Prisma.UserRoleWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserRoles to fetch.
   */
  orderBy?: Prisma.UserRoleOrderByWithRelationInput | Prisma.UserRoleOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing UserRoles.
   */
  cursor?: Prisma.UserRoleWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserRoles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserRoles.
   */
  skip?: number
  distinct?: Prisma.UserRoleScalarFieldEnum | Prisma.UserRoleScalarFieldEnum[]
}

/**
 * UserRole create
 */
export type UserRoleCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserRole
   */
  select?: Prisma.UserRoleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserRole
   */
  omit?: Prisma.UserRoleOmit<ExtArgs> | null
  /**
   * The data needed to create a UserRole.
   */
  data: Prisma.XOR<Prisma.UserRoleCreateInput, Prisma.UserRoleUncheckedCreateInput>
}

/**
 * UserRole createMany
 */
export type UserRoleCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many UserRoles.
   */
  data: Prisma.UserRoleCreateManyInput | Prisma.UserRoleCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * UserRole createManyAndReturn
 */
export type UserRoleCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserRole
   */
  select?: Prisma.UserRoleSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the UserRole
   */
  omit?: Prisma.UserRoleOmit<ExtArgs> | null
  /**
   * The data used to create many UserRoles.
   */
  data: Prisma.UserRoleCreateManyInput | Prisma.UserRoleCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * UserRole update
 */
export type UserRoleUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserRole
   */
  select?: Prisma.UserRoleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserRole
   */
  omit?: Prisma.UserRoleOmit<ExtArgs> | null
  /**
   * The data needed to update a UserRole.
   */
  data: Prisma.XOR<Prisma.UserRoleUpdateInput, Prisma.UserRoleUncheckedUpdateInput>
  /**
   * Choose, which UserRole to update.
   */
  where: Prisma.UserRoleWhereUniqueInput
}

/**
 * UserRole updateMany
 */
export type UserRoleUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update UserRoles.
   */
  data: Prisma.XOR<Prisma.UserRoleUpdateManyMutationInput, Prisma.UserRoleUncheckedUpdateManyInput>
  /**
   * Filter which UserRoles to update
   */
  where?: Prisma.UserRoleWhereInput
  /**
   * Limit how many UserRoles to update.
   */
  limit?: number
}

/**
 * UserRole updateManyAndReturn
 */
export type UserRoleUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserRole
   */
  select?: Prisma.UserRoleSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the UserRole
   */
  omit?: Prisma.UserRoleOmit<ExtArgs> | null
  /**
   * The data used to update UserRoles.
   */
  data: Prisma.XOR<Prisma.UserRoleUpdateManyMutationInput, Prisma.UserRoleUncheckedUpdateManyInput>
  /**
   * Filter which UserRoles to update
   */
  where?: Prisma.UserRoleWhereInput
  /**
   * Limit how many UserRoles to update.
   */
  limit?: number
}

/**
 * UserRole upsert
 */
export type UserRoleUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserRole
   */
  select?: Prisma.UserRoleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserRole
   */
  omit?: Prisma.UserRoleOmit<ExtArgs> | null
  /**
   * The filter to search for the UserRole to update in case it exists.
   */
  where: Prisma.UserRoleWhereUniqueInput
  /**
   * In case the UserRole found by the `where` argument doesn't exist, create a new UserRole with this data.
   */
  create: Prisma.XOR<Prisma.UserRoleCreateInput, Prisma.UserRoleUncheckedCreateInput>
  /**
   * In case the UserRole was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.UserRoleUpdateInput, Prisma.UserRoleUncheckedUpdateInput>
}

/**
 * UserRole delete
 */
export type UserRoleDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserRole
   */
  select?: Prisma.UserRoleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserRole
   */
  omit?: Prisma.UserRoleOmit<ExtArgs> | null
  /**
   * Filter which UserRole to delete.
   */
  where: Prisma.UserRoleWhereUniqueInput
}

/**
 * UserRole deleteMany
 */
export type UserRoleDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which UserRoles to delete
   */
  where?: Prisma.UserRoleWhereInput
  /**
   * Limit how many UserRoles to delete.
   */
  limit?: number
}

/**
 * UserRole without action
 */
export type UserRoleDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserRole
   */
  select?: Prisma.UserRoleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserRole
   */
  omit?: Prisma.UserRoleOmit<ExtArgs> | null
}
