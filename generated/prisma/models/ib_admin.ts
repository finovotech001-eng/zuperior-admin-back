
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `ib_admin` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model ib_admin
 * 
 */
export type ib_adminModel = runtime.Types.Result.DefaultSelection<Prisma.$ib_adminPayload>

export type AggregateIb_admin = {
  _count: Ib_adminCountAggregateOutputType | null
  _avg: Ib_adminAvgAggregateOutputType | null
  _sum: Ib_adminSumAggregateOutputType | null
  _min: Ib_adminMinAggregateOutputType | null
  _max: Ib_adminMaxAggregateOutputType | null
}

export type Ib_adminAvgAggregateOutputType = {
  id: number | null
  login_attempts: number | null
}

export type Ib_adminSumAggregateOutputType = {
  id: number | null
  login_attempts: number | null
}

export type Ib_adminMinAggregateOutputType = {
  id: number | null
  email: string | null
  password_hash: string | null
  role: string | null
  is_active: boolean | null
  last_login: Date | null
  login_attempts: number | null
  locked_until: Date | null
  created_at: Date | null
  updated_at: Date | null
}

export type Ib_adminMaxAggregateOutputType = {
  id: number | null
  email: string | null
  password_hash: string | null
  role: string | null
  is_active: boolean | null
  last_login: Date | null
  login_attempts: number | null
  locked_until: Date | null
  created_at: Date | null
  updated_at: Date | null
}

export type Ib_adminCountAggregateOutputType = {
  id: number
  email: number
  password_hash: number
  role: number
  is_active: number
  last_login: number
  login_attempts: number
  locked_until: number
  created_at: number
  updated_at: number
  _all: number
}


export type Ib_adminAvgAggregateInputType = {
  id?: true
  login_attempts?: true
}

export type Ib_adminSumAggregateInputType = {
  id?: true
  login_attempts?: true
}

export type Ib_adminMinAggregateInputType = {
  id?: true
  email?: true
  password_hash?: true
  role?: true
  is_active?: true
  last_login?: true
  login_attempts?: true
  locked_until?: true
  created_at?: true
  updated_at?: true
}

export type Ib_adminMaxAggregateInputType = {
  id?: true
  email?: true
  password_hash?: true
  role?: true
  is_active?: true
  last_login?: true
  login_attempts?: true
  locked_until?: true
  created_at?: true
  updated_at?: true
}

export type Ib_adminCountAggregateInputType = {
  id?: true
  email?: true
  password_hash?: true
  role?: true
  is_active?: true
  last_login?: true
  login_attempts?: true
  locked_until?: true
  created_at?: true
  updated_at?: true
  _all?: true
}

export type Ib_adminAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ib_admin to aggregate.
   */
  where?: Prisma.ib_adminWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ib_admins to fetch.
   */
  orderBy?: Prisma.ib_adminOrderByWithRelationInput | Prisma.ib_adminOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ib_adminWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ib_admins from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ib_admins.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ib_admins
  **/
  _count?: true | Ib_adminCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: Ib_adminAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: Ib_adminSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: Ib_adminMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: Ib_adminMaxAggregateInputType
}

export type GetIb_adminAggregateType<T extends Ib_adminAggregateArgs> = {
      [P in keyof T & keyof AggregateIb_admin]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateIb_admin[P]>
    : Prisma.GetScalarType<T[P], AggregateIb_admin[P]>
}




export type ib_adminGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ib_adminWhereInput
  orderBy?: Prisma.ib_adminOrderByWithAggregationInput | Prisma.ib_adminOrderByWithAggregationInput[]
  by: Prisma.Ib_adminScalarFieldEnum[] | Prisma.Ib_adminScalarFieldEnum
  having?: Prisma.ib_adminScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: Ib_adminCountAggregateInputType | true
  _avg?: Ib_adminAvgAggregateInputType
  _sum?: Ib_adminSumAggregateInputType
  _min?: Ib_adminMinAggregateInputType
  _max?: Ib_adminMaxAggregateInputType
}

export type Ib_adminGroupByOutputType = {
  id: number
  email: string
  password_hash: string
  role: string | null
  is_active: boolean | null
  last_login: Date | null
  login_attempts: number | null
  locked_until: Date | null
  created_at: Date | null
  updated_at: Date | null
  _count: Ib_adminCountAggregateOutputType | null
  _avg: Ib_adminAvgAggregateOutputType | null
  _sum: Ib_adminSumAggregateOutputType | null
  _min: Ib_adminMinAggregateOutputType | null
  _max: Ib_adminMaxAggregateOutputType | null
}

type GetIb_adminGroupByPayload<T extends ib_adminGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<Ib_adminGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof Ib_adminGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], Ib_adminGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], Ib_adminGroupByOutputType[P]>
      }
    >
  >



export type ib_adminWhereInput = {
  AND?: Prisma.ib_adminWhereInput | Prisma.ib_adminWhereInput[]
  OR?: Prisma.ib_adminWhereInput[]
  NOT?: Prisma.ib_adminWhereInput | Prisma.ib_adminWhereInput[]
  id?: Prisma.IntFilter<"ib_admin"> | number
  email?: Prisma.StringFilter<"ib_admin"> | string
  password_hash?: Prisma.StringFilter<"ib_admin"> | string
  role?: Prisma.StringNullableFilter<"ib_admin"> | string | null
  is_active?: Prisma.BoolNullableFilter<"ib_admin"> | boolean | null
  last_login?: Prisma.DateTimeNullableFilter<"ib_admin"> | Date | string | null
  login_attempts?: Prisma.IntNullableFilter<"ib_admin"> | number | null
  locked_until?: Prisma.DateTimeNullableFilter<"ib_admin"> | Date | string | null
  created_at?: Prisma.DateTimeNullableFilter<"ib_admin"> | Date | string | null
  updated_at?: Prisma.DateTimeNullableFilter<"ib_admin"> | Date | string | null
}

export type ib_adminOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  email?: Prisma.SortOrder
  password_hash?: Prisma.SortOrder
  role?: Prisma.SortOrderInput | Prisma.SortOrder
  is_active?: Prisma.SortOrderInput | Prisma.SortOrder
  last_login?: Prisma.SortOrderInput | Prisma.SortOrder
  login_attempts?: Prisma.SortOrderInput | Prisma.SortOrder
  locked_until?: Prisma.SortOrderInput | Prisma.SortOrder
  created_at?: Prisma.SortOrderInput | Prisma.SortOrder
  updated_at?: Prisma.SortOrderInput | Prisma.SortOrder
}

export type ib_adminWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  email?: string
  AND?: Prisma.ib_adminWhereInput | Prisma.ib_adminWhereInput[]
  OR?: Prisma.ib_adminWhereInput[]
  NOT?: Prisma.ib_adminWhereInput | Prisma.ib_adminWhereInput[]
  password_hash?: Prisma.StringFilter<"ib_admin"> | string
  role?: Prisma.StringNullableFilter<"ib_admin"> | string | null
  is_active?: Prisma.BoolNullableFilter<"ib_admin"> | boolean | null
  last_login?: Prisma.DateTimeNullableFilter<"ib_admin"> | Date | string | null
  login_attempts?: Prisma.IntNullableFilter<"ib_admin"> | number | null
  locked_until?: Prisma.DateTimeNullableFilter<"ib_admin"> | Date | string | null
  created_at?: Prisma.DateTimeNullableFilter<"ib_admin"> | Date | string | null
  updated_at?: Prisma.DateTimeNullableFilter<"ib_admin"> | Date | string | null
}, "id" | "email">

export type ib_adminOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  email?: Prisma.SortOrder
  password_hash?: Prisma.SortOrder
  role?: Prisma.SortOrderInput | Prisma.SortOrder
  is_active?: Prisma.SortOrderInput | Prisma.SortOrder
  last_login?: Prisma.SortOrderInput | Prisma.SortOrder
  login_attempts?: Prisma.SortOrderInput | Prisma.SortOrder
  locked_until?: Prisma.SortOrderInput | Prisma.SortOrder
  created_at?: Prisma.SortOrderInput | Prisma.SortOrder
  updated_at?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.ib_adminCountOrderByAggregateInput
  _avg?: Prisma.ib_adminAvgOrderByAggregateInput
  _max?: Prisma.ib_adminMaxOrderByAggregateInput
  _min?: Prisma.ib_adminMinOrderByAggregateInput
  _sum?: Prisma.ib_adminSumOrderByAggregateInput
}

export type ib_adminScalarWhereWithAggregatesInput = {
  AND?: Prisma.ib_adminScalarWhereWithAggregatesInput | Prisma.ib_adminScalarWhereWithAggregatesInput[]
  OR?: Prisma.ib_adminScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ib_adminScalarWhereWithAggregatesInput | Prisma.ib_adminScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"ib_admin"> | number
  email?: Prisma.StringWithAggregatesFilter<"ib_admin"> | string
  password_hash?: Prisma.StringWithAggregatesFilter<"ib_admin"> | string
  role?: Prisma.StringNullableWithAggregatesFilter<"ib_admin"> | string | null
  is_active?: Prisma.BoolNullableWithAggregatesFilter<"ib_admin"> | boolean | null
  last_login?: Prisma.DateTimeNullableWithAggregatesFilter<"ib_admin"> | Date | string | null
  login_attempts?: Prisma.IntNullableWithAggregatesFilter<"ib_admin"> | number | null
  locked_until?: Prisma.DateTimeNullableWithAggregatesFilter<"ib_admin"> | Date | string | null
  created_at?: Prisma.DateTimeNullableWithAggregatesFilter<"ib_admin"> | Date | string | null
  updated_at?: Prisma.DateTimeNullableWithAggregatesFilter<"ib_admin"> | Date | string | null
}

export type ib_adminCreateInput = {
  email: string
  password_hash: string
  role?: string | null
  is_active?: boolean | null
  last_login?: Date | string | null
  login_attempts?: number | null
  locked_until?: Date | string | null
  created_at?: Date | string | null
  updated_at?: Date | string | null
}

export type ib_adminUncheckedCreateInput = {
  id?: number
  email: string
  password_hash: string
  role?: string | null
  is_active?: boolean | null
  last_login?: Date | string | null
  login_attempts?: number | null
  locked_until?: Date | string | null
  created_at?: Date | string | null
  updated_at?: Date | string | null
}

export type ib_adminUpdateInput = {
  email?: Prisma.StringFieldUpdateOperationsInput | string
  password_hash?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  is_active?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  last_login?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  login_attempts?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  locked_until?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type ib_adminUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  email?: Prisma.StringFieldUpdateOperationsInput | string
  password_hash?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  is_active?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  last_login?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  login_attempts?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  locked_until?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type ib_adminCreateManyInput = {
  id?: number
  email: string
  password_hash: string
  role?: string | null
  is_active?: boolean | null
  last_login?: Date | string | null
  login_attempts?: number | null
  locked_until?: Date | string | null
  created_at?: Date | string | null
  updated_at?: Date | string | null
}

export type ib_adminUpdateManyMutationInput = {
  email?: Prisma.StringFieldUpdateOperationsInput | string
  password_hash?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  is_active?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  last_login?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  login_attempts?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  locked_until?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type ib_adminUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  email?: Prisma.StringFieldUpdateOperationsInput | string
  password_hash?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  is_active?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  last_login?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  login_attempts?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  locked_until?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  created_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updated_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type ib_adminCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  email?: Prisma.SortOrder
  password_hash?: Prisma.SortOrder
  role?: Prisma.SortOrder
  is_active?: Prisma.SortOrder
  last_login?: Prisma.SortOrder
  login_attempts?: Prisma.SortOrder
  locked_until?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
}

export type ib_adminAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  login_attempts?: Prisma.SortOrder
}

export type ib_adminMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  email?: Prisma.SortOrder
  password_hash?: Prisma.SortOrder
  role?: Prisma.SortOrder
  is_active?: Prisma.SortOrder
  last_login?: Prisma.SortOrder
  login_attempts?: Prisma.SortOrder
  locked_until?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
}

export type ib_adminMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  email?: Prisma.SortOrder
  password_hash?: Prisma.SortOrder
  role?: Prisma.SortOrder
  is_active?: Prisma.SortOrder
  last_login?: Prisma.SortOrder
  login_attempts?: Prisma.SortOrder
  locked_until?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
}

export type ib_adminSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  login_attempts?: Prisma.SortOrder
}



export type ib_adminSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  email?: boolean
  password_hash?: boolean
  role?: boolean
  is_active?: boolean
  last_login?: boolean
  login_attempts?: boolean
  locked_until?: boolean
  created_at?: boolean
  updated_at?: boolean
}, ExtArgs["result"]["ib_admin"]>

export type ib_adminSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  email?: boolean
  password_hash?: boolean
  role?: boolean
  is_active?: boolean
  last_login?: boolean
  login_attempts?: boolean
  locked_until?: boolean
  created_at?: boolean
  updated_at?: boolean
}, ExtArgs["result"]["ib_admin"]>

export type ib_adminSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  email?: boolean
  password_hash?: boolean
  role?: boolean
  is_active?: boolean
  last_login?: boolean
  login_attempts?: boolean
  locked_until?: boolean
  created_at?: boolean
  updated_at?: boolean
}, ExtArgs["result"]["ib_admin"]>

export type ib_adminSelectScalar = {
  id?: boolean
  email?: boolean
  password_hash?: boolean
  role?: boolean
  is_active?: boolean
  last_login?: boolean
  login_attempts?: boolean
  locked_until?: boolean
  created_at?: boolean
  updated_at?: boolean
}

export type ib_adminOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "email" | "password_hash" | "role" | "is_active" | "last_login" | "login_attempts" | "locked_until" | "created_at" | "updated_at", ExtArgs["result"]["ib_admin"]>

export type $ib_adminPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ib_admin"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    email: string
    password_hash: string
    role: string | null
    is_active: boolean | null
    last_login: Date | null
    login_attempts: number | null
    locked_until: Date | null
    created_at: Date | null
    updated_at: Date | null
  }, ExtArgs["result"]["ib_admin"]>
  composites: {}
}

export type ib_adminGetPayload<S extends boolean | null | undefined | ib_adminDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ib_adminPayload, S>

export type ib_adminCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ib_adminFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: Ib_adminCountAggregateInputType | true
  }

export interface ib_adminDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ib_admin'], meta: { name: 'ib_admin' } }
  /**
   * Find zero or one Ib_admin that matches the filter.
   * @param {ib_adminFindUniqueArgs} args - Arguments to find a Ib_admin
   * @example
   * // Get one Ib_admin
   * const ib_admin = await prisma.ib_admin.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ib_adminFindUniqueArgs>(args: Prisma.SelectSubset<T, ib_adminFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ib_adminClient<runtime.Types.Result.GetResult<Prisma.$ib_adminPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Ib_admin that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ib_adminFindUniqueOrThrowArgs} args - Arguments to find a Ib_admin
   * @example
   * // Get one Ib_admin
   * const ib_admin = await prisma.ib_admin.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ib_adminFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ib_adminFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ib_adminClient<runtime.Types.Result.GetResult<Prisma.$ib_adminPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Ib_admin that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ib_adminFindFirstArgs} args - Arguments to find a Ib_admin
   * @example
   * // Get one Ib_admin
   * const ib_admin = await prisma.ib_admin.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ib_adminFindFirstArgs>(args?: Prisma.SelectSubset<T, ib_adminFindFirstArgs<ExtArgs>>): Prisma.Prisma__ib_adminClient<runtime.Types.Result.GetResult<Prisma.$ib_adminPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Ib_admin that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ib_adminFindFirstOrThrowArgs} args - Arguments to find a Ib_admin
   * @example
   * // Get one Ib_admin
   * const ib_admin = await prisma.ib_admin.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ib_adminFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ib_adminFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ib_adminClient<runtime.Types.Result.GetResult<Prisma.$ib_adminPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Ib_admins that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ib_adminFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Ib_admins
   * const ib_admins = await prisma.ib_admin.findMany()
   * 
   * // Get first 10 Ib_admins
   * const ib_admins = await prisma.ib_admin.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const ib_adminWithIdOnly = await prisma.ib_admin.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ib_adminFindManyArgs>(args?: Prisma.SelectSubset<T, ib_adminFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ib_adminPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Ib_admin.
   * @param {ib_adminCreateArgs} args - Arguments to create a Ib_admin.
   * @example
   * // Create one Ib_admin
   * const Ib_admin = await prisma.ib_admin.create({
   *   data: {
   *     // ... data to create a Ib_admin
   *   }
   * })
   * 
   */
  create<T extends ib_adminCreateArgs>(args: Prisma.SelectSubset<T, ib_adminCreateArgs<ExtArgs>>): Prisma.Prisma__ib_adminClient<runtime.Types.Result.GetResult<Prisma.$ib_adminPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Ib_admins.
   * @param {ib_adminCreateManyArgs} args - Arguments to create many Ib_admins.
   * @example
   * // Create many Ib_admins
   * const ib_admin = await prisma.ib_admin.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ib_adminCreateManyArgs>(args?: Prisma.SelectSubset<T, ib_adminCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Ib_admins and returns the data saved in the database.
   * @param {ib_adminCreateManyAndReturnArgs} args - Arguments to create many Ib_admins.
   * @example
   * // Create many Ib_admins
   * const ib_admin = await prisma.ib_admin.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Ib_admins and only return the `id`
   * const ib_adminWithIdOnly = await prisma.ib_admin.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ib_adminCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ib_adminCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ib_adminPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Ib_admin.
   * @param {ib_adminDeleteArgs} args - Arguments to delete one Ib_admin.
   * @example
   * // Delete one Ib_admin
   * const Ib_admin = await prisma.ib_admin.delete({
   *   where: {
   *     // ... filter to delete one Ib_admin
   *   }
   * })
   * 
   */
  delete<T extends ib_adminDeleteArgs>(args: Prisma.SelectSubset<T, ib_adminDeleteArgs<ExtArgs>>): Prisma.Prisma__ib_adminClient<runtime.Types.Result.GetResult<Prisma.$ib_adminPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Ib_admin.
   * @param {ib_adminUpdateArgs} args - Arguments to update one Ib_admin.
   * @example
   * // Update one Ib_admin
   * const ib_admin = await prisma.ib_admin.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ib_adminUpdateArgs>(args: Prisma.SelectSubset<T, ib_adminUpdateArgs<ExtArgs>>): Prisma.Prisma__ib_adminClient<runtime.Types.Result.GetResult<Prisma.$ib_adminPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Ib_admins.
   * @param {ib_adminDeleteManyArgs} args - Arguments to filter Ib_admins to delete.
   * @example
   * // Delete a few Ib_admins
   * const { count } = await prisma.ib_admin.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ib_adminDeleteManyArgs>(args?: Prisma.SelectSubset<T, ib_adminDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Ib_admins.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ib_adminUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Ib_admins
   * const ib_admin = await prisma.ib_admin.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ib_adminUpdateManyArgs>(args: Prisma.SelectSubset<T, ib_adminUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Ib_admins and returns the data updated in the database.
   * @param {ib_adminUpdateManyAndReturnArgs} args - Arguments to update many Ib_admins.
   * @example
   * // Update many Ib_admins
   * const ib_admin = await prisma.ib_admin.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Ib_admins and only return the `id`
   * const ib_adminWithIdOnly = await prisma.ib_admin.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ib_adminUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ib_adminUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ib_adminPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Ib_admin.
   * @param {ib_adminUpsertArgs} args - Arguments to update or create a Ib_admin.
   * @example
   * // Update or create a Ib_admin
   * const ib_admin = await prisma.ib_admin.upsert({
   *   create: {
   *     // ... data to create a Ib_admin
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Ib_admin we want to update
   *   }
   * })
   */
  upsert<T extends ib_adminUpsertArgs>(args: Prisma.SelectSubset<T, ib_adminUpsertArgs<ExtArgs>>): Prisma.Prisma__ib_adminClient<runtime.Types.Result.GetResult<Prisma.$ib_adminPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Ib_admins.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ib_adminCountArgs} args - Arguments to filter Ib_admins to count.
   * @example
   * // Count the number of Ib_admins
   * const count = await prisma.ib_admin.count({
   *   where: {
   *     // ... the filter for the Ib_admins we want to count
   *   }
   * })
  **/
  count<T extends ib_adminCountArgs>(
    args?: Prisma.Subset<T, ib_adminCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], Ib_adminCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Ib_admin.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {Ib_adminAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends Ib_adminAggregateArgs>(args: Prisma.Subset<T, Ib_adminAggregateArgs>): Prisma.PrismaPromise<GetIb_adminAggregateType<T>>

  /**
   * Group by Ib_admin.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ib_adminGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ib_adminGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ib_adminGroupByArgs['orderBy'] }
      : { orderBy?: ib_adminGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ib_adminGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetIb_adminGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ib_admin model
 */
readonly fields: ib_adminFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ib_admin.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ib_adminClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ib_admin model
 */
export interface ib_adminFieldRefs {
  readonly id: Prisma.FieldRef<"ib_admin", 'Int'>
  readonly email: Prisma.FieldRef<"ib_admin", 'String'>
  readonly password_hash: Prisma.FieldRef<"ib_admin", 'String'>
  readonly role: Prisma.FieldRef<"ib_admin", 'String'>
  readonly is_active: Prisma.FieldRef<"ib_admin", 'Boolean'>
  readonly last_login: Prisma.FieldRef<"ib_admin", 'DateTime'>
  readonly login_attempts: Prisma.FieldRef<"ib_admin", 'Int'>
  readonly locked_until: Prisma.FieldRef<"ib_admin", 'DateTime'>
  readonly created_at: Prisma.FieldRef<"ib_admin", 'DateTime'>
  readonly updated_at: Prisma.FieldRef<"ib_admin", 'DateTime'>
}
    

// Custom InputTypes
/**
 * ib_admin findUnique
 */
export type ib_adminFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ib_admin
   */
  select?: Prisma.ib_adminSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ib_admin
   */
  omit?: Prisma.ib_adminOmit<ExtArgs> | null
  /**
   * Filter, which ib_admin to fetch.
   */
  where: Prisma.ib_adminWhereUniqueInput
}

/**
 * ib_admin findUniqueOrThrow
 */
export type ib_adminFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ib_admin
   */
  select?: Prisma.ib_adminSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ib_admin
   */
  omit?: Prisma.ib_adminOmit<ExtArgs> | null
  /**
   * Filter, which ib_admin to fetch.
   */
  where: Prisma.ib_adminWhereUniqueInput
}

/**
 * ib_admin findFirst
 */
export type ib_adminFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ib_admin
   */
  select?: Prisma.ib_adminSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ib_admin
   */
  omit?: Prisma.ib_adminOmit<ExtArgs> | null
  /**
   * Filter, which ib_admin to fetch.
   */
  where?: Prisma.ib_adminWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ib_admins to fetch.
   */
  orderBy?: Prisma.ib_adminOrderByWithRelationInput | Prisma.ib_adminOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ib_admins.
   */
  cursor?: Prisma.ib_adminWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ib_admins from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ib_admins.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ib_admins.
   */
  distinct?: Prisma.Ib_adminScalarFieldEnum | Prisma.Ib_adminScalarFieldEnum[]
}

/**
 * ib_admin findFirstOrThrow
 */
export type ib_adminFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ib_admin
   */
  select?: Prisma.ib_adminSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ib_admin
   */
  omit?: Prisma.ib_adminOmit<ExtArgs> | null
  /**
   * Filter, which ib_admin to fetch.
   */
  where?: Prisma.ib_adminWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ib_admins to fetch.
   */
  orderBy?: Prisma.ib_adminOrderByWithRelationInput | Prisma.ib_adminOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ib_admins.
   */
  cursor?: Prisma.ib_adminWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ib_admins from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ib_admins.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ib_admins.
   */
  distinct?: Prisma.Ib_adminScalarFieldEnum | Prisma.Ib_adminScalarFieldEnum[]
}

/**
 * ib_admin findMany
 */
export type ib_adminFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ib_admin
   */
  select?: Prisma.ib_adminSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ib_admin
   */
  omit?: Prisma.ib_adminOmit<ExtArgs> | null
  /**
   * Filter, which ib_admins to fetch.
   */
  where?: Prisma.ib_adminWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ib_admins to fetch.
   */
  orderBy?: Prisma.ib_adminOrderByWithRelationInput | Prisma.ib_adminOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ib_admins.
   */
  cursor?: Prisma.ib_adminWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ib_admins from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ib_admins.
   */
  skip?: number
  distinct?: Prisma.Ib_adminScalarFieldEnum | Prisma.Ib_adminScalarFieldEnum[]
}

/**
 * ib_admin create
 */
export type ib_adminCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ib_admin
   */
  select?: Prisma.ib_adminSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ib_admin
   */
  omit?: Prisma.ib_adminOmit<ExtArgs> | null
  /**
   * The data needed to create a ib_admin.
   */
  data: Prisma.XOR<Prisma.ib_adminCreateInput, Prisma.ib_adminUncheckedCreateInput>
}

/**
 * ib_admin createMany
 */
export type ib_adminCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ib_admins.
   */
  data: Prisma.ib_adminCreateManyInput | Prisma.ib_adminCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ib_admin createManyAndReturn
 */
export type ib_adminCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ib_admin
   */
  select?: Prisma.ib_adminSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ib_admin
   */
  omit?: Prisma.ib_adminOmit<ExtArgs> | null
  /**
   * The data used to create many ib_admins.
   */
  data: Prisma.ib_adminCreateManyInput | Prisma.ib_adminCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ib_admin update
 */
export type ib_adminUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ib_admin
   */
  select?: Prisma.ib_adminSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ib_admin
   */
  omit?: Prisma.ib_adminOmit<ExtArgs> | null
  /**
   * The data needed to update a ib_admin.
   */
  data: Prisma.XOR<Prisma.ib_adminUpdateInput, Prisma.ib_adminUncheckedUpdateInput>
  /**
   * Choose, which ib_admin to update.
   */
  where: Prisma.ib_adminWhereUniqueInput
}

/**
 * ib_admin updateMany
 */
export type ib_adminUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ib_admins.
   */
  data: Prisma.XOR<Prisma.ib_adminUpdateManyMutationInput, Prisma.ib_adminUncheckedUpdateManyInput>
  /**
   * Filter which ib_admins to update
   */
  where?: Prisma.ib_adminWhereInput
  /**
   * Limit how many ib_admins to update.
   */
  limit?: number
}

/**
 * ib_admin updateManyAndReturn
 */
export type ib_adminUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ib_admin
   */
  select?: Prisma.ib_adminSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ib_admin
   */
  omit?: Prisma.ib_adminOmit<ExtArgs> | null
  /**
   * The data used to update ib_admins.
   */
  data: Prisma.XOR<Prisma.ib_adminUpdateManyMutationInput, Prisma.ib_adminUncheckedUpdateManyInput>
  /**
   * Filter which ib_admins to update
   */
  where?: Prisma.ib_adminWhereInput
  /**
   * Limit how many ib_admins to update.
   */
  limit?: number
}

/**
 * ib_admin upsert
 */
export type ib_adminUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ib_admin
   */
  select?: Prisma.ib_adminSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ib_admin
   */
  omit?: Prisma.ib_adminOmit<ExtArgs> | null
  /**
   * The filter to search for the ib_admin to update in case it exists.
   */
  where: Prisma.ib_adminWhereUniqueInput
  /**
   * In case the ib_admin found by the `where` argument doesn't exist, create a new ib_admin with this data.
   */
  create: Prisma.XOR<Prisma.ib_adminCreateInput, Prisma.ib_adminUncheckedCreateInput>
  /**
   * In case the ib_admin was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ib_adminUpdateInput, Prisma.ib_adminUncheckedUpdateInput>
}

/**
 * ib_admin delete
 */
export type ib_adminDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ib_admin
   */
  select?: Prisma.ib_adminSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ib_admin
   */
  omit?: Prisma.ib_adminOmit<ExtArgs> | null
  /**
   * Filter which ib_admin to delete.
   */
  where: Prisma.ib_adminWhereUniqueInput
}

/**
 * ib_admin deleteMany
 */
export type ib_adminDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ib_admins to delete
   */
  where?: Prisma.ib_adminWhereInput
  /**
   * Limit how many ib_admins to delete.
   */
  limit?: number
}

/**
 * ib_admin without action
 */
export type ib_adminDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ib_admin
   */
  select?: Prisma.ib_adminSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ib_admin
   */
  omit?: Prisma.ib_adminOmit<ExtArgs> | null
}
