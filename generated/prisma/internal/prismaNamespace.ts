
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * WARNING: This is an internal file that is subject to change!
 *
 * ðŸ›‘ Under no circumstances should you import this file directly! ðŸ›‘
 *
 * All exports from this file are wrapped under a `Prisma` namespace object in the client.ts file.
 * While this enables partial backward compatibility, it is not part of the stable public API.
 *
 * If you are looking for your Models, Enums, and Input Types, please import them from the respective
 * model files in the `model` directory!
 */

import * as runtime from "@prisma/client/runtime/library"
import type * as Prisma from "../models.ts"
import { type PrismaClient } from "./class.ts"

export type * from '../models.ts'

export type DMMF = typeof runtime.DMMF

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

/**
 * Prisma Errors
 */

export const PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
export type PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError

export const PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
export type PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError

export const PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
export type PrismaClientRustPanicError = runtime.PrismaClientRustPanicError

export const PrismaClientInitializationError = runtime.PrismaClientInitializationError
export type PrismaClientInitializationError = runtime.PrismaClientInitializationError

export const PrismaClientValidationError = runtime.PrismaClientValidationError
export type PrismaClientValidationError = runtime.PrismaClientValidationError

/**
 * Re-export of sql-template-tag
 */
export const sql = runtime.sqltag
export const empty = runtime.empty
export const join = runtime.join
export const raw = runtime.raw
export const Sql = runtime.Sql
export type Sql = runtime.Sql



/**
 * Decimal.js
 */
export const Decimal = runtime.Decimal
export type Decimal = runtime.Decimal

export type DecimalJsLike = runtime.DecimalJsLike

/**
 * Metrics
 */
export type Metrics = runtime.Metrics
export type Metric<T> = runtime.Metric<T>
export type MetricHistogram = runtime.MetricHistogram
export type MetricHistogramBucket = runtime.MetricHistogramBucket

/**
* Extensions
*/
export type Extension = runtime.Types.Extensions.UserArgs
export const getExtensionContext = runtime.Extensions.getExtensionContext
export type Args<T, F extends runtime.Operation> = runtime.Types.Public.Args<T, F>
export type Payload<T, F extends runtime.Operation = never> = runtime.Types.Public.Payload<T, F>
export type Result<T, A, F extends runtime.Operation> = runtime.Types.Public.Result<T, A, F>
export type Exact<A, W> = runtime.Types.Public.Exact<A, W>

export type PrismaVersion = {
  client: string
  engine: string
}

/**
 * Prisma Client JS version: 6.18.0
 * Query Engine version: 34b5a692b7bd79939a9a2c3ef97d816e749cda2f
 */
export const prismaVersion: PrismaVersion = {
  client: "6.18.0",
  engine: "34b5a692b7bd79939a9a2c3ef97d816e749cda2f"
}

/**
 * Utility Types
 */

export type Bytes = runtime.Bytes
export type JsonObject = runtime.JsonObject
export type JsonArray = runtime.JsonArray
export type JsonValue = runtime.JsonValue
export type InputJsonObject = runtime.InputJsonObject
export type InputJsonArray = runtime.InputJsonArray
export type InputJsonValue = runtime.InputJsonValue


export const NullTypes = {
  DbNull: runtime.objectEnumValues.classes.DbNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.DbNull),
  JsonNull: runtime.objectEnumValues.classes.JsonNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.JsonNull),
  AnyNull: runtime.objectEnumValues.classes.AnyNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.AnyNull),
}
/**
 * Helper for filtering JSON entries that have `null` on the database (empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const DbNull = runtime.objectEnumValues.instances.DbNull
/**
 * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const JsonNull = runtime.objectEnumValues.instances.JsonNull
/**
 * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const AnyNull = runtime.objectEnumValues.instances.AnyNull


type SelectAndInclude = {
  select: any
  include: any
}

type SelectAndOmit = {
  select: any
  omit: any
}

/**
 * From T, pick a set of properties whose keys are in the union K
 */
type Prisma__Pick<T, K extends keyof T> = {
    [P in K]: T[P];
};

export type Enumerable<T> = T | Array<T>;

/**
 * Subset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
 */
export type Subset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
};

/**
 * SelectSubset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
 * Additionally, it validates, if both select and include are present. If the case, it errors.
 */
export type SelectSubset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never
} &
  (T extends SelectAndInclude
    ? 'Please either choose `select` or `include`.'
    : T extends SelectAndOmit
      ? 'Please either choose `select` or `omit`.'
      : {})

/**
 * Subset + Intersection
 * @desc From `T` pick properties that exist in `U` and intersect `K`
 */
export type SubsetIntersection<T, U, K> = {
  [key in keyof T]: key extends keyof U ? T[key] : never
} &
  K

type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

/**
 * XOR is needed to have a real mutually exclusive union type
 * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
 */
export type XOR<T, U> =
  T extends object ?
  U extends object ?
    (Without<T, U> & U) | (Without<U, T> & T)
  : U : T


/**
 * Is T a Record?
 */
type IsObject<T extends any> = T extends Array<any>
? False
: T extends Date
? False
: T extends Uint8Array
? False
: T extends BigInt
? False
: T extends object
? True
: False


/**
 * If it's T[], return T
 */
export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

/**
 * From ts-toolbelt
 */

type __Either<O extends object, K extends Key> = Omit<O, K> &
  {
    // Merge all but K
    [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
  }[K]

type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

type _Either<
  O extends object,
  K extends Key,
  strict extends Boolean
> = {
  1: EitherStrict<O, K>
  0: EitherLoose<O, K>
}[strict]

export type Either<
  O extends object,
  K extends Key,
  strict extends Boolean = 1
> = O extends unknown ? _Either<O, K, strict> : never

export type Union = any

export type PatchUndefined<O extends object, O1 extends object> = {
  [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
} & {}

/** Helper Types for "Merge" **/
export type IntersectOf<U extends Union> = (
  U extends unknown ? (k: U) => void : never
) extends (k: infer I) => void
  ? I
  : never

export type Overwrite<O extends object, O1 extends object> = {
    [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
} & {};

type _Merge<U extends object> = IntersectOf<Overwrite<U, {
    [K in keyof U]-?: At<U, K>;
}>>;

type Key = string | number | symbol;
type AtStrict<O extends object, K extends Key> = O[K & keyof O];
type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
    1: AtStrict<O, K>;
    0: AtLoose<O, K>;
}[strict];

export type ComputeRaw<A extends any> = A extends Function ? A : {
  [K in keyof A]: A[K];
} & {};

export type OptionalFlat<O> = {
  [K in keyof O]?: O[K];
} & {};

type _Record<K extends keyof any, T> = {
  [P in K]: T;
};

// cause typescript not to expand types and preserve names
type NoExpand<T> = T extends unknown ? T : never;

// this type assumes the passed object is entirely optional
export type AtLeast<O extends object, K extends string> = NoExpand<
  O extends unknown
  ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
    | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
  : never>;

type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
/** End Helper Types for "Merge" **/

export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

export type Boolean = True | False

export type True = 1

export type False = 0

export type Not<B extends Boolean> = {
  0: 1
  1: 0
}[B]

export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
  ? 0 // anything `never` is false
  : A1 extends A2
  ? 1
  : 0

export type Has<U extends Union, U1 extends Union> = Not<
  Extends<Exclude<U1, U>, U1>
>

export type Or<B1 extends Boolean, B2 extends Boolean> = {
  0: {
    0: 0
    1: 1
  }
  1: {
    0: 1
    1: 1
  }
}[B1][B2]

export type Keys<U extends Union> = U extends unknown ? keyof U : never

export type GetScalarType<T, O> = O extends object ? {
  [P in keyof T]: P extends keyof O
    ? O[P]
    : never
} : never

type FieldPaths<
  T,
  U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
> = IsObject<T> extends True ? U : T

export type GetHavingFields<T> = {
  [K in keyof T]: Or<
    Or<Extends<'OR', K>, Extends<'AND', K>>,
    Extends<'NOT', K>
  > extends True
    ? // infer is only needed to not hit TS limit
      // based on the brilliant idea of Pierre-Antoine Mills
      // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
      T[K] extends infer TK
      ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
      : never
    : {} extends FieldPaths<T[K]>
    ? never
    : K
}[keyof T]

/**
 * Convert tuple to union
 */
type _TupleToUnion<T> = T extends (infer E)[] ? E : never
type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
export type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

/**
 * Like `Pick`, but additionally can also accept an array of keys
 */
export type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

/**
 * Exclude all keys with underscores
 */
export type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


export const ModelName = {
  Account: 'Account',
  ActivityLog: 'ActivityLog',
  Deposit: 'Deposit',
  KYC: 'KYC',
  MT5Account: 'MT5Account',
  MT5Transaction: 'MT5Transaction',
  PaymentMethod: 'PaymentMethod',
  Role: 'Role',
  SystemSetting: 'SystemSetting',
  Transaction: 'Transaction',
  User: 'User',
  UserRole: 'UserRole',
  Withdrawal: 'Withdrawal',
  chat_conversations: 'chat_conversations',
  chat_messages: 'chat_messages',
  chat_participants: 'chat_participants',
  group_commission_structures: 'group_commission_structures',
  ib_admin: 'ib_admin',
  ib_requests: 'ib_requests',
  mt5_groups: 'mt5_groups',
  symbols: 'symbols'
} as const

export type ModelName = (typeof ModelName)[keyof typeof ModelName]



export interface TypeMapCb<GlobalOmitOptions = {}> extends runtime.Types.Utils.Fn<{extArgs: runtime.Types.Extensions.InternalArgs }, runtime.Types.Utils.Record<string, any>> {
  returns: TypeMap<this['params']['extArgs'], GlobalOmitOptions>
}

export type TypeMap<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
  globalOmitOptions: {
    omit: GlobalOmitOptions
  }
  meta: {
    modelProps: "account" | "activityLog" | "deposit" | "kYC" | "mT5Account" | "mT5Transaction" | "paymentMethod" | "role" | "systemSetting" | "transaction" | "user" | "userRole" | "withdrawal" | "chat_conversations" | "chat_messages" | "chat_participants" | "group_commission_structures" | "ib_admin" | "ib_requests" | "mt5_groups" | "symbols"
    txIsolationLevel: TransactionIsolationLevel
  }
  model: {
    Account: {
      payload: Prisma.$AccountPayload<ExtArgs>
      fields: Prisma.AccountFieldRefs
      operations: {
        findUnique: {
          args: Prisma.AccountFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.AccountFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload>
        }
        findFirst: {
          args: Prisma.AccountFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.AccountFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload>
        }
        findMany: {
          args: Prisma.AccountFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload>[]
        }
        create: {
          args: Prisma.AccountCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload>
        }
        createMany: {
          args: Prisma.AccountCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.AccountCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload>[]
        }
        delete: {
          args: Prisma.AccountDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload>
        }
        update: {
          args: Prisma.AccountUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload>
        }
        deleteMany: {
          args: Prisma.AccountDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.AccountUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.AccountUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload>[]
        }
        upsert: {
          args: Prisma.AccountUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload>
        }
        aggregate: {
          args: Prisma.AccountAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateAccount>
        }
        groupBy: {
          args: Prisma.AccountGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AccountGroupByOutputType>[]
        }
        count: {
          args: Prisma.AccountCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AccountCountAggregateOutputType> | number
        }
      }
    }
    ActivityLog: {
      payload: Prisma.$ActivityLogPayload<ExtArgs>
      fields: Prisma.ActivityLogFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ActivityLogFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ActivityLogPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ActivityLogFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ActivityLogPayload>
        }
        findFirst: {
          args: Prisma.ActivityLogFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ActivityLogPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ActivityLogFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ActivityLogPayload>
        }
        findMany: {
          args: Prisma.ActivityLogFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ActivityLogPayload>[]
        }
        create: {
          args: Prisma.ActivityLogCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ActivityLogPayload>
        }
        createMany: {
          args: Prisma.ActivityLogCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ActivityLogCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ActivityLogPayload>[]
        }
        delete: {
          args: Prisma.ActivityLogDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ActivityLogPayload>
        }
        update: {
          args: Prisma.ActivityLogUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ActivityLogPayload>
        }
        deleteMany: {
          args: Prisma.ActivityLogDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ActivityLogUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ActivityLogUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ActivityLogPayload>[]
        }
        upsert: {
          args: Prisma.ActivityLogUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ActivityLogPayload>
        }
        aggregate: {
          args: Prisma.ActivityLogAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateActivityLog>
        }
        groupBy: {
          args: Prisma.ActivityLogGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ActivityLogGroupByOutputType>[]
        }
        count: {
          args: Prisma.ActivityLogCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ActivityLogCountAggregateOutputType> | number
        }
      }
    }
    Deposit: {
      payload: Prisma.$DepositPayload<ExtArgs>
      fields: Prisma.DepositFieldRefs
      operations: {
        findUnique: {
          args: Prisma.DepositFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DepositPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.DepositFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DepositPayload>
        }
        findFirst: {
          args: Prisma.DepositFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DepositPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.DepositFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DepositPayload>
        }
        findMany: {
          args: Prisma.DepositFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DepositPayload>[]
        }
        create: {
          args: Prisma.DepositCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DepositPayload>
        }
        createMany: {
          args: Prisma.DepositCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.DepositCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DepositPayload>[]
        }
        delete: {
          args: Prisma.DepositDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DepositPayload>
        }
        update: {
          args: Prisma.DepositUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DepositPayload>
        }
        deleteMany: {
          args: Prisma.DepositDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.DepositUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.DepositUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DepositPayload>[]
        }
        upsert: {
          args: Prisma.DepositUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DepositPayload>
        }
        aggregate: {
          args: Prisma.DepositAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateDeposit>
        }
        groupBy: {
          args: Prisma.DepositGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.DepositGroupByOutputType>[]
        }
        count: {
          args: Prisma.DepositCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.DepositCountAggregateOutputType> | number
        }
      }
    }
    KYC: {
      payload: Prisma.$KYCPayload<ExtArgs>
      fields: Prisma.KYCFieldRefs
      operations: {
        findUnique: {
          args: Prisma.KYCFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$KYCPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.KYCFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$KYCPayload>
        }
        findFirst: {
          args: Prisma.KYCFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$KYCPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.KYCFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$KYCPayload>
        }
        findMany: {
          args: Prisma.KYCFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$KYCPayload>[]
        }
        create: {
          args: Prisma.KYCCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$KYCPayload>
        }
        createMany: {
          args: Prisma.KYCCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.KYCCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$KYCPayload>[]
        }
        delete: {
          args: Prisma.KYCDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$KYCPayload>
        }
        update: {
          args: Prisma.KYCUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$KYCPayload>
        }
        deleteMany: {
          args: Prisma.KYCDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.KYCUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.KYCUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$KYCPayload>[]
        }
        upsert: {
          args: Prisma.KYCUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$KYCPayload>
        }
        aggregate: {
          args: Prisma.KYCAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateKYC>
        }
        groupBy: {
          args: Prisma.KYCGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.KYCGroupByOutputType>[]
        }
        count: {
          args: Prisma.KYCCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.KYCCountAggregateOutputType> | number
        }
      }
    }
    MT5Account: {
      payload: Prisma.$MT5AccountPayload<ExtArgs>
      fields: Prisma.MT5AccountFieldRefs
      operations: {
        findUnique: {
          args: Prisma.MT5AccountFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MT5AccountPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.MT5AccountFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MT5AccountPayload>
        }
        findFirst: {
          args: Prisma.MT5AccountFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MT5AccountPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.MT5AccountFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MT5AccountPayload>
        }
        findMany: {
          args: Prisma.MT5AccountFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MT5AccountPayload>[]
        }
        create: {
          args: Prisma.MT5AccountCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MT5AccountPayload>
        }
        createMany: {
          args: Prisma.MT5AccountCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.MT5AccountCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MT5AccountPayload>[]
        }
        delete: {
          args: Prisma.MT5AccountDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MT5AccountPayload>
        }
        update: {
          args: Prisma.MT5AccountUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MT5AccountPayload>
        }
        deleteMany: {
          args: Prisma.MT5AccountDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.MT5AccountUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.MT5AccountUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MT5AccountPayload>[]
        }
        upsert: {
          args: Prisma.MT5AccountUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MT5AccountPayload>
        }
        aggregate: {
          args: Prisma.MT5AccountAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateMT5Account>
        }
        groupBy: {
          args: Prisma.MT5AccountGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.MT5AccountGroupByOutputType>[]
        }
        count: {
          args: Prisma.MT5AccountCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.MT5AccountCountAggregateOutputType> | number
        }
      }
    }
    MT5Transaction: {
      payload: Prisma.$MT5TransactionPayload<ExtArgs>
      fields: Prisma.MT5TransactionFieldRefs
      operations: {
        findUnique: {
          args: Prisma.MT5TransactionFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MT5TransactionPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.MT5TransactionFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MT5TransactionPayload>
        }
        findFirst: {
          args: Prisma.MT5TransactionFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MT5TransactionPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.MT5TransactionFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MT5TransactionPayload>
        }
        findMany: {
          args: Prisma.MT5TransactionFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MT5TransactionPayload>[]
        }
        create: {
          args: Prisma.MT5TransactionCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MT5TransactionPayload>
        }
        createMany: {
          args: Prisma.MT5TransactionCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.MT5TransactionCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MT5TransactionPayload>[]
        }
        delete: {
          args: Prisma.MT5TransactionDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MT5TransactionPayload>
        }
        update: {
          args: Prisma.MT5TransactionUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MT5TransactionPayload>
        }
        deleteMany: {
          args: Prisma.MT5TransactionDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.MT5TransactionUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.MT5TransactionUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MT5TransactionPayload>[]
        }
        upsert: {
          args: Prisma.MT5TransactionUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MT5TransactionPayload>
        }
        aggregate: {
          args: Prisma.MT5TransactionAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateMT5Transaction>
        }
        groupBy: {
          args: Prisma.MT5TransactionGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.MT5TransactionGroupByOutputType>[]
        }
        count: {
          args: Prisma.MT5TransactionCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.MT5TransactionCountAggregateOutputType> | number
        }
      }
    }
    PaymentMethod: {
      payload: Prisma.$PaymentMethodPayload<ExtArgs>
      fields: Prisma.PaymentMethodFieldRefs
      operations: {
        findUnique: {
          args: Prisma.PaymentMethodFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PaymentMethodPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.PaymentMethodFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PaymentMethodPayload>
        }
        findFirst: {
          args: Prisma.PaymentMethodFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PaymentMethodPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.PaymentMethodFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PaymentMethodPayload>
        }
        findMany: {
          args: Prisma.PaymentMethodFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PaymentMethodPayload>[]
        }
        create: {
          args: Prisma.PaymentMethodCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PaymentMethodPayload>
        }
        createMany: {
          args: Prisma.PaymentMethodCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.PaymentMethodCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PaymentMethodPayload>[]
        }
        delete: {
          args: Prisma.PaymentMethodDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PaymentMethodPayload>
        }
        update: {
          args: Prisma.PaymentMethodUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PaymentMethodPayload>
        }
        deleteMany: {
          args: Prisma.PaymentMethodDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.PaymentMethodUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.PaymentMethodUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PaymentMethodPayload>[]
        }
        upsert: {
          args: Prisma.PaymentMethodUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PaymentMethodPayload>
        }
        aggregate: {
          args: Prisma.PaymentMethodAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregatePaymentMethod>
        }
        groupBy: {
          args: Prisma.PaymentMethodGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PaymentMethodGroupByOutputType>[]
        }
        count: {
          args: Prisma.PaymentMethodCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PaymentMethodCountAggregateOutputType> | number
        }
      }
    }
    Role: {
      payload: Prisma.$RolePayload<ExtArgs>
      fields: Prisma.RoleFieldRefs
      operations: {
        findUnique: {
          args: Prisma.RoleFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RolePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.RoleFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RolePayload>
        }
        findFirst: {
          args: Prisma.RoleFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RolePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.RoleFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RolePayload>
        }
        findMany: {
          args: Prisma.RoleFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RolePayload>[]
        }
        create: {
          args: Prisma.RoleCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RolePayload>
        }
        createMany: {
          args: Prisma.RoleCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.RoleCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RolePayload>[]
        }
        delete: {
          args: Prisma.RoleDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RolePayload>
        }
        update: {
          args: Prisma.RoleUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RolePayload>
        }
        deleteMany: {
          args: Prisma.RoleDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.RoleUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.RoleUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RolePayload>[]
        }
        upsert: {
          args: Prisma.RoleUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RolePayload>
        }
        aggregate: {
          args: Prisma.RoleAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateRole>
        }
        groupBy: {
          args: Prisma.RoleGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.RoleGroupByOutputType>[]
        }
        count: {
          args: Prisma.RoleCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.RoleCountAggregateOutputType> | number
        }
      }
    }
    SystemSetting: {
      payload: Prisma.$SystemSettingPayload<ExtArgs>
      fields: Prisma.SystemSettingFieldRefs
      operations: {
        findUnique: {
          args: Prisma.SystemSettingFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SystemSettingPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.SystemSettingFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SystemSettingPayload>
        }
        findFirst: {
          args: Prisma.SystemSettingFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SystemSettingPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.SystemSettingFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SystemSettingPayload>
        }
        findMany: {
          args: Prisma.SystemSettingFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SystemSettingPayload>[]
        }
        create: {
          args: Prisma.SystemSettingCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SystemSettingPayload>
        }
        createMany: {
          args: Prisma.SystemSettingCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.SystemSettingCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SystemSettingPayload>[]
        }
        delete: {
          args: Prisma.SystemSettingDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SystemSettingPayload>
        }
        update: {
          args: Prisma.SystemSettingUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SystemSettingPayload>
        }
        deleteMany: {
          args: Prisma.SystemSettingDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.SystemSettingUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.SystemSettingUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SystemSettingPayload>[]
        }
        upsert: {
          args: Prisma.SystemSettingUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SystemSettingPayload>
        }
        aggregate: {
          args: Prisma.SystemSettingAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateSystemSetting>
        }
        groupBy: {
          args: Prisma.SystemSettingGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.SystemSettingGroupByOutputType>[]
        }
        count: {
          args: Prisma.SystemSettingCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.SystemSettingCountAggregateOutputType> | number
        }
      }
    }
    Transaction: {
      payload: Prisma.$TransactionPayload<ExtArgs>
      fields: Prisma.TransactionFieldRefs
      operations: {
        findUnique: {
          args: Prisma.TransactionFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TransactionPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.TransactionFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TransactionPayload>
        }
        findFirst: {
          args: Prisma.TransactionFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TransactionPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.TransactionFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TransactionPayload>
        }
        findMany: {
          args: Prisma.TransactionFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TransactionPayload>[]
        }
        create: {
          args: Prisma.TransactionCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TransactionPayload>
        }
        createMany: {
          args: Prisma.TransactionCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.TransactionCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TransactionPayload>[]
        }
        delete: {
          args: Prisma.TransactionDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TransactionPayload>
        }
        update: {
          args: Prisma.TransactionUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TransactionPayload>
        }
        deleteMany: {
          args: Prisma.TransactionDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.TransactionUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.TransactionUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TransactionPayload>[]
        }
        upsert: {
          args: Prisma.TransactionUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TransactionPayload>
        }
        aggregate: {
          args: Prisma.TransactionAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateTransaction>
        }
        groupBy: {
          args: Prisma.TransactionGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TransactionGroupByOutputType>[]
        }
        count: {
          args: Prisma.TransactionCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TransactionCountAggregateOutputType> | number
        }
      }
    }
    User: {
      payload: Prisma.$UserPayload<ExtArgs>
      fields: Prisma.UserFieldRefs
      operations: {
        findUnique: {
          args: Prisma.UserFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        findFirst: {
          args: Prisma.UserFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        findMany: {
          args: Prisma.UserFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>[]
        }
        create: {
          args: Prisma.UserCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        createMany: {
          args: Prisma.UserCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>[]
        }
        delete: {
          args: Prisma.UserDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        update: {
          args: Prisma.UserUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        deleteMany: {
          args: Prisma.UserDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.UserUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>[]
        }
        upsert: {
          args: Prisma.UserUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        aggregate: {
          args: Prisma.UserAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateUser>
        }
        groupBy: {
          args: Prisma.UserGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.UserGroupByOutputType>[]
        }
        count: {
          args: Prisma.UserCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.UserCountAggregateOutputType> | number
        }
      }
    }
    UserRole: {
      payload: Prisma.$UserRolePayload<ExtArgs>
      fields: Prisma.UserRoleFieldRefs
      operations: {
        findUnique: {
          args: Prisma.UserRoleFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserRolePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.UserRoleFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserRolePayload>
        }
        findFirst: {
          args: Prisma.UserRoleFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserRolePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.UserRoleFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserRolePayload>
        }
        findMany: {
          args: Prisma.UserRoleFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserRolePayload>[]
        }
        create: {
          args: Prisma.UserRoleCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserRolePayload>
        }
        createMany: {
          args: Prisma.UserRoleCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.UserRoleCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserRolePayload>[]
        }
        delete: {
          args: Prisma.UserRoleDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserRolePayload>
        }
        update: {
          args: Prisma.UserRoleUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserRolePayload>
        }
        deleteMany: {
          args: Prisma.UserRoleDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.UserRoleUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.UserRoleUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserRolePayload>[]
        }
        upsert: {
          args: Prisma.UserRoleUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserRolePayload>
        }
        aggregate: {
          args: Prisma.UserRoleAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateUserRole>
        }
        groupBy: {
          args: Prisma.UserRoleGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.UserRoleGroupByOutputType>[]
        }
        count: {
          args: Prisma.UserRoleCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.UserRoleCountAggregateOutputType> | number
        }
      }
    }
    Withdrawal: {
      payload: Prisma.$WithdrawalPayload<ExtArgs>
      fields: Prisma.WithdrawalFieldRefs
      operations: {
        findUnique: {
          args: Prisma.WithdrawalFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WithdrawalPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.WithdrawalFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WithdrawalPayload>
        }
        findFirst: {
          args: Prisma.WithdrawalFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WithdrawalPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.WithdrawalFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WithdrawalPayload>
        }
        findMany: {
          args: Prisma.WithdrawalFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WithdrawalPayload>[]
        }
        create: {
          args: Prisma.WithdrawalCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WithdrawalPayload>
        }
        createMany: {
          args: Prisma.WithdrawalCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.WithdrawalCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WithdrawalPayload>[]
        }
        delete: {
          args: Prisma.WithdrawalDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WithdrawalPayload>
        }
        update: {
          args: Prisma.WithdrawalUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WithdrawalPayload>
        }
        deleteMany: {
          args: Prisma.WithdrawalDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.WithdrawalUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.WithdrawalUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WithdrawalPayload>[]
        }
        upsert: {
          args: Prisma.WithdrawalUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WithdrawalPayload>
        }
        aggregate: {
          args: Prisma.WithdrawalAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateWithdrawal>
        }
        groupBy: {
          args: Prisma.WithdrawalGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.WithdrawalGroupByOutputType>[]
        }
        count: {
          args: Prisma.WithdrawalCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.WithdrawalCountAggregateOutputType> | number
        }
      }
    }
    chat_conversations: {
      payload: Prisma.$chat_conversationsPayload<ExtArgs>
      fields: Prisma.chat_conversationsFieldRefs
      operations: {
        findUnique: {
          args: Prisma.chat_conversationsFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$chat_conversationsPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.chat_conversationsFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$chat_conversationsPayload>
        }
        findFirst: {
          args: Prisma.chat_conversationsFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$chat_conversationsPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.chat_conversationsFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$chat_conversationsPayload>
        }
        findMany: {
          args: Prisma.chat_conversationsFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$chat_conversationsPayload>[]
        }
        create: {
          args: Prisma.chat_conversationsCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$chat_conversationsPayload>
        }
        createMany: {
          args: Prisma.chat_conversationsCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.chat_conversationsCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$chat_conversationsPayload>[]
        }
        delete: {
          args: Prisma.chat_conversationsDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$chat_conversationsPayload>
        }
        update: {
          args: Prisma.chat_conversationsUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$chat_conversationsPayload>
        }
        deleteMany: {
          args: Prisma.chat_conversationsDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.chat_conversationsUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.chat_conversationsUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$chat_conversationsPayload>[]
        }
        upsert: {
          args: Prisma.chat_conversationsUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$chat_conversationsPayload>
        }
        aggregate: {
          args: Prisma.Chat_conversationsAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateChat_conversations>
        }
        groupBy: {
          args: Prisma.chat_conversationsGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Chat_conversationsGroupByOutputType>[]
        }
        count: {
          args: Prisma.chat_conversationsCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Chat_conversationsCountAggregateOutputType> | number
        }
      }
    }
    chat_messages: {
      payload: Prisma.$chat_messagesPayload<ExtArgs>
      fields: Prisma.chat_messagesFieldRefs
      operations: {
        findUnique: {
          args: Prisma.chat_messagesFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$chat_messagesPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.chat_messagesFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$chat_messagesPayload>
        }
        findFirst: {
          args: Prisma.chat_messagesFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$chat_messagesPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.chat_messagesFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$chat_messagesPayload>
        }
        findMany: {
          args: Prisma.chat_messagesFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$chat_messagesPayload>[]
        }
        create: {
          args: Prisma.chat_messagesCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$chat_messagesPayload>
        }
        createMany: {
          args: Prisma.chat_messagesCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.chat_messagesCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$chat_messagesPayload>[]
        }
        delete: {
          args: Prisma.chat_messagesDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$chat_messagesPayload>
        }
        update: {
          args: Prisma.chat_messagesUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$chat_messagesPayload>
        }
        deleteMany: {
          args: Prisma.chat_messagesDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.chat_messagesUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.chat_messagesUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$chat_messagesPayload>[]
        }
        upsert: {
          args: Prisma.chat_messagesUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$chat_messagesPayload>
        }
        aggregate: {
          args: Prisma.Chat_messagesAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateChat_messages>
        }
        groupBy: {
          args: Prisma.chat_messagesGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Chat_messagesGroupByOutputType>[]
        }
        count: {
          args: Prisma.chat_messagesCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Chat_messagesCountAggregateOutputType> | number
        }
      }
    }
    chat_participants: {
      payload: Prisma.$chat_participantsPayload<ExtArgs>
      fields: Prisma.chat_participantsFieldRefs
      operations: {
        findUnique: {
          args: Prisma.chat_participantsFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$chat_participantsPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.chat_participantsFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$chat_participantsPayload>
        }
        findFirst: {
          args: Prisma.chat_participantsFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$chat_participantsPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.chat_participantsFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$chat_participantsPayload>
        }
        findMany: {
          args: Prisma.chat_participantsFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$chat_participantsPayload>[]
        }
        create: {
          args: Prisma.chat_participantsCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$chat_participantsPayload>
        }
        createMany: {
          args: Prisma.chat_participantsCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.chat_participantsCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$chat_participantsPayload>[]
        }
        delete: {
          args: Prisma.chat_participantsDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$chat_participantsPayload>
        }
        update: {
          args: Prisma.chat_participantsUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$chat_participantsPayload>
        }
        deleteMany: {
          args: Prisma.chat_participantsDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.chat_participantsUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.chat_participantsUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$chat_participantsPayload>[]
        }
        upsert: {
          args: Prisma.chat_participantsUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$chat_participantsPayload>
        }
        aggregate: {
          args: Prisma.Chat_participantsAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateChat_participants>
        }
        groupBy: {
          args: Prisma.chat_participantsGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Chat_participantsGroupByOutputType>[]
        }
        count: {
          args: Prisma.chat_participantsCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Chat_participantsCountAggregateOutputType> | number
        }
      }
    }
    group_commission_structures: {
      payload: Prisma.$group_commission_structuresPayload<ExtArgs>
      fields: Prisma.group_commission_structuresFieldRefs
      operations: {
        findUnique: {
          args: Prisma.group_commission_structuresFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$group_commission_structuresPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.group_commission_structuresFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$group_commission_structuresPayload>
        }
        findFirst: {
          args: Prisma.group_commission_structuresFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$group_commission_structuresPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.group_commission_structuresFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$group_commission_structuresPayload>
        }
        findMany: {
          args: Prisma.group_commission_structuresFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$group_commission_structuresPayload>[]
        }
        create: {
          args: Prisma.group_commission_structuresCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$group_commission_structuresPayload>
        }
        createMany: {
          args: Prisma.group_commission_structuresCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.group_commission_structuresCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$group_commission_structuresPayload>[]
        }
        delete: {
          args: Prisma.group_commission_structuresDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$group_commission_structuresPayload>
        }
        update: {
          args: Prisma.group_commission_structuresUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$group_commission_structuresPayload>
        }
        deleteMany: {
          args: Prisma.group_commission_structuresDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.group_commission_structuresUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.group_commission_structuresUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$group_commission_structuresPayload>[]
        }
        upsert: {
          args: Prisma.group_commission_structuresUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$group_commission_structuresPayload>
        }
        aggregate: {
          args: Prisma.Group_commission_structuresAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateGroup_commission_structures>
        }
        groupBy: {
          args: Prisma.group_commission_structuresGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Group_commission_structuresGroupByOutputType>[]
        }
        count: {
          args: Prisma.group_commission_structuresCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Group_commission_structuresCountAggregateOutputType> | number
        }
      }
    }
    ib_admin: {
      payload: Prisma.$ib_adminPayload<ExtArgs>
      fields: Prisma.ib_adminFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ib_adminFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ib_adminPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ib_adminFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ib_adminPayload>
        }
        findFirst: {
          args: Prisma.ib_adminFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ib_adminPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ib_adminFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ib_adminPayload>
        }
        findMany: {
          args: Prisma.ib_adminFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ib_adminPayload>[]
        }
        create: {
          args: Prisma.ib_adminCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ib_adminPayload>
        }
        createMany: {
          args: Prisma.ib_adminCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ib_adminCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ib_adminPayload>[]
        }
        delete: {
          args: Prisma.ib_adminDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ib_adminPayload>
        }
        update: {
          args: Prisma.ib_adminUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ib_adminPayload>
        }
        deleteMany: {
          args: Prisma.ib_adminDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ib_adminUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ib_adminUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ib_adminPayload>[]
        }
        upsert: {
          args: Prisma.ib_adminUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ib_adminPayload>
        }
        aggregate: {
          args: Prisma.Ib_adminAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateIb_admin>
        }
        groupBy: {
          args: Prisma.ib_adminGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Ib_adminGroupByOutputType>[]
        }
        count: {
          args: Prisma.ib_adminCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Ib_adminCountAggregateOutputType> | number
        }
      }
    }
    ib_requests: {
      payload: Prisma.$ib_requestsPayload<ExtArgs>
      fields: Prisma.ib_requestsFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ib_requestsFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ib_requestsPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ib_requestsFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ib_requestsPayload>
        }
        findFirst: {
          args: Prisma.ib_requestsFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ib_requestsPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ib_requestsFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ib_requestsPayload>
        }
        findMany: {
          args: Prisma.ib_requestsFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ib_requestsPayload>[]
        }
        create: {
          args: Prisma.ib_requestsCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ib_requestsPayload>
        }
        createMany: {
          args: Prisma.ib_requestsCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ib_requestsCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ib_requestsPayload>[]
        }
        delete: {
          args: Prisma.ib_requestsDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ib_requestsPayload>
        }
        update: {
          args: Prisma.ib_requestsUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ib_requestsPayload>
        }
        deleteMany: {
          args: Prisma.ib_requestsDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ib_requestsUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ib_requestsUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ib_requestsPayload>[]
        }
        upsert: {
          args: Prisma.ib_requestsUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ib_requestsPayload>
        }
        aggregate: {
          args: Prisma.Ib_requestsAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateIb_requests>
        }
        groupBy: {
          args: Prisma.ib_requestsGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Ib_requestsGroupByOutputType>[]
        }
        count: {
          args: Prisma.ib_requestsCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Ib_requestsCountAggregateOutputType> | number
        }
      }
    }
    mt5_groups: {
      payload: Prisma.$mt5_groupsPayload<ExtArgs>
      fields: Prisma.mt5_groupsFieldRefs
      operations: {
        findUnique: {
          args: Prisma.mt5_groupsFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$mt5_groupsPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.mt5_groupsFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$mt5_groupsPayload>
        }
        findFirst: {
          args: Prisma.mt5_groupsFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$mt5_groupsPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.mt5_groupsFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$mt5_groupsPayload>
        }
        findMany: {
          args: Prisma.mt5_groupsFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$mt5_groupsPayload>[]
        }
        create: {
          args: Prisma.mt5_groupsCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$mt5_groupsPayload>
        }
        createMany: {
          args: Prisma.mt5_groupsCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.mt5_groupsCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$mt5_groupsPayload>[]
        }
        delete: {
          args: Prisma.mt5_groupsDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$mt5_groupsPayload>
        }
        update: {
          args: Prisma.mt5_groupsUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$mt5_groupsPayload>
        }
        deleteMany: {
          args: Prisma.mt5_groupsDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.mt5_groupsUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.mt5_groupsUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$mt5_groupsPayload>[]
        }
        upsert: {
          args: Prisma.mt5_groupsUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$mt5_groupsPayload>
        }
        aggregate: {
          args: Prisma.Mt5_groupsAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateMt5_groups>
        }
        groupBy: {
          args: Prisma.mt5_groupsGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Mt5_groupsGroupByOutputType>[]
        }
        count: {
          args: Prisma.mt5_groupsCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Mt5_groupsCountAggregateOutputType> | number
        }
      }
    }
    symbols: {
      payload: Prisma.$symbolsPayload<ExtArgs>
      fields: Prisma.symbolsFieldRefs
      operations: {
        findUnique: {
          args: Prisma.symbolsFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$symbolsPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.symbolsFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$symbolsPayload>
        }
        findFirst: {
          args: Prisma.symbolsFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$symbolsPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.symbolsFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$symbolsPayload>
        }
        findMany: {
          args: Prisma.symbolsFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$symbolsPayload>[]
        }
        create: {
          args: Prisma.symbolsCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$symbolsPayload>
        }
        createMany: {
          args: Prisma.symbolsCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.symbolsCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$symbolsPayload>[]
        }
        delete: {
          args: Prisma.symbolsDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$symbolsPayload>
        }
        update: {
          args: Prisma.symbolsUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$symbolsPayload>
        }
        deleteMany: {
          args: Prisma.symbolsDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.symbolsUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.symbolsUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$symbolsPayload>[]
        }
        upsert: {
          args: Prisma.symbolsUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$symbolsPayload>
        }
        aggregate: {
          args: Prisma.SymbolsAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateSymbols>
        }
        groupBy: {
          args: Prisma.symbolsGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.SymbolsGroupByOutputType>[]
        }
        count: {
          args: Prisma.symbolsCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.SymbolsCountAggregateOutputType> | number
        }
      }
    }
  }
} & {
  other: {
    payload: any
    operations: {
      $executeRaw: {
        args: [query: TemplateStringsArray | Sql, ...values: any[]],
        result: any
      }
      $executeRawUnsafe: {
        args: [query: string, ...values: any[]],
        result: any
      }
      $queryRaw: {
        args: [query: TemplateStringsArray | Sql, ...values: any[]],
        result: any
      }
      $queryRawUnsafe: {
        args: [query: string, ...values: any[]],
        result: any
      }
    }
  }
}

/**
 * Enums
 */

export const TransactionIsolationLevel = runtime.makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
} as const)

export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


export const AccountScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  accountType: 'accountType',
  balance: 'balance',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type AccountScalarFieldEnum = (typeof AccountScalarFieldEnum)[keyof typeof AccountScalarFieldEnum]


export const ActivityLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  adminId: 'adminId',
  action: 'action',
  entity: 'entity',
  entityId: 'entityId',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  oldValues: 'oldValues',
  newValues: 'newValues',
  createdAt: 'createdAt'
} as const

export type ActivityLogScalarFieldEnum = (typeof ActivityLogScalarFieldEnum)[keyof typeof ActivityLogScalarFieldEnum]


export const DepositScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  mt5AccountId: 'mt5AccountId',
  amount: 'amount',
  currency: 'currency',
  method: 'method',
  paymentMethod: 'paymentMethod',
  transactionHash: 'transactionHash',
  proofFileUrl: 'proofFileUrl',
  bankDetails: 'bankDetails',
  cryptoAddress: 'cryptoAddress',
  depositAddress: 'depositAddress',
  externalTransactionId: 'externalTransactionId',
  status: 'status',
  rejectionReason: 'rejectionReason',
  approvedBy: 'approvedBy',
  approvedAt: 'approvedAt',
  rejectedAt: 'rejectedAt',
  processedAt: 'processedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type DepositScalarFieldEnum = (typeof DepositScalarFieldEnum)[keyof typeof DepositScalarFieldEnum]


export const KYCScalarFieldEnum = {
  id: 'id',
  isDocumentVerified: 'isDocumentVerified',
  isAddressVerified: 'isAddressVerified',
  verificationStatus: 'verificationStatus',
  documentReference: 'documentReference',
  addressReference: 'addressReference',
  amlReference: 'amlReference',
  documentSubmittedAt: 'documentSubmittedAt',
  addressSubmittedAt: 'addressSubmittedAt',
  rejectionReason: 'rejectionReason',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId'
} as const

export type KYCScalarFieldEnum = (typeof KYCScalarFieldEnum)[keyof typeof KYCScalarFieldEnum]


export const MT5AccountScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type MT5AccountScalarFieldEnum = (typeof MT5AccountScalarFieldEnum)[keyof typeof MT5AccountScalarFieldEnum]


export const MT5TransactionScalarFieldEnum = {
  id: 'id',
  type: 'type',
  amount: 'amount',
  status: 'status',
  paymentMethod: 'paymentMethod',
  transactionId: 'transactionId',
  comment: 'comment',
  mt5AccountId: 'mt5AccountId',
  createdAt: 'createdAt',
  currency: 'currency',
  depositId: 'depositId',
  withdrawalId: 'withdrawalId',
  userId: 'userId',
  processedBy: 'processedBy',
  processedAt: 'processedAt',
  updatedAt: 'updatedAt'
} as const

export type MT5TransactionScalarFieldEnum = (typeof MT5TransactionScalarFieldEnum)[keyof typeof MT5TransactionScalarFieldEnum]


export const PaymentMethodScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  address: 'address',
  currency: 'currency',
  network: 'network',
  status: 'status',
  submittedAt: 'submittedAt',
  approvedAt: 'approvedAt',
  approvedBy: 'approvedBy',
  rejectionReason: 'rejectionReason',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type PaymentMethodScalarFieldEnum = (typeof PaymentMethodScalarFieldEnum)[keyof typeof PaymentMethodScalarFieldEnum]


export const RoleScalarFieldEnum = {
  id: 'id',
  name: 'name',
  permissions: 'permissions',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type RoleScalarFieldEnum = (typeof RoleScalarFieldEnum)[keyof typeof RoleScalarFieldEnum]


export const SystemSettingScalarFieldEnum = {
  id: 'id',
  key: 'key',
  value: 'value',
  category: 'category',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type SystemSettingScalarFieldEnum = (typeof SystemSettingScalarFieldEnum)[keyof typeof SystemSettingScalarFieldEnum]


export const TransactionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  amount: 'amount',
  status: 'status',
  currency: 'currency',
  paymentMethod: 'paymentMethod',
  transactionId: 'transactionId',
  description: 'description',
  metadata: 'metadata',
  depositId: 'depositId',
  withdrawalId: 'withdrawalId',
  updatedAt: 'updatedAt',
  createdAt: 'createdAt'
} as const

export type TransactionScalarFieldEnum = (typeof TransactionScalarFieldEnum)[keyof typeof TransactionScalarFieldEnum]


export const UserScalarFieldEnum = {
  id: 'id',
  clientId: 'clientId',
  email: 'email',
  password: 'password',
  name: 'name',
  phone: 'phone',
  country: 'country',
  createdAt: 'createdAt',
  emailVerified: 'emailVerified',
  lastLoginAt: 'lastLoginAt',
  role: 'role',
  status: 'status'
} as const

export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


export const UserRoleScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  roleId: 'roleId',
  assignedAt: 'assignedAt',
  assignedBy: 'assignedBy'
} as const

export type UserRoleScalarFieldEnum = (typeof UserRoleScalarFieldEnum)[keyof typeof UserRoleScalarFieldEnum]


export const WithdrawalScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  mt5AccountId: 'mt5AccountId',
  amount: 'amount',
  method: 'method',
  bankDetails: 'bankDetails',
  cryptoAddress: 'cryptoAddress',
  status: 'status',
  rejectionReason: 'rejectionReason',
  approvedBy: 'approvedBy',
  approvedAt: 'approvedAt',
  rejectedAt: 'rejectedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  currency: 'currency',
  externalTransactionId: 'externalTransactionId',
  paymentMethod: 'paymentMethod',
  processedAt: 'processedAt',
  walletAddress: 'walletAddress'
} as const

export type WithdrawalScalarFieldEnum = (typeof WithdrawalScalarFieldEnum)[keyof typeof WithdrawalScalarFieldEnum]


export const Chat_conversationsScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  user_name: 'user_name',
  user_email: 'user_email',
  admin_id: 'admin_id',
  status: 'status',
  priority: 'priority',
  subject: 'subject',
  last_message_at: 'last_message_at',
  created_at: 'created_at',
  updated_at: 'updated_at',
  closed_at: 'closed_at',
  closed_by: 'closed_by',
  tags: 'tags',
  unread_count_admin: 'unread_count_admin',
  unread_count_user: 'unread_count_user'
} as const

export type Chat_conversationsScalarFieldEnum = (typeof Chat_conversationsScalarFieldEnum)[keyof typeof Chat_conversationsScalarFieldEnum]


export const Chat_messagesScalarFieldEnum = {
  id: 'id',
  conversation_id: 'conversation_id',
  sender_id: 'sender_id',
  sender_name: 'sender_name',
  sender_type: 'sender_type',
  message_type: 'message_type',
  content: 'content',
  metadata: 'metadata',
  is_read: 'is_read',
  read_at: 'read_at',
  created_at: 'created_at',
  updated_at: 'updated_at'
} as const

export type Chat_messagesScalarFieldEnum = (typeof Chat_messagesScalarFieldEnum)[keyof typeof Chat_messagesScalarFieldEnum]


export const Chat_participantsScalarFieldEnum = {
  id: 'id',
  conversation_id: 'conversation_id',
  user_id: 'user_id',
  user_name: 'user_name',
  user_type: 'user_type',
  role: 'role',
  joined_at: 'joined_at',
  left_at: 'left_at',
  is_active: 'is_active'
} as const

export type Chat_participantsScalarFieldEnum = (typeof Chat_participantsScalarFieldEnum)[keyof typeof Chat_participantsScalarFieldEnum]


export const Group_commission_structuresScalarFieldEnum = {
  id: 'id',
  group_id: 'group_id',
  structure_name: 'structure_name',
  usd_per_lot: 'usd_per_lot',
  spread_share_percentage: 'spread_share_percentage',
  is_active: 'is_active',
  created_at: 'created_at',
  updated_at: 'updated_at'
} as const

export type Group_commission_structuresScalarFieldEnum = (typeof Group_commission_structuresScalarFieldEnum)[keyof typeof Group_commission_structuresScalarFieldEnum]


export const Ib_adminScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password_hash: 'password_hash',
  role: 'role',
  is_active: 'is_active',
  last_login: 'last_login',
  login_attempts: 'login_attempts',
  locked_until: 'locked_until',
  created_at: 'created_at',
  updated_at: 'updated_at'
} as const

export type Ib_adminScalarFieldEnum = (typeof Ib_adminScalarFieldEnum)[keyof typeof Ib_adminScalarFieldEnum]


export const Ib_requestsScalarFieldEnum = {
  id: 'id',
  full_name: 'full_name',
  email: 'email',
  password_hash: 'password_hash',
  status: 'status',
  ib_type: 'ib_type',
  submitted_at: 'submitted_at',
  approved_at: 'approved_at',
  usd_per_lot: 'usd_per_lot',
  spread_percentage_per_lot: 'spread_percentage_per_lot',
  admin_comments: 'admin_comments',
  group_id: 'group_id',
  structure_id: 'structure_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
} as const

export type Ib_requestsScalarFieldEnum = (typeof Ib_requestsScalarFieldEnum)[keyof typeof Ib_requestsScalarFieldEnum]


export const Mt5_groupsScalarFieldEnum = {
  id: 'id',
  group_id: 'group_id',
  name: 'name',
  description: 'description',
  synced_at: 'synced_at',
  created_at: 'created_at',
  updated_at: 'updated_at'
} as const

export type Mt5_groupsScalarFieldEnum = (typeof Mt5_groupsScalarFieldEnum)[keyof typeof Mt5_groupsScalarFieldEnum]


export const SymbolsScalarFieldEnum = {
  id: 'id',
  symbol_name: 'symbol_name',
  description: 'description',
  symbol_type: 'symbol_type',
  group_name: 'group_name',
  digits: 'digits',
  spread: 'spread',
  contract_size: 'contract_size',
  profit_mode: 'profit_mode',
  enable: 'enable',
  swap_mode: 'swap_mode',
  swap_long: 'swap_long',
  swap_short: 'swap_short',
  swap3_day: 'swap3_day',
  created_at: 'created_at',
  updated_at: 'updated_at'
} as const

export type SymbolsScalarFieldEnum = (typeof SymbolsScalarFieldEnum)[keyof typeof SymbolsScalarFieldEnum]


export const SortOrder = {
  asc: 'asc',
  desc: 'desc'
} as const

export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


export const NullableJsonNullValueInput = {
  DbNull: DbNull,
  JsonNull: JsonNull
} as const

export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


export const QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
} as const

export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


export const NullsOrder = {
  first: 'first',
  last: 'last'
} as const

export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


export const JsonNullValueFilter = {
  DbNull: DbNull,
  JsonNull: JsonNull,
  AnyNull: AnyNull
} as const

export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]



/**
 * Field references
 */


/**
 * Reference to a field of type 'String'
 */
export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


/**
 * Reference to a field of type 'String[]'
 */
export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


/**
 * Reference to a field of type 'Float'
 */
export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


/**
 * Reference to a field of type 'Float[]'
 */
export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


/**
 * Reference to a field of type 'DateTime'
 */
export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


/**
 * Reference to a field of type 'DateTime[]'
 */
export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


/**
 * Reference to a field of type 'Boolean'
 */
export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


/**
 * Reference to a field of type 'Int'
 */
export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


/**
 * Reference to a field of type 'Int[]'
 */
export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


/**
 * Reference to a field of type 'Json'
 */
export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


/**
 * Reference to a field of type 'QueryMode'
 */
export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


/**
 * Reference to a field of type 'Decimal'
 */
export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


/**
 * Reference to a field of type 'Decimal[]'
 */
export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    

/**
 * Batch Payload for updateMany & deleteMany & createMany
 */
export type BatchPayload = {
  count: number
}


export type Datasource = {
  url?: string
}
export type Datasources = {
  db?: Datasource
}

export const defineExtension = runtime.Extensions.defineExtension as unknown as runtime.Types.Extensions.ExtendsHook<"define", TypeMapCb, runtime.Types.Extensions.DefaultArgs>
export type DefaultPrismaClient = PrismaClient
export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
export interface PrismaClientOptions {
  /**
   * Overwrites the datasource url from your schema.prisma file
   */
  datasources?: Datasources
  /**
   * Overwrites the datasource url from your schema.prisma file
   */
  datasourceUrl?: string
  /**
   * @default "colorless"
   */
  errorFormat?: ErrorFormat
  /**
   * @example
   * ```
   * // Shorthand for `emit: 'stdout'`
   * log: ['query', 'info', 'warn', 'error']
   * 
   * // Emit as events only
   * log: [
   *   { emit: 'event', level: 'query' },
   *   { emit: 'event', level: 'info' },
   *   { emit: 'event', level: 'warn' }
   *   { emit: 'event', level: 'error' }
   * ]
   * 
   * / Emit as events and log to stdout
   * og: [
   *  { emit: 'stdout', level: 'query' },
   *  { emit: 'stdout', level: 'info' },
   *  { emit: 'stdout', level: 'warn' }
   *  { emit: 'stdout', level: 'error' }
   * 
   * ```
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
   */
  log?: (LogLevel | LogDefinition)[]
  /**
   * The default values for transactionOptions
   * maxWait ?= 2000
   * timeout ?= 5000
   */
  transactionOptions?: {
    maxWait?: number
    timeout?: number
    isolationLevel?: TransactionIsolationLevel
  }
  /**
   * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`
   */
  adapter?: runtime.SqlDriverAdapterFactory | null
  /**
   * Global configuration for omitting model fields by default.
   * 
   * @example
   * ```
   * const prisma = new PrismaClient({
   *   omit: {
   *     user: {
   *       password: true
   *     }
   *   }
   * })
   * ```
   */
  omit?: GlobalOmitConfig
}
export type GlobalOmitConfig = {
  account?: Prisma.AccountOmit
  activityLog?: Prisma.ActivityLogOmit
  deposit?: Prisma.DepositOmit
  kYC?: Prisma.KYCOmit
  mT5Account?: Prisma.MT5AccountOmit
  mT5Transaction?: Prisma.MT5TransactionOmit
  paymentMethod?: Prisma.PaymentMethodOmit
  role?: Prisma.RoleOmit
  systemSetting?: Prisma.SystemSettingOmit
  transaction?: Prisma.TransactionOmit
  user?: Prisma.UserOmit
  userRole?: Prisma.UserRoleOmit
  withdrawal?: Prisma.WithdrawalOmit
  chat_conversations?: Prisma.chat_conversationsOmit
  chat_messages?: Prisma.chat_messagesOmit
  chat_participants?: Prisma.chat_participantsOmit
  group_commission_structures?: Prisma.group_commission_structuresOmit
  ib_admin?: Prisma.ib_adminOmit
  ib_requests?: Prisma.ib_requestsOmit
  mt5_groups?: Prisma.mt5_groupsOmit
  symbols?: Prisma.symbolsOmit
}

/* Types for Logging */
export type LogLevel = 'info' | 'query' | 'warn' | 'error'
export type LogDefinition = {
  level: LogLevel
  emit: 'stdout' | 'event'
}

export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

export type GetLogType<T> = CheckIsLogLevel<
  T extends LogDefinition ? T['level'] : T
>;

export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
  ? GetLogType<T[number]>
  : never;

export type QueryEvent = {
  timestamp: Date
  query: string
  params: string
  duration: number
  target: string
}

export type LogEvent = {
  timestamp: Date
  message: string
  target: string
}
/* End Types for Logging */


export type PrismaAction =
  | 'findUnique'
  | 'findUniqueOrThrow'
  | 'findMany'
  | 'findFirst'
  | 'findFirstOrThrow'
  | 'create'
  | 'createMany'
  | 'createManyAndReturn'
  | 'update'
  | 'updateMany'
  | 'updateManyAndReturn'
  | 'upsert'
  | 'delete'
  | 'deleteMany'
  | 'executeRaw'
  | 'queryRaw'
  | 'aggregate'
  | 'count'
  | 'runCommandRaw'
  | 'findRaw'
  | 'groupBy'

/**
 * `PrismaClient` proxy available in interactive transactions.
 */
export type TransactionClient = Omit<DefaultPrismaClient, runtime.ITXClientDenyList>

